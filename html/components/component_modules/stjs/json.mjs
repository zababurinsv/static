import isEmpty from"/static/html/components/component_modules/isEmpty/isEmpty_t.mjs";let root,SELECT={};SELECT.$progress=!1,SELECT.$selected=!1;const handler={get:(e,t)=>(console.log("~~~ get ~~~",t,"---\x3e",e[t]),e[t]),set:(e,t,r)=>(console.log("~~~ set ~~~",t,"---\x3e",r),e[t]=r,e)};function proxy(e){return e=new Proxy(e,handler)}let Helper={is_template:e=>new Promise(async function(t,r){t(/\{\{(.+)\}\}/g.test(e))})},TRANSFORM={},object={};object.Helper=Helper,object.SELECT=SELECT,SELECT.exec=((e,t,r)=>new Promise(async function(o,i){try{if("string"==typeof e);else if(await Helper.is_array(e))for(var n=0;n<e.length;n++)await SELECT.exec(e[n],t+"["+n+"]",r);else for(var l in e)if("$root"!==l){if(r(l,e[l])){let r=SELECT.$selected.length;SELECT.$selected.push({index:r,key:l,path:t,object:e,value:e[l]})}await SELECT.exec(e[l],t+'["'+l+'"]',r)}}catch(e){s={_:"exec",error:e},console.log("~~~ err ~~~",s),i(s)}var s})),SELECT.objects=((e={_:"SELECT",SELECT:void 0})=>new Promise(async function(t,r){isEmpty(e.SELECT)||(SELECT=e.SELECT),SELECT.$progress=null,SELECT.$selected?t(SELECT.$selected.map(function(e){return e.object})):t([SELECT.$selected_root])})),SELECT.keys=((e={_:"SELECT",SELECT:void 0})=>new Promise(async function(t,r){isEmpty(e.SELECT)||(SELECT=e.SELECT),SELECT.$progress=null,SELECT.$selected?t(SELECT.$selected.map(function(e){return e.key})):Array.isArray(SELECT.$selected_root)?t(Object.keys(SELECT.$selected_root).map(function(e){return parseInt(e)})):t(Object.keys(SELECT.$selected_root))})),SELECT.paths=((e={_:"SELECT",SELECT:void 0})=>new Promise(async function(t,r){isEmpty(e.SELECT)||(SELECT=e.SELECT),SELECT.$progress=null,SELECT.$selected?t(SELECT.$selected.map(function(e){return e.path})):Array.isArray(SELECT.$selected_root)?t(Object.keys(SELECT.$selected_root).map(function(e){return"["+e+"]"})):t(Object.keys(SELECT.$selected_root).map(function(e){return'["'+e+'"]'}))})),SELECT.values=((e={_:"SELECT",SELECT:void 0})=>new Promise(async function(t,r){isEmpty(e.SELECT)||(SELECT=e.SELECT),SELECT.$progress=null,SELECT.$selected?t(SELECT.$selected.map(function(e){return e.value})):t(Object.values(SELECT.$selected_root))})),SELECT.root=((e={_:"SELECT",SELECT:void 0})=>new Promise(async function(t,r){isEmpty(e.SELECT)||(SELECT=e.SELECT),SELECT.$progress=null,t(SELECT.$selected_root)})),Helper.is_array=(e=>new Promise(async function(t,r){t(Array.isArray(e)||!!e&&"object"==typeof e&&"number"==typeof e.length&&(0===e.length||e.length>0&&e.length-1 in e))})),Helper.resolve=((e,t,r)=>new Promise(async function(o,i){let n=e=>{o(e)};try{if(t&&t.length>0){n(Function("new_val","with(this) {this"+t+"=new_val; return this;}").bind(e)(r))}else n(e=r)}catch(e){l={_:"Helper.resolve",error:e},console.log("~~~ err ~~~",l),i(l)}var l})),TRANSFORM._fillout=(e=>new Promise(async function(t,r){let o=e=>{t(e)};try{let t=/\{\{(.*?)\}\}/g,n=/^\{\{((?!\}\}).)*\}\}$/,l=e.variable,s=e.data,a=e.template,E=l.replace(t,"$1");if(s){let e;-1===["number","string","array","boolean","function"].indexOf(typeof s)&&(s.$root=root);let t=/function\([ ]*\)[ ]*\{(.*)\}[ ]*$/g.exec(E),r=(e=t?Function("with(this) {"+t[1]+"}").bind(s):/\breturn [^;]+;?[ ]*$/.test(E)&&/return[^}]*$/.test(E)?Function("with(this) {"+E+"}").bind(s):Function("with(this) {return ("+E+")}").bind(s))();if(delete s.$root,r&&(r=r.valueOf()),void 0===r)o(a);else if(r)a?n.test(a)?o(r):o(a.replace(l,r)):o(r);else{if(!a)return"";n.test(a)?o(r):o(a.replace(l,""))}}else o(a)}catch(e){i={_:"_fillout",error:e},console.log("~~~ err ~~~",i),r(i)}var i})),TRANSFORM.fillout=((e,t,r)=>new Promise(async function(o,i){try{let l=t;if(await Helper.is_template(t)){let o=/\{\{(.*?)\}\}/g,i=t.match(o);if(i)if(r)l=await TRANSFORM._fillout({variable:i[0],data:e,template:null});else for(let t=0;t<i.length;t++){let r=i[t];l=await TRANSFORM._fillout({variable:r,data:e,template:l})}else console.warn("здесь был return пока не вижу зачем он")}o(l)}catch(e){n={_:"error menu",error:e},console.log("~~~ err ~~~",n),i(n)}var n})),TRANSFORM.tokenize=(e=>new Promise(async(t,r)=>{try{let o,i=/\{\{(.+)\}\}/g,n=(e=e.replace(i,"$1")).trim().split(" "),l=null;if(n.length>0&&"#"===n[0][0]){l={name:o=n.shift(),expression:n.join(" ")}}(e=>{t(e)})(l)}catch(e){(e=>{r(e)})({_:"error menu",error:e})}})),TRANSFORM.run=((e,t)=>new Promise(async(r,o)=>{let i=e=>{r(e)};try{let r,n;if("string"==typeof e)if(await Helper.is_template(e)){let o=/\{\{([ ]*#include)[ ]*([^ ]*)\}\}/g;console.log("include_string_re",o.test(e)),o.test(e)?(n=await TRANSFORM.tokenize(e),r=n.expression?await TRANSFORM.fillout(t,"{{"+n.expression+"}}",!0):e):r=await TRANSFORM.fillout(t,e)}else r=e;else if(await Helper.is_array(e))if(await Conditional.is(e))r=await Conditional.run(e,t);else{r=[];for(let o=0;o<e.length;o++){let i=await TRANSFORM.run(e[o],t);i&&r.push(i)}}else if("[object Object]"===Object.prototype.toString.call(e)){r={};let o=/\{\{([ ]*#include)[ ]*(.*)\}\}/,i=Object.keys(e).filter(function(e){return o.test(e)});i.length>0&&(n=await TRANSFORM.tokenize(i[0]),r=n.expression?await TRANSFORM.fillout(e[i[0]],"{{"+n.expression+"}}",!0):e[i[0]]);for(let o in e)if(await Helper.is_template(o))if(n=await TRANSFORM.tokenize(o)){if("#include"===n.name);else if("#let"===n.name){if(await Helper.is_array(e[o])&&2==e[o].length){let i=e[o][0],n=e[o][1],l=TRANSFORM.run(i,t);for(let e in l)TRANSFORM.memory[e]=l[e],t[e]=l[e];r=await TRANSFORM.run(n,t)}}else if("#concat"===n.name)await Helper.is_array(e[o])&&(r=[],e[o].forEach(function(e){let o=TRANSFORM.run(e,t);r=r.concat(o)}),/\{\{(.*?)\}\}/.test(JSON.stringify(r))&&(r=e));else if("#merge"===n.name){if(await Helper.is_array(e[o]))if(r={},e[o].forEach(function(e){let o=TRANSFORM.run(e,t);for(let e in o)r[e]=o[e]}),"object"==typeof t){delete r.$index;for(let e in TRANSFORM.memory)delete r[e]}else{delete String.prototype.$index,delete Number.prototype.$index,delete Function.prototype.$index,delete Array.prototype.$index,delete Boolean.prototype.$index;for(let e in TRANSFORM.memory)delete String.prototype[e],delete Number.prototype[e],delete Function.prototype[e],delete Array.prototype[e],delete Boolean.prototype[e]}}else if("#each"===n.name){let i=await TRANSFORM.fillout(t,"{{"+n.expression+"}}",!0);if(i&&await Helper.is_array(i)){r=[];for(let t=0;t<i.length;t++){if("object"==typeof i[t]){i[t].$index=t;for(let e in TRANSFORM.memory)i[t][e]=TRANSFORM.memory[e]}else{String.prototype.$index=t,Number.prototype.$index=t,Function.prototype.$index=t,Array.prototype.$index=t,Boolean.prototype.$index=t;for(let e in TRANSFORM.memory)String.prototype[e]=TRANSFORM.memory[e],Number.prototype[e]=TRANSFORM.memory[e],Function.prototype[e]=TRANSFORM.memory[e],Array.prototype[e]=TRANSFORM.memory[e],Boolean.prototype[e]=TRANSFORM.memory[e]}let n=await TRANSFORM.run(e[o],i[t]);if("object"==typeof i[t]){delete i[t].$index;for(let e in TRANSFORM.memory)delete i[t][e]}else{delete String.prototype.$index,delete Number.prototype.$index,delete Function.prototype.$index,delete Array.prototype.$index,delete Boolean.prototype.$index;for(let e in TRANSFORM.memory)delete String.prototype[e],delete Number.prototype[e],delete Function.prototype[e],delete Array.prototype[e],delete Boolean.prototype[e]}n&&r.push(n)}}else r=e}}else{let i=await TRANSFORM.fillout(t,o),n=await TRANSFORM.fillout(t,e[o]);void 0!==i&&void 0!==n&&(r[i]=n)}else if("string"==typeof e[o])if((n=await TRANSFORM.tokenize(e[o]))&&"#?"===n.name){let e=await TRANSFORM.fillout(t,"{{"+n.expression+"}}");e!=="{{"+n.expression+"}}"&&e&&(r[o]=e)}else{let i=await TRANSFORM.run(e[o],t);void 0!==i&&(r[o]=i)}else{let i=await TRANSFORM.run(e[o],t);void 0!==i&&(r[o]=i)}}else i(e);i(r)}catch(e){(e=>{console.log("~~~ err ~~~",e),o(e)})({_:"error menu",error:e})}}));let Conditional={};Conditional.is=(e=>new Promise(async(t,r)=>{let o=e=>{t(e)};try{if(await Helper.is_array(e))if(0===e.length)o(!1);else{let t=!0;for(let r=0;r<e.length;r++){let r=e[0];if("object"!=typeof r){t=!1;break}if(1!==Object.keys(r).length){t=!1;break}}if(t){let t,r=e[0];for(let e in r)(t=await TRANSFORM.tokenize(e))&&t.name&&t.expression&&0!==t.expression.length?"#if"!==t.name.toLowerCase()&&o(!1):o(!1);if(1===e.length)o(!0);else{let r=!0;for(let o=1;o<e.length-1;o++){let i=e[o];for(let e in i)if("#elseif"!==(t=TRANSFORM.tokenize(e)).name.toLowerCase()){r=!1;break}}if(r){let r=e[e.length-1],i=!0;for(let e in r)t=TRANSFORM.tokenize(e),-1===["#else","#elseif"].indexOf(t.name.toLowerCase())&&(i=!1);o(i)}else o(!0)}}else o(!1)}else o(!1)}catch(e){(e=>{console.log("~~~ err ~~~",e),r(e)})({_:"is",error:e})}})),SELECT.select=((e,t,r)=>new Promise(async function(o,i){try{isEmpty(t)||(e.filter=t),isEmpty(r)||(e.serialized=r);let n={};n=isEmpty(e.this)?e:e.this;try{r&&(n=JSON.parse(e))}catch(e){}t?(SELECT.$selected=[],await SELECT.exec(n,"",t)):SELECT.$selected=null,n&&(Helper.is_array(n)||"object"==typeof n)?(SELECT.$progress||(Helper.is_array(n)?(SELECT.$val=[],SELECT.$selected_root=[]):(SELECT.$val={},SELECT.$selected_root={})),Object.keys(n).forEach(function(e){SELECT.$val[e]=n[e],SELECT.$selected_root[e]=n[e]})):(SELECT.$val=n,SELECT.$selected_root=n),SELECT.$progress=!0,(e=>{o(e)})(SELECT)}catch(e){i({_:"error menu",error:e})}})),SELECT.transformWith=((e,t,r)=>new Promise(async function(o,i){try{isEmpty(SELECT.$progress)&&(SELECT.$progress=null),isEmpty(SELECT.$parsed)&&(SELECT.$parsed=[]),isEmpty(r)||(SELECT=Object.assign(SELECT,r),console.warn("нужно проверить работоспособность при совпадении двух свойств",SELECT));let n={};n=isEmpty(e.template)?e:e.template,isEmpty(t)&&(e.serialized=t);try{t&&(n=JSON.parse(e))}catch(e){}SELECT.$template_root=n,String.prototype.$root=SELECT.$selected_root,Number.prototype.$root=SELECT.$selected_root,Function.prototype.$root=SELECT.$selected_root,Array.prototype.$root=SELECT.$selected_root,Boolean.prototype.$root=SELECT.$selected_root;SELECT.$selected_root;if(SELECT.$selected&&SELECT.$selected.length>0){SELECT.$selected.sort(function(e,t){return t.path.length-e.path.length});SELECT.$selected.sort(function(e,t){return e.index-t.index})}else{let e=await TRANSFORM.run(n,SELECT.$selected_root);SELECT.$selected_root=await Helper.resolve(SELECT.$selected_root,"",e),(e=>{o(e)})({_:"transformWith",parsedObject:e,SELECT:SELECT})}}catch(e){i({_:"error menu",error:e})}}));let _stringify=JSON.stringify;JSON.stringify=function(e,t,r){return-1!==["number","string","boolean"].indexOf(typeof e)?_stringify(e,t,r):_stringify(e,t||function(e,t){if(!(SELECT.$injected&&SELECT.$injected.length>0&&-1!==SELECT.$injected.indexOf(e)||"$root"===e||"$index"===e||e in TRANSFORM.memory))return"function"==typeof t?"("+t.toString()+")":t},r)};export default(e={_:"json"})=>new Promise(async(e,t)=>{object.class=class{constructor(e){this.select=this.select.bind(this),this.transformWith=this.transformWith.bind(this),this.root=this.root.bind(this)}root(e){return SELECT.root(e)}transformWith(e,t,r){return SELECT.transformWith(e,t,r)}select(e={_:"select",this:void 0,filter:!1,serialized:!1},t,r){return SELECT.select(e,t,r)}get self(){return object}},(t=>{e(t)})(object)});