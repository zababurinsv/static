let TRANSFORM={};TRANSFORM._fillout=(e=>new Promise(async function(t,o){let r=e=>{t(e)};try{let t=/\{\{(.*?)\}\}/g,i=/^\{\{((?!\}\}).)*\}\}$/,n=e.variable,a=e.data,R=e.template,p=n.replace(t,"$1");if(a){let e;-1===["number","string","array","boolean","function"].indexOf(typeof a)&&(a.$root=root);let t=/function\([ ]*\)[ ]*\{(.*)\}[ ]*$/g.exec(p),o=(e=t?Function("with(this) {"+t[1]+"}").bind(a):/\breturn [^;]+;?[ ]*$/.test(p)&&/return[^}]*$/.test(p)?Function("with(this) {"+p+"}").bind(a):Function("with(this) {return ("+p+")}").bind(a))();if(delete a.$root,o&&(o=o.valueOf()),void 0===o)r(R);else if(o)R?i.test(R)?r(o):r(R.replace(n,o)):r(o);else{if(!R)return"";i.test(R)?r(o):r(R.replace(n,""))}}else r(R)}catch(e){l={_:"_fillout",error:e},console.log("~~~ err ~~~",l),o(l)}var l})),TRANSFORM.fillout=((e,t,o)=>new Promise(async function(r,l){try{colorlog(">~~~~~~~~~ TRANSFORM.fillout ~~~in~~~~~~<","#9beb34",e,t,o);let n=t;if(await Helper.is_template(t)){let r=/\{\{(.*?)\}\}/g,l=t.match(r);if(l)if(colorlog(">~~~~~~~~~ TRANSFORM.fillout ~~~variables~~1~~~~<","#9beb34",l),o)n=await TRANSFORM._fillout({variable:l[0],data:e,template:null}),colorlog(">~~~~~~~~~ TRANSFORM.fillout ~~~_fillout~~~~~~<","#9beb34",n);else{for(let t=0;t<l.length;t++){let o=l[t];n=await TRANSFORM._fillout({variable:o,data:e,template:n})}colorlog(">~~~~~~~~~ TRANSFORM.fillout ~~~variables_fillout~~2~~~~<","#9beb34",n)}else console.warn("здесь был return пока не вижу зачем он")}colorlog(">~~~~~~~~~ TRANSFORM.fillout ~~~out~~~~<","red",n),r(n)}catch(e){i={_:"error menu",error:e},console.log("~~~ err ~~~",i),l(i)}var i})),TRANSFORM.tokenize=(e=>new Promise(async(t,o)=>{try{let r,l=/\{\{(.+)\}\}/g,i=(e=e.replace(l,"$1")).trim().split(" "),n=null;if(i.length>0&&"#"===i[0][0]){n={name:r=i.shift(),expression:i.join(" ")}}(e=>{t(e)})(n)}catch(e){(e=>{o(e)})({_:"error menu",error:e})}})),TRANSFORM.run=((e,t)=>new Promise(async(o,r)=>{let l=e=>{o(e)};try{let o,i;if(colorlog(">~~~~~~~~~ TRANSFORM.run ~~~template~~~~~~<","#c203fc",e),"string"==typeof e)if(await Helper.is_template(e)){let r=/\{\{([ ]*#include)[ ]*([^ ]*)\}\}/g;colorlog(">~~~~~~~~~ TRANSFORM.run ~~~include_string_re~~~~~~<","#c203fc",r),r.test(e)?(i=await TRANSFORM.tokenize(e),o=i.expression?await TRANSFORM.fillout(t,"{{"+i.expression+"}}",!0):e):o=await TRANSFORM.fillout(t,e)}else o=e;else if(await Helper.is_array(e))if(await Conditional.is(e))o=await Conditional.run(e,t);else{o=[];for(let r=0;r<e.length;r++){let l=await TRANSFORM.run(e[r],t);l&&o.push(l)}}else if("[object Object]"===Object.prototype.toString.call(e)){o={};let r=/\{\{([ ]*#include)[ ]*(.*)\}\}/,l=Object.keys(e).filter(function(e){return r.test(e)});l.length>0&&(i=await TRANSFORM.tokenize(l[0]),o=i.expression?await TRANSFORM.fillout(e[l[0]],"{{"+i.expression+"}}",!0):e[l[0]]);for(let r in e)if(await Helper.is_template(r))if(i=await TRANSFORM.tokenize(r)){if("#include"===i.name);else if("#let"===i.name){if(await Helper.is_array(e[r])&&2==e[r].length){let l=e[r][0],i=e[r][1],n=TRANSFORM.run(l,t);for(let e in n)TRANSFORM.memory[e]=n[e],t[e]=n[e];o=await TRANSFORM.run(i,t)}}else if("#concat"===i.name)await Helper.is_array(e[r])&&(o=[],e[r].forEach(function(e){let r=TRANSFORM.run(e,t);o=o.concat(r)}),/\{\{(.*?)\}\}/.test(JSON.stringify(o))&&(o=e));else if("#merge"===i.name){if(await Helper.is_array(e[r]))if(o={},e[r].forEach(function(e){let r=TRANSFORM.run(e,t);for(let e in r)o[e]=r[e]}),"object"==typeof t){delete o.$index;for(let e in TRANSFORM.memory)delete o[e]}else{delete String.prototype.$index,delete Number.prototype.$index,delete Function.prototype.$index,delete Array.prototype.$index,delete Boolean.prototype.$index;for(let e in TRANSFORM.memory)delete String.prototype[e],delete Number.prototype[e],delete Function.prototype[e],delete Array.prototype[e],delete Boolean.prototype[e]}}else if("#each"===i.name){colorlog(">~~~~~~~~~ TRANSFORM.run ~~~#each~~~~~~<","#c203fc",t,"{{"+i.expression+"}}",!0);let l=await TRANSFORM.fillout(t,"{{"+i.expression+"}}",!0);if(l&&await Helper.is_array(l)){o=[];for(let t=0;t<l.length;t++){if(colorlog(">~~~~~~~~~ TRANSFORM.run ~~~#each~~~~~~<","#c203fc",l[t]),"object"==typeof l[t]){l[t].$index=t;for(let e in TRANSFORM.memory)l[t][e]=TRANSFORM.memory[e]}else{colorlog(">~~~~~~~~~ TRANSFORM.run ~~~#memory~~~~~~<","#c203fc",TRANSFORM.memory),String.prototype.$index=t,Number.prototype.$index=t,Function.prototype.$index=t,Array.prototype.$index=t,Boolean.prototype.$index=t;for(let e in TRANSFORM.memory)String.prototype[e]=TRANSFORM.memory[e],Number.prototype[e]=TRANSFORM.memory[e],Function.prototype[e]=TRANSFORM.memory[e],Array.prototype[e]=TRANSFORM.memory[e],Boolean.prototype[e]=TRANSFORM.memory[e]}colorlog(">~~~~~~~~~ TRANSFORM.run ~~~#memory~~~~~~<","#c203fc",e[r],l[t]);let i=await TRANSFORM.run(e[r],l[t]);if("object"==typeof l[t]){delete l[t].$index;for(let e in TRANSFORM.memory)delete l[t][e]}else{colorlog(">~~~~~~~~~ TRANSFORM.run ~~~#delete~~~~~~<","#c203fc",e[r],l[t]),delete String.prototype.$index,delete Number.prototype.$index,delete Function.prototype.$index,delete Array.prototype.$index,delete Boolean.prototype.$index;for(let e in TRANSFORM.memory)delete String.prototype[e],delete Number.prototype[e],delete Function.prototype[e],delete Array.prototype[e],delete Boolean.prototype[e]}i&&(o.push(i),colorlog(">~~~~~~~~~ TRANSFORM.run ~~~#result~~~~~~<","#c203fc",i,o))}}else colorlog(">~~~~~~~~~ TRANSFORM.run ~~~#result = template~~~~~~<","#c203fc",e),o=e}}else{colorlog(">~~~~~~~~~ TRANSFORM.run ~~~TRANSFORM.fillout~~~~~~<","#c203fc",t,r),colorlog(">~~~~~~~~~ TRANSFORM.run ~~~TRANSFORM.fillout~~~~~~<","#c203fc",t,e[r]);let l=await TRANSFORM.fillout(t,r),i=await TRANSFORM.fillout(t,e[r]);void 0!==l&&void 0!==i&&(o[l]=i,colorlog(">~~~~~~~~~ TRANSFORM.run ~~~ result[k] = v;~~~~~~<","#c203fc",o,o[l],l,i))}else if("string"==typeof e[r])if((i=await TRANSFORM.tokenize(e[r]))&&"#?"===i.name){let e=await TRANSFORM.fillout(t,"{{"+i.expression+"}}");e!=="{{"+i.expression+"}}"&&e&&(o[r]=e)}else{let l=await TRANSFORM.run(e[r],t);void 0!==l&&(o[r]=l)}else{let l=await TRANSFORM.run(e[r],t);void 0!==l&&(o[r]=l)}}else colorlog(">~~~~~~~~~ TRANSFORM.run ~~~out~~~template~~~<","red",e),l(e);l(o)}catch(e){(e=>{console.log("~~~ err ~~~",e),r(e)})({_:"error menu",error:e})}}));export default TRANSFORM;