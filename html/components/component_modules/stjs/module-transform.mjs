import Helper from"/static/html/components/component_modules/stjs/module-helper.mjs";import colorlog from"/static/html/components/component_modules/colorLog/colorLog.mjs";import Conditional from"/static/html/components/component_modules/stjs/module-conditional.mjs";let TRANSFORM={},root={};TRANSFORM._fillout=(e=>new Promise(async function(t,o){let r=e=>{t(e)};try{colorlog(!0,"TRANSFORM._fillout","3",e,"TRANSFORM");let t=/\{\{(.*?)\}\}/g,l=/^\{\{((?!\}\}).)*\}\}$/,n=e.variable,a=e.data,p=e.template,s=n.replace(t,"$1");if(a){let e;-1===["number","string","array","boolean","function"].indexOf(typeof a)&&(a.$root=root);let t=/function\([ ]*\)[ ]*\{(.*)\}[ ]*$/g.exec(s),o=(e=t?Function("with(this) {"+t[1]+"}").bind(a):/\breturn [^;]+;?[ ]*$/.test(s)&&/return[^}]*$/.test(s)?Function("with(this) {"+s+"}").bind(a):Function("with(this) {return ("+s+")}").bind(a))();if(delete a.$root,o&&(o=o.valueOf()),void 0===o)r(p);else if(o)p?l.test(p)?r(o):r(p.replace(n,o)):r(o);else{if(!p)return"";l.test(p)?r(o):r(p.replace(n,""))}}else r(p)}catch(e){i={_:"_fillout",error:e},console.log("~~~ err ~~~",i),o(i)}var i})),TRANSFORM.fillout=((e,t,o)=>new Promise(async function(r,i){try{let n=t;if(await Helper.is_template(t)){let r=/\{\{(.*?)\}\}/g,i=t.match(r);if(i)if(o)n=await TRANSFORM._fillout({variable:i[0],data:e,template:null});else for(let t=0;t<i.length;t++){let o=i[t];n=await TRANSFORM._fillout({variable:o,data:e,template:n})}else console.warn("здесь был return пока не вижу зачем он")}r(n)}catch(e){l={_:"error menu",error:e},console.log("~~~ err ~~~",l),i(l)}var l})),TRANSFORM.tokenize=(e=>new Promise(async(t,o)=>{try{let r,i=/\{\{(.+)\}\}/g,l=(e=e.replace(i,"$1")).trim().split(" "),n=null;if(l.length>0&&"#"===l[0][0]){n={name:r=l.shift(),expression:l.join(" ")}}(e=>{t(e)})(n)}catch(e){(e=>{o(e)})({_:"error menu",error:e})}})),TRANSFORM.run=((e,t,o)=>new Promise(async(r,i)=>{let l=e=>{r(e)};root=o;try{let o,r;if("string"==typeof e)if(await Helper.is_template(e)){/\{\{([ ]*#include)[ ]*([^ ]*)\}\}/g.test(e)?(r=await TRANSFORM.tokenize(e),o=r.expression?await TRANSFORM.fillout(t,"{{"+r.expression+"}}",!0):e):o=await TRANSFORM.fillout(t,e)}else o=e;else if(await Helper.is_array(e))if(await Conditional.is(e))o=await Conditional.run(e,t);else{o=[];for(let r=0;r<e.length;r++){let i=await TRANSFORM.run(e[r],t);i&&o.push(i)}}else if("[object Object]"===Object.prototype.toString.call(e)){o={};let i=/\{\{([ ]*#include)[ ]*(.*)\}\}/,l=Object.keys(e).filter(function(e){return i.test(e)});l.length>0&&(r=await TRANSFORM.tokenize(l[0]),o=r.expression?await TRANSFORM.fillout(e[l[0]],"{{"+r.expression+"}}",!0):e[l[0]]);for(let i in e)if(await Helper.is_template(i))if(r=await TRANSFORM.tokenize(i)){if("#include"===r.name);else if("#let"===r.name){if(await Helper.is_array(e[i])&&2==e[i].length){let r=e[i][0],l=e[i][1],n=TRANSFORM.run(r,t);for(let e in n)TRANSFORM.memory[e]=n[e],t[e]=n[e];o=await TRANSFORM.run(l,t)}}else if("#concat"===r.name)await Helper.is_array(e[i])&&(o=[],e[i].forEach(function(e){let r=TRANSFORM.run(e,t);o=o.concat(r)}),/\{\{(.*?)\}\}/.test(JSON.stringify(o))&&(o=e));else if("#merge"===r.name){if(await Helper.is_array(e[i]))if(o={},e[i].forEach(function(e){let r=TRANSFORM.run(e,t);for(let e in r)o[e]=r[e]}),"object"==typeof t){delete o.$index;for(let e in TRANSFORM.memory)delete o[e]}else{delete String.prototype.$index,delete Number.prototype.$index,delete Function.prototype.$index,delete Array.prototype.$index,delete Boolean.prototype.$index;for(let e in TRANSFORM.memory)delete String.prototype[e],delete Number.prototype[e],delete Function.prototype[e],delete Array.prototype[e],delete Boolean.prototype[e]}}else if("#each"===r.name){let l=await TRANSFORM.fillout(t,"{{"+r.expression+"}}",!0);if(l&&await Helper.is_array(l)){o=[];for(let t=0;t<l.length;t++){if("object"==typeof l[t]){l[t].$index=t;for(let e in TRANSFORM.memory)l[t][e]=TRANSFORM.memory[e]}else{String.prototype.$index=t,Number.prototype.$index=t,Function.prototype.$index=t,Array.prototype.$index=t,Boolean.prototype.$index=t;for(let e in TRANSFORM.memory)String.prototype[e]=TRANSFORM.memory[e],Number.prototype[e]=TRANSFORM.memory[e],Function.prototype[e]=TRANSFORM.memory[e],Array.prototype[e]=TRANSFORM.memory[e],Boolean.prototype[e]=TRANSFORM.memory[e]}let r=await TRANSFORM.run(e[i],l[t]);if("object"==typeof l[t]){delete l[t].$index;for(let e in TRANSFORM.memory)delete l[t][e]}else{delete String.prototype.$index,delete Number.prototype.$index,delete Function.prototype.$index,delete Array.prototype.$index,delete Boolean.prototype.$index;for(let e in TRANSFORM.memory)delete String.prototype[e],delete Number.prototype[e],delete Function.prototype[e],delete Array.prototype[e],delete Boolean.prototype[e]}r&&o.push(r)}}else o=e}}else{let r=await TRANSFORM.fillout(t,i),l=await TRANSFORM.fillout(t,e[i]);void 0!==r&&void 0!==l&&(o[r]=l)}else if("string"==typeof e[i])if((r=await TRANSFORM.tokenize(e[i]))&&"#?"===r.name){let e=await TRANSFORM.fillout(t,"{{"+r.expression+"}}");e!=="{{"+r.expression+"}}"&&e&&(o[i]=e)}else{let r=await TRANSFORM.run(e[i],t);void 0!==r&&(o[i]=r)}else{let r=await TRANSFORM.run(e[i],t);void 0!==r&&(o[i]=r)}}else l(e);l(o)}catch(e){(e=>{console.log("~~~ err ~~~",e),i(e)})({_:"error menu",error:e})}}));export default TRANSFORM;