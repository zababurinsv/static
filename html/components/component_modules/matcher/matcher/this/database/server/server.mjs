import conf from"/static/html/components/component_modules/matcher/matcher/this/database/config/index.mjs";import template from"/static/html/components/component_modules/template/template.mjs";import utils from"/static/html/components/component_modules/utils/utils.mjs";function server(t,e,a,o){return new Promise((n,c)=>{bundle.default(t,"export",async function(c,s){function r(t){return new Promise((e,a)=>{let o=new FormData;for(let e in t)o.append(e,t[e]);e(o)})}switch(o){case"GET":console.log("~~~~~~~~~~~~GET~~~~~~~~~~~~~~~~",`${a}${e}`),s.axios.get(`${a}${e}`).then(function(e){(t={}).get_n=[],t.mongo=e.data,t.get_n.push(e.data),n(t)}).catch(function(t){console.log(t)}).finally(function(){});break;case"POST":console.log("~~~~~~~~~~~~POST~~~~~~~~~~~~~~~~",`${a}${e}`);let c=await r(t);fetch(`${a}${e}`,{method:o,body:c}).then(function(t){if(t.ok)return t.json();throw new Error("HTTP error, status = "+t.status)}).then(function(e){(t=[]).get_n=[],t.mongo=e,t.get_n.push(e),n(t)}).catch(function(t){console.assert(!1,"webDav",t,`${a}${e}`)});break;case"PUT":console.log("~~~~~~~~~~~~PUT~~~~~~~~~~~~~~~~",`${a}${e}`);let l=await r(t);fetch(`${a}${e}`,{method:o,body:l}).then(function(t){if(t.ok)return t.json();throw new Error("HTTP error, status = "+t.status)}).then(function(e){(t={}).get_n=[],t.mongo=e,t.get_n.push(e),n(t)}).catch(function(t){console.assert(!1,"mongoDb",t)});break;case"DELETE":console.log("~~~~~~~~~~~~DELETE~~~~~~~~~~~~~~~~",`${a}${e}`),fetch(`${a}${e}`,{method:o,headers:{mode:"no-cors"}}).then(function(t){if(t.ok)return t.json();throw new Error("HTTP error, status = "+t.status)}).then(function(t){n({delete:"ok"})}).catch(function(t){console.error("ошибка в запросе mongo",t),n({mongo:"null"})});break;default:console.warn("необрабатываемый тип запроса",t[props])}})})}export default(t,e,...a)=>new Promise(function(o,n){let c=t=>{o(t)},s=t=>{console.log("~~~ err  ~~~",t),n(t)};switch(e){case"set":(async(t,o,n)=>{try{switch(console.log(`app(${e}[(${t.input})${t[o]}]property)`),t[o]){case"auction":(async(t,e,a)=>{try{t.path||console.assert(!1,'Должно бытьсвойтсво obj["path""]');let e=await server(t.data,t.path,conf.account.web,"POST");c(e)}catch(t){s(t)}})(t,a[0],a[1],a[2],a[3]);break;case"winner":t.path||console.assert(!1,'Должно бытьсвойтсво obj["path""]');let n=await server(t.data,t.path,conf.account.web,"POST");c(n);break;default:s(`new type [(${e})${t[o]}]`)}}catch(t){s(t)}})(t,a[0],a[1],a[2],a[3]);break;case"post":(async(t,o,n)=>{try{switch(console.log(`app(${e}[(${t.input})${t[o]}]property)`),t[o]){case"account":(async(t,e,a)=>{try{c(t)}catch(t){s(t)}})(t,a[0],a[1],a[2],a[3]);break;default:s(`new type [(${e})${t[o]}]`)}}catch(t){s(t)}})(t,a[0],a[1],a[2],a[3]);break;case"get":(async(t,o,n)=>{try{switch(console.log(`app(${e}[(${t.input})${t[o]}]property)`),t[o]){case"auctions":case"winner":case"timer":(async(t,e,a)=>{try{t.path||console.assert(!1,'Должно бытьсвойтсво obj["path""]');let e=await server(null,t.path,conf.account.web,"GET");c(e)}catch(t){s(t)}})(t,a[0],a[1],a[2],a[3]);break;case"nft":(async(t,e,a)=>{try{t.path||console.assert(!1,'Должно бытьсвойтсво obj["path""]');let e=await server(t.data,t.path,conf.account.web,"POST");c(e)}catch(t){s(t)}})(t,a[0],a[1],a[2],a[3]);break;default:s(`new type [(${e})${t[o]}]`)}}catch(t){s(t)}})(t,a[0],a[1],a[2],a[3]);break;case"update":(async(t,a,o)=>{try{switch(console.log(`app(${e}[(${t.input})${t[a]}]property)`),t[a]){case"account":t.path||console.assert(!1,'Должно бытьсвойтсво obj["path""]');let o=await server(t.data,t.path,conf.account.web,"PUT");c(o);break;default:s(`new type [(${e})${t[a]}]`)}}catch(t){s(t)}})(t,a[0],a[1],a[2],a[3]);break;case"checked":(async(t,a,o)=>{try{switch(console.log(`app(${e}[(${t.input})${t[a]}]property)`),t[a]){case"account":t.path||console.assert(!1,'Должно бытьсвойтсво obj["path""]');let o=await server(t.data,t.path,conf.account.web,"POST");c(o);break;default:s(`new type [(${e})${t[a]}]`)}}catch(t){s(t)}})(t,a[0],a[1],a[2],a[3]);break;case"delete":(async(t,o,n)=>{try{switch(console.log(`app(${e}[(${t.input})${t[o]}]property)`),t[o]){case"item":t.path||console.assert(!1,'Должно быть свойтсво obj["path""]');let n=await server(null,t.path,conf.account.web,"DELETE");c(n);break;case"winner":(async(t,e,a)=>{try{t.path||console.assert(!1,'Должно бытьсвойтсво obj["path""]');let e=await server(null,t.path,conf.account.web,"DELETE");c(e)}catch(t){s(t)}})(t,a[0],a[1],a[2],a[3]);break;default:s(`new type [(${e})${t[o]}]`)}}catch(t){s(t)}})(t,a[0],a[1],a[2],a[3]);break;default:s(`new function ${e}`)}});