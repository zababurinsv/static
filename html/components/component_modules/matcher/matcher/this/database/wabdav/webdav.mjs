import conf from"/static/html/components/component_modules/matcher/matcher/this/database/config/index.mjs";import template from"/static/html/components/component_modules/template/template.mjs";import utils from"/static/html/components/component_modules/utils/utils.mjs";function webdav(t,e,a,o){return new Promise((n,s)=>{bundle.default(t,"export",async function(s,c){function r(t){return new Promise((e,a)=>{let o=new FormData;for(let e in t)o.append(e,t[e]);e(o)})}switch(o){case"GET":console.log("~~~~~~~~~~~~GET~~~~~~~~~~~~~~~~",`${a}${e}`),c.axios.get(`${a}${e}`).then(function(e){(t={}).get_n=[],t.mongo=e.data,t.get_n.push(e.data),n(t)}).catch(function(t){console.log(t)}).finally(function(){n({mongo:"null"})});break;case"POST":console.log("~~~~~~~~~~~~POST~~~~~~~~~~~~~~~~",`${a}${e}`);let s=await r(t);fetch(`${a}${e}`,{method:o,headers:{mode:"no-cors"},body:s}).then(function(t){if(t.ok)return t.json();throw new Error("HTTP error, status = "+t.status)}).then(function(e){(t=[]).get_n=[],t.mongo=e,t.get_n.push(e),n(t)}).catch(function(t){console.warn("webDav",t,`${a}${e}`),n({mongo:"null"})});break;case"PUT":console.log("~~~~~~~~~~~~PUT~~~~~~~~~~~~~~~~",`${a}${e}`);let p=await r(t);fetch(`${a}${e}`,{method:o,headers:{mode:"no-cors"},body:p}).then(function(t){if(t.ok)return t.json();throw new Error("HTTP error, status = "+t.status)}).then(function(e){t.get_n=[],t.mongo=e,t.get_n.push(e),n(t)}).catch(function(t){console.warn("webDav",t,`${a}${e}`),n({mongo:"null"})});break;case"DELETE":console.log("~~~~~~~~~~~~DELETE~~~~~~~~~~~~~~~~",`${a}${e}`),fetch(`${a}${e}`,{method:o,headers:{mode:"no-cors"}}).then(function(t){if(t.ok)return t.json();throw new Error("HTTP error, status = "+t.status)}).then(function(t){n({delete:"ok"})}).catch(function(t){console.warn("webDav",t,`${a}${e}`),n({mongo:"null"})});break;default:console.warn("необрабатываемый тип запроса",t[props])}})})}export default(t,e,...a)=>new Promise(function(o,n){let s=t=>{o(t)},c=t=>{console.log("~~~ err  ~~~",t),n(t)};switch(e){case"set":(async(t,o,n)=>{try{switch(console.log(`app(${e}[(${t.input})${t[o]}]property)`),t[o]){case"request":(async(t,e,a)=>{try{s(await webdav(t.data,"/setMail",conf.store.web,"POST"))}catch(t){c(t)}})(t,a[0],a[1],a[2],a[3]);break;case"components":(async(t,e,a)=>{try{t.path||console.assert(!1,'Должно бытьсвойтсво obj["path""]');let e=await webdav(t.data,t.path,conf.store.web,"POST"),o=[];o.push(e.mongo.data);let n=await template({input:"wabdav",data:o,type:"moderator"},"create","type",a);s(n)}catch(t){c(t)}})(t,a[0],a[1],a[2],a[3]);break;case"about":t.path||console.assert(!1,'Должно бытьсвойтсво obj["path""]');let n=await webdav(t.data,t.path,conf.store.web,"POST"),r=await template({input:"wabdav",data:n.mongo,type:"about"},"create","type");s(r);break;default:c(`new type [(${e})${t[o]}]`)}}catch(t){c(t)}})(t,a[0],a[1],a[2],a[3]);break;case"post":bundle.default(t,"export",async function(o,n){(async(t,o,r)=>{try{switch(console.log(`app(${e}[(${t.input})${t[o]}]property)`),t[o]){case"list":(async(t,e,a)=>{try{t.path||console.assert(!1,'Должно бытьсвойтсво obj["path""]');let e=await webdav(t.data,t.path,conf.store.web,"POST"),a=[];if(n.isEmpty(e.mongo));else for(let t=0;t<e.mongo.length;t++){let o=await webdav({type:"moderator",basename:e.mongo[t].basename,filename:e.mongo[t].filename},"/file",conf.store.web,"POST");a.push(o.mongo)}let o=await template({input:"wabdav",data:a,type:"moderator"},"create","type");s(o)}catch(t){c(t)}})(t,a[0],a[1],a[2],a[3]);break;default:c(`new type [(${e})${t[o]}]`)}}catch(t){c(t)}})(t,a[0],a[1],a[2],a[3])});break;case"get":(async(t,o,n)=>{try{switch(console.log(`app(${e}[(${t.input})${t[o]}]property)`),t[o]){case"components":(async(t,e,a)=>{try{t.path||console.assert(!1,'Должно бытьсвойтсво obj["path""]');let e=await webdav(t.data,t.path,conf.store.web,"GET"),a=await template({input:"wabdav",data:e.mongo,type:"moderator"},"create","type");s(a)}catch(t){c(t)}})(t,a[0],a[1],a[2],a[3]);break;case"about":(async(t,e,a)=>{try{t.path||console.assert(!1,'Должно бытьсвойтсво obj["path""]');let e=await webdav(t.data,t.path,conf.store.web,"GET"),a=await template({input:"wabdav",data:e.mongo,type:"about"},"create","type");s(a)}catch(t){c(t)}})(t,a[0],a[1],a[2],a[3]);break;case"aboutString":(async(t,e,a)=>{try{t.path||console.assert(!1,'Должно бытьсвойтсво obj["path""]');let e=await webdav(t.data,t.path,conf.store.web,"GET"),a=await utils({input:"template",data:e.mongo,type:"string2html"},"convert","type");s(a)}catch(t){c(t)}})(t,a[0],a[1],a[2],a[3]);break;default:c(`new type [(${e})${t[o]}]`)}}catch(t){c(t)}})(t,a[0],a[1],a[2],a[3]);break;case"delete":(async(t,a,o)=>{try{switch(console.log(`app(${e}[(${t.input})${t[a]}]property)`),t[a]){case"moderator":t.path||console.assert(!1,'Должно бытьсвойтсво obj["path""]');let o=await webdav(t.data,t.path,conf.store.web,"DELETE");s(o);break;default:c(`new type [(${e})${t[a]}]`)}}catch(t){c(t)}})(t,a[0],a[1],a[2],a[3]);break;case"update":(async(t,a,o)=>{try{switch(console.log(`app(${e}[(${t.input})${t[a]}]property)`),t[a]){case"components":t.path||console.assert(!1,'Должно бытьсвойтсво obj["path""]');let o=await webdav(t.data,t.path,conf.store.web,"PUT");s(o);break;default:c(`new type [(${e})${t[a]}]`)}}catch(t){c(t)}})(t,a[0],a[1],a[2],a[3]);break;default:c(`new function ${e}`)}});