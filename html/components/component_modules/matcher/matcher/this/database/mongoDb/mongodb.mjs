import conf from"/static/html/components/component_modules/matcher/matcher/this/database/config/index.mjs";let server="now-0.6";function colorLog(e,o,...t){switch(o=o||"black"){case"success":o="Green";break;case"info":o="DodgerBlue";break;case"error":o="Red";break;case"warning":o="Orange"}console.log("%c"+e,"color:"+o,...t)}function blobToDataURL(e,o){if("string"==typeof e)o(e);else{var t=new FileReader;t.onload=function(e){o(e.target.result)},t.readAsDataURL(e)}}function setData(e){return new Promise((o,t)=>{let n=new FormData;for(let o in e)n.append(o,e[o]);o(n)})}function request(e,o,t,n){return new Promise(async(a,s)=>{switch(n){case"GET":fetch(`${t}${o}`,{method:n}).then(function(e){if(e.ok)return e.json();throw new Error("HTTP error, status = "+e.status)}).then(function(e){let o={get_n:[]};o.mongo=e,o.get_n.push(e),a(o)}).catch(function(e){let n={get_n:[],mongo:[]};console.error("в запросе произошла ошибка",`${t}${o}`,e),s(n)});break;case"POST":console.log("~~~~~~~~~~POST~~~~~~~~~~~~~~~~~~",`${t}${o}`);let r=await setData(e);fetch(`${t}${o}`,{method:n,body:r}).then(function(e){if(e.ok)return e.json();throw new Error("HTTP error, status = "+e.status)}).then(function(o){e.get_n=[],e.mongo=o,e.get_n.push(o),a(e)}).catch(function(e){console.assert(!1,"mongoDb",e,`${t}${o}`)});break;case"PUT":console.log("~~~~~~~~~~PUT~~~~~~~~~~~~~~~~~~",`${t}${o}`);let c=await setData(e);fetch(`${t}${o}`,{method:n,body:c}).then(function(e){if(e.ok)return e.json();throw new Error("HTTP error, status = "+e.status)}).then(function(o){e.get_n=[],e.mongo=o,e.get_n.push(o),a(e)}).catch(function(e){console.assert(!1,"mongoDb",e)});break;case"DELETE":let i=await setData(e);fetch(`${t}${o}`,{method:n,body:i}).then(function(e){if(e.ok)return e.json();throw new Error("HTTP error, status = "+e.status)}).then(function(e){a({delete:"ok"})}).catch(function(e){console.error("ошибка в запросе mongo",e),a({mongo:"null"})});break;default:console.warn("необрабатываемый тип запроса",e[props])}})}function webdav(e,o,t,n){return new Promise((a,s)=>{bundle.default(e,"export",async function(s,r){switch(n){case"GET":console.log("~~~~~~~~~~~~GET~~~~~~~~~~~~~~~~",`${t}${o}`),r.axios.get(`${t}${o}`).then(function(o){console.log(o),e.get_n=[],e.mongo=o.data,e.get_n.push(o.data),a(e)}).catch(function(e){console.log(e)}).finally(function(){});break;case"POST":console.log("~~~~~~~~~~~~POST~~~~~~~~~~~~~~~~",`${t}${o}`),fetch(`${t}${o}`,{method:n,headers:{Accept:"application/json","Content-Type":"application/json",mode:"no-cors"},body:JSON.stringify(e)}).then(function(e){if(e.ok)return e.json();throw new Error("HTTP error, status = "+e.status)}).then(function(o){e.get_n=[],e.mongo=o,e.get_n.push(o),a(e)}).catch(function(e){console.assert(!1,"mongoDb",e,`${t}${o}`)});break;case"PUT":console.log("~~~~~~~~~~~~PUT~~~~~~~~~~~~~~~~",`${t}${o}`),fetch(`${t}${o}`,{method:n,headers:{Accept:"application/json","Content-Type":"application/json",mode:"no-cors"},body:JSON.stringify(e.data)}).then(function(e){if(e.ok)return e.json();throw new Error("HTTP error, status = "+e.status)}).then(function(o){e.get_n=[],e.mongo=o,e.get_n.push(o),a(e)}).catch(function(e){console.assert(!1,"mongoDb",e)});break;case"DELETE":console.log("~~~~~~~~~~~~DELETE~~~~~~~~~~~~~~~~",`${t}${o}`),fetch(`${t}${o}`,{method:n,headers:{"Content-Type":"application/json",mode:"no-cors"},bodu:e.id}).then(function(e){if(e.ok)return e.json();throw new Error("HTTP error, status = "+e.status)}).then(function(e){a({delete:"ok"})}).catch(function(e){console.error("ошибка в запросе mongo",e),a({mongo:"null"})});break;default:console.warn("необрабатываемый тип запроса",e[props])}})})}function setFile(e){return new Promise((o,t)=>{let n={},a={},s={};"varan-rss"===(s=e.slot?"edit"===e.slot?e.parent:e.slot:e.parent)&&(s="varan-slider-news"),e.set[s].file?blobToDataURL(e.set[s].file,function(t){e.set[s].file=t,n=e.set[s],a={[`${e.set.object}`]:n,id:e.set.id,object:e.set.object};fetch(`${conf[server[0]][server[1]]}${e.set.object}`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",mode:"no-cors"},body:JSON.stringify(a)}).then(function(e){if(e.ok)return e.json()}).then(function(t){colorLog("~~~~~~~~~~~~~<mongo-out>~~~~~~~~~~~~~","green",t),e.mongo=t,e.mongo[s]._id=t._id,o(e)}).catch(function(e){console.assert(!1,"mongoDb",e)})}):(e.set?(n=e.set[s],a={[`${e.set.object}`]:n,id:e.set.id,object:e.set.object}):console.assert(!1,"должен быть obj[set], mongoDB matcher"),colorLog("~~~~~~~<mongo-setFile>~~~~~~~","green",a),fetch(`${conf[server[0]][server[1]]}${a.object}`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",mode:"no-cors"},body:JSON.stringify(a)}).then(function(e){return e.ok?e.json():e}).then(function(t){404===t.status?(colorLog("~~~~~~~~~~~~~<404>~~~~~~~~~~~~~","green",t),e.mongo=[],o(e)):(colorLog("~~~~~~~~~~~~~<mongo-set-out>~~~~~~~~~~~~~","green",t),e.mongo=t,e.mongo[s]._id=t._id,o(e))}).catch(function(e){console.assert(!1,"mongoDb",e)}))})}function delFile(e){return new Promise((o,t)=>{let n={};n=e.delete?`${conf[server[0]][server[1]]}${e.delete.object}/${e.delete.id}`:`${conf[server[0]][server[1]]}${e.delObj.component}/${e.delObj.id}`;fetch(n,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json",mode:"no-cors"}}).then(t=>{o(e)})})}function getFile(e){return new Promise((o,t)=>{let n="";void 0===(n=e.slot?"edit"===e.slot?e.parent:e.slot:e.parent)&&console.assert(!1,"нет слота и родителя"),"varan-rss"===n&&(n="varan-slider-news"),console.log("dddddd",`${conf[server[0]][server[1]]}${n}`);fetch(`${conf[server[0]][server[1]]}${n}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",mode:"no-cors"}}).then(function(e){if(e.ok)return e.json();if(404===e.status)return e;throw new Error("HTTP error, status = "+e.status)}).then(function(t){if(404===t.status)e.mongo=[],o(e);else{colorLog("~~~~~~~~~~~~<mongo-get-out>~~~~~~~~~~~~","green",t);let n={};n=e.slot?"edit"===e.slot?e.parent:e.slot:e.parent,e.mongo=t;for(let o=0;o<e.mongo.length;o++)"varan-slider-news"===e.mongo[o].object||(e.mongo[o][n]._id=e.mongo[o]._id);o(e)}}).catch(function(e){console.assert(!1,"mongoDb",e)})})}function updFile(e){return new Promise(async(o,t)=>{let n={};if(e.update){console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~",e.update.object),console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~",conf[server[0]][server[1]]),console.log("~~~~~~~~~~~~~~~~~~~~~~~~~~~~",e.update.id),n=`${conf[server[0]][server[1]]}${e.update.object}/${e.update.id}`;let t={},a={};"varan-rss"===(a=e.slot?e.slot:e.parent)&&(a="varan-slider-news"),t=e.update?e.update[a]?e.update[a]:e.update:e.upload[a]?e.upload[a]:e.upload;let s={[`${e.update.object}`]:t,object:e.update.object};void 0===t&&console.assert(!1,e),fetch(n,{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json",mode:"no-cors"},body:JSON.stringify(s)}).then(function(e){if(e.ok)return e.json();throw new Error("HTTP error, status = "+e.status)}).then(function(t){colorLog("~~~~~~~~~~~~~~~~~~<mongo-out-update>~~~~~~~~~~~~~~~~~~","green",t),e.mongo=t,e.update=null,o(e)}).catch(function(e){console.assert(!1,"mongoDb",e)})}else console.log("нет объекта update"),o(e)})}function updateClientId(e){return new Promise(async(o,t)=>{colorLog("~~~~~~~~~~<mongo-update>~~~~~~~~~~","green",e.update);let n={};n=`${conf[server[0]][server[1]]}${e.update.object}/local/${e.update._id}`;let a={};a=e.slot?"edit"===e.slot?e.parent:e.slot:e.parent,e.update||console.assert(!1,e),e.update._id||console.assert(!1,"должен быть _id mongo",e);let s={[`${e.update.object}`]:e.update[a],object:e.update.object,id:e.update[a].id};colorLog("~~~~~~~~~~<mongo-update>~~~~~~~~~~","green",s),fetch(n,{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json",mode:"no-cors"},body:JSON.stringify(s)}).then(function(e){if(e.ok)return e.json();throw new Error("HTTP error, status = "+e.status)}).then(function(t){colorLog("~~~~~~~<mongo-update-out-json>~~~~~~~","green",t),e.get_n=[],e.mongo=t,e.get_n.push(t),colorLog("~~~~~~~<mongo-update-out>~~~~~~~","green",e.get_n),o(e)}).catch(function(e){console.assert(!1,"mongoDb",e)})})}server=server.split("-");export default{delFile:e=>(console.log("------\x3e deleteImages mongo"),delFile(e)),setFile:e=>(console.log("------\x3e setImages mongo"),setFile(e)),getFile:e=>(console.log("------\x3e getImages mongo"),getFile(e)),updFile:e=>(console.log("------\x3e updateImages mongo"),updFile(e)),updateClientId:e=>(console.log("------\x3e updateClientId mongo"),updateClientId(e)),create:(e,o,t,...n)=>new Promise(async function(t,n){switch(console.log(`[(mongo)${e[o]}]`),o){case"channel":t(await request(e,"/create-channel",conf.mongo.web,"POST"));break;case"bidChanel":t(await request(e,"/create-channelBid",conf.mongo.web,"POST"));break;case"item":t(await request(e,"/create-item",conf.mongo.web,"POST"));break;case"itemBid":t(await request(e,"/create-itemBid",conf.mongo.web,"POST"));break;case"auth":t(await request(e.data,"/auth",conf.waves.web,"POST"));break;default:console.warn("необрабатываемый тип запроса",e[o])}}),get:(e,o,t,...n)=>new Promise(async function(t,n){switch(e[o]){case"jsonPhoto":t(await webdav(e,"/getList",conf.store.web,"GET"));break;case"feeds":t(await request(e,"/feeds",conf.mongo.web,"GET"));break;case"bids":t(await request(e,"/bids",conf.mongo.web,"GET"));break;case"itemsBid":t(await request(e,"/itemsBid",conf.mongo.web,"GET"));break;case"bidItem":t(await request(e,`/bidItem/${e.id}`,conf.mongo.web,"GET"));break;case"items":t(await request(e,"/items",conf.mongo.web,"GET"));break;case"item":t(await request(e.data,"/item",conf.mongo.web,"POST"));break;case"img":t(await webdav(e,`/img/${e.data}`,conf.store.web,"GET"));break;default:console.warn("необрабатываемый тип запроса",e[o])}}),set:(e,o,t,...n)=>new Promise(async function(t,n){switch(console.log(`${e.input}[(table)${e[o]}]`),e[o]){case"feed":t(await request(e.data,`/update-feed/${e.id}`,conf.mongo.web,"PUT"));break;case"bid":t(await request(e.data,`/update-bid/${e.id}`,conf.mongo.web,"PUT"));break;case"item":t(await request(e.data,`/add-item/${e.id}`,conf.mongo.web,"PUT"));break;case"auth":t(await request(e.data,"/verify",conf.waves.web,"POST"));break;default:console.error("необрабатываемый тип запроса",e[o])}}),update:(e,o,t,...n)=>new Promise(async function(t,n){switch(console.log(`${e.input}[(table)${e[o]}]`),e[o]){case"item":t(await request(e.data,"/update-item",conf.mongo.web,"PUT"));break;case"itemBid":t(await request(e.data,"/update-itemBid",conf.mongo.web,"PUT"));break;case"feed":console.assert(!1,e),t(await request(e,`/update-item/${e.id}`,conf.mongo.web,"PUT"));break;default:console.error("необрабатываемый тип запроса",e[o])}}),delete:(e,o,t,...n)=>new Promise(async function(t,n){switch(console.log(`${e.input}[(table)${e[o]}]`),e[o]){case"item":t(await request(e.id,"/delete-item",conf.mongo.web,"DELETE"));break;case"itemBid":t(await request(e.id,"/delete-itemBid",conf.mongo.web,"DELETE"));break;default:console.error("необрабатываемый тип запроса",e[o])}})};