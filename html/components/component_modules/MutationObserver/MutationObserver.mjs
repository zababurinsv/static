export default(t,e,...o)=>new Promise(function(a,c){let n=t=>{console.log("~~~ err  ~~~",t),c(t)};switch(e){case"set":(async(t,c,r)=>{try{switch(console.log(`app(${e}[(${t.input})${t[c]}]property)`),t[c]){case"nav":(async(t,e,o)=>{try{console.assert(!1,t.target);let e={attributes:!0,childList:!0,characterData:!0},o=t.target;new MutationObserver(function(t){t.forEach(function(t){console.log(t.type),t.type})}).observe(o,e),(t=>{console.log("~~~ out  ~~~"),a(t)})(t)}catch(t){n(t)}})(t,o[0],o[1],o[2],o[3]);break;default:n(`new type ${e}`)}}catch(t){n(t)}})(t,o[0],o[1],o[2],o[3]);break;default:n(`new function ${e}`)}});