const BYTES_PER_UNIT=Uint16Array.BYTES_PER_ELEMENT,BYTES_PER_SAMPLE=Float32Array.BYTES_PER_ELEMENT,MAX_CHANNEL_COUNT=32,RENDER_QUANTUM_FRAMES=128;class HeapAudioBuffer{constructor(t,e,a,n){this._isInitialized=!1,this._module=t,this._length=e,this._maxChannelCount=n?Math.min(n,MAX_CHANNEL_COUNT):a,this._channelCount=a,this._allocateHeap(),this._isInitialized=!0}_allocateHeap(){const t=this._length*BYTES_PER_SAMPLE,e=this._channelCount*t;this._dataPtr=this._module._malloc(e),this._channelData=[];for(let e=0;e<this._channelCount;++e){let a=this._dataPtr+e*t,n=a+t;this._channelData[e]=this._module.HEAPF32.subarray(a>>BYTES_PER_UNIT,n>>BYTES_PER_UNIT)}}adaptChannel(t){t<this._maxChannelCount&&(this._channelCount=t)}get length(){return this._isInitialized?this._length:null}get numberOfChannels(){return this._isInitialized?this._channelCount:null}get maxChannelCount(){return this._isInitialized?this._maxChannelCount:null}getChannelData(t){return t>=this._channelCount?null:void 0===t?this._channelData:this._channelData[t]}getHeapAddress(){return this._dataPtr}free(){this._isInitialized=!1,this._module._free(this._dataPtr),this._module._free(this._pointerArrayPtr),this._channelData=null}}class RingBuffer{constructor(t,e){this._readIndex=0,this._writeIndex=0,this._framesAvailable=0,this._channelCount=e,this._length=t,this._channelData=[];for(let e=0;e<this._channelCount;++e)this._channelData[e]=new Float32Array(t)}get framesAvailable(){return this._framesAvailable}push(t){let e=t[0].length;for(let a=0;a<e;++a){let e=(this._writeIndex+a)%this._length;for(let n=0;n<this._channelCount;++n)this._channelData[n][e]=t[n][a]}this._writeIndex+=e,this._writeIndex>=this._length&&(this._writeIndex=0),this._framesAvailable+=e,this._framesAvailable>this._length&&(this._framesAvailable=this._length)}pull(t){if(0===this._framesAvailable)return;let e=t[0].length;for(let a=0;a<e;++a){let e=(this._readIndex+a)%this._length;for(let n=0;n<this._channelCount;++n)t[n][a]=this._channelData[n][e]}this._readIndex+=e,this._readIndex>=this._length&&(this._readIndex=0),this._framesAvailable-=e,this._framesAvailable<0&&(this._framesAvailable=0)}}export{MAX_CHANNEL_COUNT,RENDER_QUANTUM_FRAMES,HeapAudioBuffer,RingBuffer};