export default(e,t,...c)=>new Promise(function(a,l){let o=e=>{a(e)},s=e=>{console.log("~~~ err router ~~~",e),l(e)};switch(t){case"get":(async(e,a,l)=>{try{switch(console.log(`${t}[(${e.input})${e[a]}]`),e[a]){case"img":(async(e,c,a)=>{try{console.log(`${t}[(${e.input})${e[c]}]`);let a=e.this.shadowRoot.querySelectorAll(".lazy");o(a)}catch(e){s(e)}})(e,c[0],c[1],c[2],c[3]);break;case"culture":(async(e,c,a)=>{try{console.log(`${t}[(${e.input})${e[c]}]`),o(e)}catch(e){s(e)}})(e,c[0],c[1],c[2],c[3]);break;case"lazy":(async(e,c,a)=>{try{console.log(`${t}[(${e.input})${e[c]}]`);let a=e.this.shadowRoot.querySelectorAll(".lazy");o(a),o(e)}catch(e){s(e)}})(e,c[0],c[1],c[2],c[3]);break;default:s(`новая функция ${t}`)}o(e)}catch(e){s(e)}})(e,c[0],c[1],c[2],c[3]);break;case"culture":(async(e,a,l)=>{try{switch(console.log(`${t}[(${e.input})${e[a]}]`),e[a]){case"test":case"culture":(async(e,t,c)=>{try{console.log(`${e.input}[(table)${e[t]}]`),o(e)}catch(e){s(e)}})(e,c[0],c[1],c[2],c[3]);break;default:s(`новая функция ${t}`)}o(e)}catch(e){s(e)}})(e,c[0],c[1],c[2],c[3]);break;default:s(`новая функция ${t}`)}});