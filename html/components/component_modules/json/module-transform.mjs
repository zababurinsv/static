import Helper from"/static/html/components/component_modules/json/module-helper.mjs";import colorlog from"/static/html/components/component_modules/colorLog/colorLog.mjs";import Conditional from"/static/html/components/component_modules/json/module-conditional.mjs";let TRANSFORM={},root={};TRANSFORM.staticProperty={},TRANSFORM._fillout=((e,t=!0)=>new Promise(async function(o,r){TRANSFORM.staticProperty.view=t;let i=e=>{colorlog(TRANSFORM.staticProperty.view,{end:!0,property:"~~~ TRANSFORM._fillout end ~~~"},"3",e,"TRANSFORM._fillout"),o(e)};try{colorlog(t,"~~~ input TRANSFORM._fillout input ~~~ ","3",e,"TRANSFORM._fillout");let o=/\{\{(.*?)\}\}/g,n=/^\{\{((?!\}\}).)*\}\}$/,a=e.variable,p=e.data,R=e.template,s=a.replace(o,"$1");if(p){let e;-1===["number","string","array","boolean","function"].indexOf(typeof p)&&(p.$root=root);let o=/function\([ ]*\)[ ]*\{(.*)\}[ ]*$/g.exec(s);o?e=Function("with(this) {"+o[1]+"}").bind(p):/\breturn [^;]+;?[ ]*$/.test(s)&&/return[^}]*$/.test(s)?e=Function("with(this) {"+s+"}").bind(p):(e=Function("with(this) {return ("+s+")}").bind(p),colorlog(t,{assert:!1,property:"~~~ Устанавливаем this bind(data)~~~ ",func:e},"3",p,"TRANSFORM._fillout"));let r=e();if(delete p.$root,r&&(r=r.valueOf()),void 0===r)i(R);else if(r)R?n.test(R)?i(r):i(R.replace(a,r)):i(r);else{if(!R)return"";n.test(R)?i(r):i(R.replace(a,""))}}else i(R)}catch(e){l={_:"_fillout",error:e},console.log("~~~ err ~~~",l),r(l)}var l})),TRANSFORM.fillout=((e,t,o,r=!0)=>new Promise(async function(i,l){try{colorlog(r,"~~~ input TRANSFORM.fillout input ~~~","2",{data:e,template:t,raw:o,view:r},"TRANSFORM.fillout");let p=t;if(await Helper.is_template(t)){let i=/\{\{(.*?)\}\}/g,l=t.match(i);if(l)if(o)p=await TRANSFORM._fillout({variable:l[0],data:e,template:null},r);else for(let t=0;t<l.length;t++){let o=l[t];p=await TRANSFORM._fillout({variable:o,data:e,template:p},r)}else console.warn("здесь был return пока не вижу зачем он")}a=p,colorlog(TRANSFORM.staticProperty.view,{end:!0,property:"~~~ TRANSFORM.fillout end ~~~"},"2",a,"TRANSFORM.fillout"),i(a)}catch(e){n={_:"error menu",error:e},console.log("~~~ err ~~~",n),l(n)}var n,a})),TRANSFORM.tokenize=((e,t=!0)=>new Promise(async(t,o)=>{try{colorlog(TRANSFORM.staticProperty.view,"~~~ get expression input TRANSFORM.tokenize input ~~~ ","6",{str:e},"TRANSFORM.tokenize");let r,i=/\{\{(.+)\}\}/g,l=(e=e.replace(i,"$1")).trim().split(" "),n=null;if(l.length>0&&"#"===l[0][0]){n={name:r=l.shift(),expression:l.join(" ")}}(e=>{colorlog(TRANSFORM.staticProperty.view,{end:!0,property:"~~~ get expression ~~~"},"6",e,"TRANSFORM.tokenize"),t(e)})(n)}catch(e){(e=>{o(e)})({_:"error menu",error:e})}})),TRANSFORM.run=((e,t,o=!0)=>new Promise(async(r,i)=>{try{let l,n;if(colorlog(TRANSFORM.staticProperty.view,"~~~ input TRANSFORM.run input ~~~ ","1",{template:e,data:t},"TRANSFORM.run"),"string"==typeof e)if(await Helper.is_template(e)){l=/\{\{([ ]*#include)[ ]*([^ ]*)\}\}/g.test(e)?(n=await TRANSFORM.tokenize(e)).expression?await TRANSFORM.fillout(t,"{{"+n.expression+"}}",!0,o):e:await TRANSFORM.fillout(t,e,!1,o)}else l=e;else if(await Helper.is_array(e))if(await Conditional.is(e,o))colorlog(TRANSFORM.staticProperty.view,"~~~ input Conditional.run(template, data) input ~~~ ","4",{template:e,data:t},"Conditional.run"),l=await Conditional.run(e,t,o),colorlog(TRANSFORM.staticProperty.view,{end:!0,property:"~~~ input Conditional.run(template, data) input ~~~ "},"4",{result:l},"Conditional.run");else{l=[];for(let o=0;o<e.length;o++){let r=await TRANSFORM.run(e[o],t,TRANSFORM.staticProperty.view);r&&l.push(r)}}else if("[object Object]"===Object.prototype.toString.call(e)){l={};let r=/\{\{([ ]*#include)[ ]*(.*)\}\}/,i=Object.keys(e).filter(function(e){return r.test(e)});i.length>0&&(l=(n=await TRANSFORM.tokenize(i[0])).expression?await TRANSFORM.fillout(e[i[0]],"{{"+n.expression+"}}",!0,o):e[i[0]]);for(let r in e)if(colorlog(o,{end:!1,property:{key:r,path:"/json/module-transform.mjs"},assert:!1},"10",{template:e},"for (let key in template)"),await Helper.is_template(r))if(n=await TRANSFORM.tokenize(r)){if("#include"===n.name);else if("#let"===n.name){if(await Helper.is_array(e[r])&&2==e[r].length){let o=e[r][0],i=e[r][1],n=await TRANSFORM.run(o,t,TRANSFORM.staticProperty.view);for(let e in n)TRANSFORM.memory[e]=n[e],t[e]=n[e];l=await TRANSFORM.run(i,t,TRANSFORM.staticProperty.view)}}else if("#concat"===n.name){if(await Helper.is_array(e[r])){l=[],colorlog(o,{assert:!1,key:r,message:"~~~~~~~~~~~~что то объединяем",path:"/json/module-transform.mjs"},"7",e,"#concat");for(let o=0;o<e[r].length;o++){let i=await TRANSFORM.run(e[r][o],t,TRANSFORM.staticProperty.view);l=l.concat(i)}/\{\{(.*?)\}\}/.test(JSON.stringify(l))&&(l=e)}}else if("#merge"===n.name){if(await Helper.is_array(e[r])){l={};for(let o=0;o<e[r].length;o++){let i=await TRANSFORM.run(e[r][o],t,TRANSFORM.staticProperty.view);for(let e in i)l[e]=i[e]}if("object"==typeof t){delete l.$index;for(let e in TRANSFORM.memory)delete l[e]}else{delete String.prototype.$index,delete Number.prototype.$index,delete Function.prototype.$index,delete Array.prototype.$index,delete Boolean.prototype.$index;for(let e in TRANSFORM.memory)delete String.prototype[e],delete Number.prototype[e],delete Function.prototype[e],delete Array.prototype[e],delete Boolean.prototype[e]}}}else if("#each"===n.name){colorlog(o,`${r} /json/module-transform.mjs`,"10",e,"for (let key in template) ~~~ newData");let i=await TRANSFORM.fillout(t,"{{"+n.expression+"}}",!0,o);if(i&&await Helper.is_array(i)){l=[];for(let t=0;t<i.length;t++){if("object"==typeof i[t]){i[t].$index=t;for(let e in TRANSFORM.memory)i[t][e]=TRANSFORM.memory[e]}else{String.prototype.$index=t,Number.prototype.$index=t,Function.prototype.$index=t,Array.prototype.$index=t,Boolean.prototype.$index=t;for(let e in TRANSFORM.memory)String.prototype[e]=TRANSFORM.memory[e],Number.prototype[e]=TRANSFORM.memory[e],Function.prototype[e]=TRANSFORM.memory[e],Array.prototype[e]=TRANSFORM.memory[e],Boolean.prototype[e]=TRANSFORM.memory[e]}let o=await TRANSFORM.run(e[r],i[t],TRANSFORM.staticProperty.view);if("object"==typeof i[t]){delete i[t].$index;for(let e in TRANSFORM.memory)delete i[t][e]}else{delete String.prototype.$index,delete Number.prototype.$index,delete Function.prototype.$index,delete Array.prototype.$index,delete Boolean.prototype.$index;for(let e in TRANSFORM.memory)delete String.prototype[e],delete Number.prototype[e],delete Function.prototype[e],delete Array.prototype[e],delete Boolean.prototype[e]}o&&l.push(o)}}else l=e}colorlog(o,{end:!0,property:`${r} end of #each`},"10",l,"for (let key in template) ~~~ newData")}else{let i=await TRANSFORM.fillout(t,r,!1,o),n=await TRANSFORM.fillout(t,e[r],!1,o);void 0!==i&&void 0!==n&&(l[i]=n)}else if("string"==typeof e[r])if((n=await TRANSFORM.tokenize(e[r]))&&"#?"===n.name){let e=await TRANSFORM.fillout(t,"{{"+n.expression+"}}",!1,o);e!=="{{"+n.expression+"}}"&&e&&(l[r]=e)}else{colorlog(TRANSFORM.staticProperty.view,{end:!1,property:"Получает item"},"11",{template:e[r],data:t},"create item");let o=await TRANSFORM.run(e[r],t,TRANSFORM.staticProperty.view);colorlog(TRANSFORM.staticProperty.view,{assert:!1,end:!0,property:"Получает item"},"11",{result:l,item:o,key:r},"create item"),void 0!==o&&(l[r]=o)}else{let o=await TRANSFORM.run(e[r],t,TRANSFORM.staticProperty.view);void 0!==o&&(l[r]=o)}}else l=e;colorlog(TRANSFORM.staticProperty.view,{end:!0,property:"Получает результат преобразования"},"10",l,"for (let key in template)"),(e=>{colorlog(TRANSFORM.staticProperty.view,{end:!0,property:"~~~ end TRANSFORM.run end ~~~"},"1",e,"TRANSFORM.run"),r(e)})(l)}catch(e){(e=>{console.log("~~~ err ~~~",e),i(e)})({_:"error menu",error:e})}}));export default TRANSFORM;