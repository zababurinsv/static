export default async(e,t,...n)=>new Promise(async function(l,o){bundle.default(e,"export",async function(d,a){let c=e=>{let t=e;-1!==(t=t.toString()).indexOf("Cannot read property 'appendChild' of null")?(console.warn("отсутствует объект куда поместить таблицу"),l({obj:"null"})):o(e)};switch(t){case"test":(async(e,t,n,o)=>{try{console.log(`${e.input}[(table)${e[t]}]`);const o=a.jsonToTable(JSON.parse(n));let d=document.createElement("table"),r=document.createElement("thead"),s=document.createElement("tbody"),p=document.createElement("tfoot");d.appendChild(r),d.appendChild(s),d.appendChild(p);for(let e=0;e<o.length;e++){let t="<tr>";for(let n=0;n<o[e].length;n++)0===e?t+=`<td>${o[e][n]}</td>`:""===o[e][n]?(t+="<td>null</td>",console.warn("пустое поле",e,n,o[0][n],o[0])):t+=`<td>${o[e][n]}</td>`;t+="</tr>",0===e?r.insertAdjacentHTML("beforeend",t):s.insertAdjacentHTML("beforeend",t)}(e=>{l(e)})(d)}catch(e){c(e)}})(e,n[0],n[1],n[2],n[3]);break;default:c(`новая функция ${t}`)}})});