export default(function(){"use strict";var __webpack_modules__={"../core/docs/static/html/components/component_modules/isEmpty/isEmpty.mjs":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Has own property.\n *\n * @type {Function}\n */\n\nvar has = Object.prototype.hasOwnProperty\n\n/**\n * To string.\n *\n * @type {Function}\n */\n\nvar toString = Object.prototype.toString\n\n/**\n * Test whether a value is \"empty\".\n *\n * @param {Mixed} val\n * @return {Boolean}\n */\n\nfunction isEmpty(val) {\n    // Null and Undefined...\n    if (val == null) return true\n\n    // Booleans...\n    if ('boolean' == typeof val) return false\n\n    // Numbers...\n    if ('number' == typeof val) return val === 0\n\n    // Strings...\n    if ('string' == typeof val) return val.length === 0\n\n    // Functions...\n    if ('function' == typeof val) return val.length === 0\n\n    // Arrays...\n    if (Array.isArray(val)) {\n        let object = val instanceof Object\n        if(object) {\n            return Object.keys(val).length === 0\n        } else {\n            return val.length === 0\n        }\n    }\n\n    // Errors...\n    if (val instanceof Error) return val.message === ''\n\n    // Objects...\n    if (val.toString == toString) {\n        switch (val.toString()) {\n\n            // Maps, Sets, Files and Errors...\n            case '[object File]':\n            case '[object Map]':\n            case '[object Set]': {\n                return val.size === 0\n            }\n\n            // Plain objects...\n            case '[object Object]': {\n                for (var key in val) {\n                    if (has.call(val, key)) return false\n                }\n\n                return true\n            }\n        }\n    }\n\n    // Anything else...\n    return false\n}\n\n/**\n * Export `isEmpty`.\n *\n * @type {Function}\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (isEmpty);\n\n//# sourceURL=webpack://psd.index/../core/docs/static/html/components/component_modules/isEmpty/isEmpty.mjs?")},"./app.psd.index.mjs":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"init\": function() { return /* binding */ init; },\n/* harmony export */   \"upload\": function() { return /* binding */ upload; },\n/* harmony export */   \"write\": function() { return /* binding */ write; }\n/* harmony export */ });\n/* harmony import */ var ag_psd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ag-psd */ \"./node_modules/ag-psd/dist/index.js\");\n/* harmony import */ var _docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./docs/static/html/components/component_modules/isEmpty/isEmpty.mjs */ \"./docs/static/html/components/component_modules/isEmpty/isEmpty.mjs\");\n/* harmony import */ var _docs_static_html_components_component_modules_convert_convert_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./docs/static/html/components/component_modules/convert/convert.mjs */ \"./docs/static/html/components/component_modules/convert/convert.mjs\");\n/* harmony import */ var _docs_static_html_components_component_modules_treeTraversal_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./docs/static/html/components/component_modules/treeTraversal/index.mjs */ \"./docs/static/html/components/component_modules/treeTraversal/index.mjs\");\n;\n\n\n\n\nfunction photoshopDropShadow2CSSBoxShadow(color, opacity, angle, distance, spread, size) {\n    // convert the angle to radians\n    angle = (180 - angle) * Math.PI / 180;\n\n    // the color is just an rgba() color with the opacity.\n    // for simplicity this function expects color to be an rgb string\n    // in CSS, opacity is a decimal between 0 and 1 instead of a percentage\n    color = \"rgba(\" + color + \",\" + opacity/100 + \")\";\n\n    // other calculations\n    var offsetX = Math.round(Math.cos(angle) * distance) + \"px\",\n        offsetY = Math.round(Math.sin(angle) * distance) + \"px\",\n        spreadRadius = (size * spread / 100) + \"px\",\n        blurRadius = (size - parseInt(spreadRadius, 10)) + \"px\";\n    return {\n        box:offsetX + \" \" + offsetY + \" \" + blurRadius + \" \" + spreadRadius + \" \" + color,\n        text:offsetX + \" \" + offsetY + \" \" + blurRadius + \" \" + color\n    }\n}\nfunction color(item) {\n    let txt = false\n    let rgb = {}\n    if(!(0,_docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__.default)(item.text)) {\n        txt = true\n        if(item.text.style.hasOwnProperty('fillColor')) {\n            rgb = `${item.text.style.fillColor.r},${item.text.style.fillColor.g},${item.text.style.fillColor.b},${item.text.style.fillColor.a}`\n        } else if (item.text.style.hasOwnProperty('strokeColor')) {\n            rgb = `${item.text.style.strokeColor.r},${item.text.style.strokeColor.g},${item.text.style.strokeColor.b},${item.text.style.strokeColor.a}`\n        } else {\n            console.assert(false, item.text.style)\n        }\n    }\n    return {\n        status: txt,\n        color: rgb\n    }\n}\n\nfunction element(v,item,c,obj,r) {\n    let out = { }\n    if((0,_docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__.default)(obj['preset']['action'])) {\n        console.warn('не выбран action для preset -а')\n    } else {\n        obj['preset']['action'](v,item,c,obj,r)\n    }\n}\n\n\nlet init = (v,p,c,obj,r) =>{\n    return new Promise(async (resolve, reject) => {\n        if((0,_docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__.default)(obj['PSD'])) {\n            obj['PSD'] = {}\n        }\n            obj['PSD']['lib'] = ag_psd__WEBPACK_IMPORTED_MODULE_3__\n            resolve({\n                status:'n-1',\n                p: p,\n                c:'green',\n                obj: obj,\n                r:`${r}-end`\n            })\n    })\n}\nlet upload = (v,p,c,obj,r) => {\n    return new Promise(async (resolve, reject) => {\n        if((0,_docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__.default)(obj['PSD'])) {\n            obj['PSD'] = {}\n        }\n        const psd = ag_psd__WEBPACK_IMPORTED_MODULE_3__.readPsd(p);\n        obj['PSD']['lib'] = ag_psd__WEBPACK_IMPORTED_MODULE_3__\n        obj['PSD']['psd'] = psd\n        obj['PSD']['children'] = psd.children[0].children\n        let out = obj.this.shadowRoot.querySelector('.design-relations')\n        let property = obj.this.shadowRoot.querySelector('.design-property')\n        let select = document.createElement('select')\n        let object = obj\n        for( let item of obj['PSD']['children']) {\n            if(item.hasOwnProperty('canvas')){\n                let string = ``\n                string = `<option class=\"name\">${item.name}</option>`\n                select.insertAdjacentHTML('beforeend', string)\n            }\n        }\n        select.addEventListener('change',async (event)=>{\n            let out = obj.this.shadowRoot.querySelector('.design-relations')\n            let temp = {}\n            for (const [i, item] of obj['PSD']['children'].entries()) {\n                if(item.hasOwnProperty('canvas')){\n                    if(item.name === event.target.value){\n                        let div = document.createElement('p')\n                        div.classList.add(`design-relations-item`)\n                        div.classList.add(`item-${Math.trunc(item.timestamp)}`)\n                        item.canvas.slot = `item-views-${i}`\n                        let context = item.canvas.getContext('2d');\n                        let imageData = context.getImageData(0, 0, context.canvas.width, context.canvas.height);\n                        let newCanvas = document.createElement('canvas')\n                        newCanvas.slot = `item-views-${i}`\n                        let newContext = newCanvas.getContext('2d');\n                        newContext.putImageData(imageData, 0, 0);\n                        // let temp1 = item.canvas.cloneNode(true);\n                        // let temp2 = item.canvas.cloneNode(true);\n                        // let temp3 = item.canvas.cloneNode(true);\n                        // let temp4 = item.canvas.cloneNode(true);\n                        obj.views.header.appendChild(newCanvas)\n                        // obj.views.body.appendChild(temp2)\n                        // obj.views.footer.appendChild(temp3)\n                        div.append(item.canvas)\n                        out.appendChild(div);\n                    }\n                } else {\n                    console.log('<<#######>>',item)\n                }\n            }\n            console.log('ssssssssssss', event.target.value)\n        })\n\n        property.appendChild(select)\n\n        resolve({\n            status:'n-1',\n            p: p,\n            c:'green',\n            obj: obj,\n            r:`${r}-end`\n        })\n    })\n}\n\nlet write = async (v,p,c,obj,r) => {\n    if((0,_docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__.default)(p)) {\n        let response =  await fetch('/images/psd/index/zababurin-small-header.psd')\n        p = await response.arrayBuffer()\n    }\n\n    if((0,_docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__.default)(obj['PSD'])) {\n        obj['PSD'] = {}\n    }\n    let slotMain = document.createElement('slot')\n    slotMain.name =\"layout-main\"\n\n    obj['PSD']['convert'] = {}\n    obj['PSD']['convert']['pxToVw'] = _docs_static_html_components_component_modules_convert_convert_mjs__WEBPACK_IMPORTED_MODULE_1__.customPixelToVW\n    obj['PSD']['lib'] = ag_psd__WEBPACK_IMPORTED_MODULE_3__\n    obj['PSD']['psd'] = ag_psd__WEBPACK_IMPORTED_MODULE_3__.readPsd(p, { skipLayerImageData: false, skipCompositeImageData: false, skipThumbnail: true });\n    obj['PSD']['container'] = obj['this']\n    console.log('PSD !!!!!!!!!!!!!!', obj['PSD']['psd'])\n    obj['PSD']['layout'] = {\n        relation:(window.innerWidth/obj['PSD']['psd'].width),\n        innerWidth: obj['PSD']['psd'].width,\n        innerHeight: obj['PSD']['psd'].height,\n        width: window.innerWidth,\n        height: window.innerHeight,\n        parentClass: r,\n        blockHeight: obj['PSD']['psd'].height * (window.innerWidth/obj['PSD']['psd'].width),\n        size: {\n            WidthWindow:window.innerWidth\n        }\n    }\n\n   for(let item of obj['PSD']['psd'].children) {\n       if((item.top * obj['PSD']['layout']['relation'])<= (obj['PSD']['layout'].innerHeight * obj['PSD']['layout'].relation)) {\n           let shadow = {}\n           if (!(0,_docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__.default)(item.effects)) {\n               shadow = photoshopDropShadow2CSSBoxShadow(\n                   `${item.effects.dropShadow.color.r},${item.effects.dropShadow.color.g},${item.effects.dropShadow.color.b}`,\n                   item.effects.dropShadow.opacity,\n                   item.effects.dropShadow.angle,\n                   item.effects.dropShadow.distance.value,\n                   item.effects.dropShadow.choke.value,\n                   item.effects.dropShadow.size.value\n               )\n           }\n           if ((0,_docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__.default)(item.canvas)) {\n               if (!(0,_docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__.default)(item.children)) {\n                   (0,_docs_static_html_components_component_modules_treeTraversal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.default)(v, item.children, c, obj, r)\n               }\n           } else {\n               let txt = color(item)\n               switch (item['name'].split('_').length) {\n                   case 1:\n                       element(v, txt.status ? {\n                           _: 'txt',\n                           name: item['name'].toLowerCase(),\n                           text: item.text.text,\n                           slot: item['name'].toLowerCase(),\n                           class: `${r}-${item['name'].toLowerCase()}`,\n                           top: item.top * obj['PSD']['layout']['relation'],\n                           left: item.left * obj['PSD']['layout']['relation'],\n                           style: {\n                               shadow: shadow,\n                               name: item.text.style.font.name,\n                               fontFamily: `${item.text.style.font.name}, serif`,\n                               fontSize: parseFloat((item.text.style.fontSize * item.text.transform[0] * obj['PSD']['layout']['relation']).toFixed(1)),\n                               LineHeight: item.text.style.fontSize + (item.text.style.leading / 2),\n                               transform: item.text.transform,\n                               color: `rgba(${txt.color})`,\n                               top: item.top * obj['PSD']['layout']['relation'],\n                               left: item.left * obj['PSD']['layout']['relation'],\n                           },\n                           orientation: item.text.orientation\n                       } : {\n                           _: 'image',\n                           name: item['name'].toLowerCase(),\n                           slot: item['name'].toLowerCase(),\n                           class: `${r}-${item['name'].toLowerCase()}`,\n                           top: item.top * obj['PSD']['layout']['relation'],\n                           left: item.left * obj['PSD']['layout']['relation'],\n                           canvas: item.canvas,\n                           width: item.canvas.width * obj['PSD']['layout']['relation']\n                       }, c, obj, r)\n                       break\n                   case 2:\n\n                       break\n                   default:\n                       console.warn('нет обработчкика данных компонентов', item['name'])\n                       break\n               }\n               if (!(0,_docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__.default)(item.children)) {\n                   (0,_docs_static_html_components_component_modules_treeTraversal_index_mjs__WEBPACK_IMPORTED_MODULE_2__.default)(v, item.children, c, obj, r)\n               }\n           }\n       }\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    \"author\": \"Zababurin Sergey\",\n    \"license\": \"GPL-3.0-or-later\",\n    \"bugs\": {\n        \"url\": \"https://github.com/zababurinsv/template/issues\",\n        \"mail\": \"s.zababurin.v@gmail.com\"\n    },\n});\n\n\n//# sourceURL=webpack://psd.index/./app.psd.index.mjs?")},"./docs/static/html/components/component_modules/convert/convert.mjs":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "pixelToVH": function() { return /* binding */ pixelToVH; },\n/* harmony export */   "pixelToVW": function() { return /* binding */ pixelToVW; },\n/* harmony export */   "customPixelToVW": function() { return /* binding */ customPixelToVW; },\n/* harmony export */   "vhToPixel": function() { return /* binding */ vhToPixel; },\n/* harmony export */   "vwToPixel": function() { return /* binding */ vwToPixel; },\n/* harmony export */   "clearnPx": function() { return /* binding */ clearnPx; }\n/* harmony export */ });\nlet covert = {}\r\ncovert = {}\r\n\r\nlet pixelToVH = function (value) {\r\n  // console.log(\'pixelToVH\', value, `=>`, `${(100 * value) / window.innerHeight}vh`)\r\n  return ((100 * value) / window.innerHeight)\r\n}\r\n\r\nlet pixelToVW = function (value) {\r\n  // console.log(\'pixelToVW\', value, `=>`, `${(100 * value) / window.innerWidth}vw`)\r\n  return ((100 * value) / window.innerWidth)\r\n}\r\n\r\nlet customPixelToVW = function (value, width) {\r\n  // console.log(\'pixelToVW\', value, `=>`, `${(100 * value) / window.innerWidth}vw`)\r\n  return ((100 * value) / width)\r\n}\r\n\r\nlet vhToPixel = function (value) {\r\n  // console.log(\'vhToPixel\', value, `=>`, `${(window.innerHeight * value) / 100}px`)\r\n  return ((window.innerHeight * value) / 100)\r\n}\r\n\r\nlet vwToPixel = function (value) {\r\n  // console.log(\'vwToPixel\', value, `=>`, `${(window.innerWidth * value) / 100}px`)\r\n  return ((window.innerWidth * value) / 100)\r\n}\r\n\r\nlet clearnPx = function (value) {\r\n  // console.log(\'clearnPx\', value, `=>`, `${value}`)\r\n  value = value.substr(0, value.length - 2)\r\n  return value\r\n}\r\n\r\n/* harmony default export */ __webpack_exports__["default"] = ({\r\n  "author": "Zababurin Sergey",\r\n  "license": `\r\n    Copyright 2020 The Zababurin Authors.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the "License");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n      https://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an "AS IS" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.`,\r\n  "bugs": {\r\n    "url": "https://github.com/zababurinsv/template/issues",\r\n    "mail": "s.zababurin.v@gmail.com"\r\n  }\r\n});\r\n\n\n//# sourceURL=webpack://psd.index/./docs/static/html/components/component_modules/convert/convert.mjs?')},"./docs/static/html/components/component_modules/isEmpty/isEmpty.mjs":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * Has own property.\n *\n * @type {Function}\n */\n\nvar has = Object.prototype.hasOwnProperty\n\n/**\n * To string.\n *\n * @type {Function}\n */\n\nvar toString = Object.prototype.toString\n\n/**\n * Test whether a value is \"empty\".\n *\n * @param {Mixed} val\n * @return {Boolean}\n */\n\nfunction isEmpty(val) {\n    // Null and Undefined...\n    if (val == null) return true\n\n    // Booleans...\n    if ('boolean' == typeof val) return false\n\n    // Numbers...\n    if ('number' == typeof val) return val === 0\n\n    // Strings...\n    if ('string' == typeof val) return val.length === 0\n\n    // Functions...\n    if ('function' == typeof val) return val.length === 0\n\n    // Arrays...\n    if (Array.isArray(val)) {\n        let object = val instanceof Object\n        if(object) {\n            return Object.keys(val).length === 0\n        } else {\n            return val.length === 0\n        }\n    }\n\n    // Errors...\n    if (val instanceof Error) return val.message === ''\n\n    // Objects...\n    if (val.toString == toString) {\n        switch (val.toString()) {\n\n            // Maps, Sets, Files and Errors...\n            case '[object File]':\n            case '[object Map]':\n            case '[object Set]': {\n                return val.size === 0\n            }\n\n            // Plain objects...\n            case '[object Object]': {\n                for (var key in val) {\n                    if (has.call(val, key)) return false\n                }\n\n                return true\n            }\n        }\n    }\n\n    // Anything else...\n    return false\n}\n\n/**\n * Export `isEmpty`.\n *\n * @type {Function}\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (isEmpty);\n\n//# sourceURL=webpack://psd.index/./docs/static/html/components/component_modules/isEmpty/isEmpty.mjs?")},"./docs/static/html/components/component_modules/treeTraversal/index.mjs":function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _home_sergey_PhpstormProjects_system_core_docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/docs/static/html/components/component_modules/isEmpty/isEmpty.mjs */ \"../core/docs/static/html/components/component_modules/isEmpty/isEmpty.mjs\");\n;\n\nfunction photoshopDropShadow2CSSBoxShadow(color, opacity, angle, distance, spread, size) {\n    // convert the angle to radians\n    angle = (180 - angle) * Math.PI / 180;\n\n    // the color is just an rgba() color with the opacity.\n    // for simplicity this function expects color to be an rgb string\n    // in CSS, opacity is a decimal between 0 and 1 instead of a percentage\n    let outColor = \"rgba(\" + color + \",\" + opacity + \")\";\n   let colorInset = \"rgba(\" + color + \",\" + opacity * 0.3 + \")\";\n    // other calculations\n    var offsetX = Math.round(Math.cos(angle) * distance) + \"px\",\n        offsetY = Math.round(Math.sin(angle) * distance) + \"px\",\n        spreadRadius = (size * spread / 100) + \"px\",\n        blurRadius = (size - parseInt(spreadRadius, 10)) + \"px\";\n    return {\n        boxInset:offsetX + \" \" + offsetY + \" \" + blurRadius + \" \" + spreadRadius + \" \" + colorInset,\n        box:offsetX + \" \" + offsetY + \" \" + blurRadius + \" \" + spreadRadius + \" \" + outColor,\n        text:offsetX + \" \" + offsetY + \" \" + spreadRadius + \" \" + outColor\n    }\n}\n\nfunction color(item) {\n    let txt = false\n    let rgb = {}\n    if(!(0,_home_sergey_PhpstormProjects_system_core_docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__.default)(item.text)) {\n        txt = true\n        if(item.text.style.hasOwnProperty('fillColor')) {\n            rgb = `${item.text.style.fillColor.r},${item.text.style.fillColor.g},${item.text.style.fillColor.b},${item.text.style.fillColor.a}`\n        } else if (item.text.style.hasOwnProperty('strokeColor')) {\n            rgb = `${item.text.style.strokeColor.r},${item.text.style.strokeColor.g},${item.text.style.strokeColor.b},${item.text.style.strokeColor.a}`\n        } else {\n            console.assert(false, item.text.style)\n        }\n    }\n    return {\n        status: txt,\n        color: rgb\n    }\n}\n\nfunction element(v,item,c,obj,r) {\n    let out = {}\n    if((0,_home_sergey_PhpstormProjects_system_core_docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__.default)(obj['preset']['action'])) {\n        console.warn('не выбран action для preset -а')\n    } else {\n        obj['preset']['action'](v,item,c,obj,r)\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = ((v,p,c,obj,r) =>{\n    return new Promise(async (resolve, reject)=>{\n            for(let item of p) {\n                if((item.top * obj['PSD']['layout']['relation'])<= (obj['PSD']['layout'].innerHeight * obj['PSD']['layout'].relation)) {\n\n                    console.log('$$~~~~~~~~~~ index.psd ~~~~~~~~~~$$>>>', {\n                        name: item['name'].toLowerCase(),\n                        origin: item,\n                        effects: item.effects,\n                        PSDheight:  obj['PSD']['layout'].innerHeight * obj['PSD']['layout'].relation,\n                        objectHeight: item.top * obj['PSD']['layout']['relation']\n                    })\n                if((0,_home_sergey_PhpstormProjects_system_core_docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__.default)(item.canvas)) {\n                    console.warn('нет canvas', item)\n                } else {\n                    let shadow = {}\n                    if(!(0,_home_sergey_PhpstormProjects_system_core_docs_static_html_components_component_modules_isEmpty_isEmpty_mjs__WEBPACK_IMPORTED_MODULE_0__.default)(item.effects)) {\n                        shadow =  photoshopDropShadow2CSSBoxShadow(\n                            `${item.effects.dropShadow.color.r},${item.effects.dropShadow.color.g},${item.effects.dropShadow.color.b}`,\n                            item.effects.dropShadow.opacity,\n                            item.effects.dropShadow.angle,\n                            item.effects.dropShadow.distance.value,\n                            item.effects.dropShadow.choke.value,\n                            item.effects.dropShadow.size.value\n                        )\n                    }\n                    let txt = color(item)\n                    switch (item['name'].split(' ').length) {\n                        case 1:\n                            element(v, txt.status ? {\n                                _: 'txt',\n                                name:item['name'].toLowerCase(),\n                                text: item.text.text,\n                                slot:item['name'].toLowerCase(),\n                                class:`${r}-${item['name'].toLowerCase()}`,\n                                top:item.top * obj['PSD']['layout']['relation'],\n                                left:item.left * obj['PSD']['layout']['relation'],\n                                style: {\n                                    shadow: shadow,\n                                    name:item.text.style.font.name,\n                                    fontFamily:`${item.text.style.font.name}, serif`,\n                                    fontSize: parseFloat((item.text.style.fontSize * item.text.transform[0] * obj['PSD']['layout']['relation']).toFixed(1)),\n                                    LineHeight: item.text.style.fontSize + (item.text.style.leading / 2),\n                                    transform: item.text.transform,\n                                    color: `rgba(${txt.color})`,\n                                    top: item.top * obj['PSD']['layout']['relation'],\n                                    left: item.left * obj['PSD']['layout']['relation'],\n                                },\n                                orientation: item.text.orientation\n                            } : {\n                                _: 'image',\n                                name:item['name'].toLowerCase(),\n                                slot:item['name'].toLowerCase(),\n                                class:`${r}-${item['name'].toLowerCase()}`,\n                                top:item.top * obj['PSD']['layout']['relation'],\n                                left:item.left * obj['PSD']['layout']['relation'],\n                                canvas:item.canvas,\n                                width:item.canvas.width * obj['PSD']['layout']['relation']\n                            }, c, obj, r)\n                            break\n                        default:\n                            console.warn('нет обработчкика данных компонентов', item['name'])\n                            break\n                    }\n                }\n            }\n        }\n    })\n});\n\n//# sourceURL=webpack://psd.index/./docs/static/html/components/component_modules/treeTraversal/index.mjs?")},"./node_modules/ag-psd/dist/additionalInfo.js":function(__unused_webpack_module,exports,__webpack_require__){eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClrS = exports.infoHandlersMap = exports.infoHandlers = void 0;\nvar effectsHelpers_1 = __webpack_require__(/*! ./effectsHelpers */ \"./node_modules/ag-psd/dist/effectsHelpers.js\");\nvar helpers_1 = __webpack_require__(/*! ./helpers */ \"./node_modules/ag-psd/dist/helpers.js\");\nvar psdReader_1 = __webpack_require__(/*! ./psdReader */ \"./node_modules/ag-psd/dist/psdReader.js\");\nvar psdWriter_1 = __webpack_require__(/*! ./psdWriter */ \"./node_modules/ag-psd/dist/psdWriter.js\");\nvar descriptor_1 = __webpack_require__(/*! ./descriptor */ \"./node_modules/ag-psd/dist/descriptor.js\");\nvar engineData_1 = __webpack_require__(/*! ./engineData */ \"./node_modules/ag-psd/dist/engineData.js\");\nvar text_1 = __webpack_require__(/*! ./text */ \"./node_modules/ag-psd/dist/text.js\");\nvar base64_js_1 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\");\nvar MOCK_HANDLERS = false;\nexports.infoHandlers = [];\nexports.infoHandlersMap = {};\nfunction addHandler(key, has, read, write) {\n    var handler = { key: key, has: has, read: read, write: write };\n    exports.infoHandlers.push(handler);\n    exports.infoHandlersMap[handler.key] = handler;\n}\nfunction addHandlerAlias(key, target) {\n    exports.infoHandlersMap[key] = exports.infoHandlersMap[target];\n}\nvar textGridding = helpers_1.createEnum('textGridding', 'none', {\n    none: 'None',\n});\nvar Ornt = helpers_1.createEnum('Ornt', 'horizontal', {\n    horizontal: 'Hrzn',\n    vertical: 'Vrtc',\n});\nvar Annt = helpers_1.createEnum('Annt', 'sharp', {\n    none: 'Anno',\n    sharp: 'antiAliasSharp',\n    crisp: 'AnCr',\n    strong: 'AnSt',\n    smooth: 'AnSm',\n});\nvar warpStyle = helpers_1.createEnum('warpStyle', 'none', {\n    none: 'warpNone',\n    arc: 'warpArc',\n    arcLower: 'warpArcLower',\n    arcUpper: 'warpArcUpper',\n    arch: 'warpArch',\n    bulge: 'warpBulge',\n    shellLower: 'warpShellLower',\n    shellUpper: 'warpShellUpper',\n    flag: 'warpFlag',\n    wave: 'warpWave',\n    fish: 'warpFish',\n    rise: 'warpRise',\n    fisheye: 'warpFisheye',\n    inflate: 'warpInflate',\n    squeeze: 'warpSqueeze',\n    twist: 'warpTwist',\n});\nvar BlnM = helpers_1.createEnum('BlnM', 'normal', {\n    'normal': 'Nrml',\n    'dissolve': 'Dslv',\n    'darken': 'Drkn',\n    'multiply': 'Mltp',\n    'color burn': 'CBrn',\n    'linear burn': 'linearBurn',\n    'darker color': 'darkerColor',\n    'lighten': 'Lghn',\n    'screen': 'Scrn',\n    'color dodge': 'CDdg',\n    'linear dodge': 'linearDodge',\n    'lighter color': 'lighterColor',\n    'overlay': 'Ovrl',\n    'soft light': 'SftL',\n    'hard light': 'HrdL',\n    'vivid light': 'vividLight',\n    'linear light': 'linearLight',\n    'pin light': 'pinLight',\n    'hard mix': 'hardMix',\n    'difference': 'Dfrn',\n    'exclusion': 'Xclu',\n    'subtract': 'blendSubtraction',\n    'divide': 'blendDivide',\n    'hue': 'H   ',\n    'saturation': 'Strt',\n    'color': 'Clr ',\n    'luminosity': 'Lmns',\n});\nvar BESl = helpers_1.createEnum('BESl', 'inner bevel', {\n    'inner bevel': 'InrB',\n    'outer bevel': 'OtrB',\n    'emboss': 'Embs',\n    'pillow emboss': 'PlEb',\n    'stroke emboss': 'strokeEmboss',\n});\nvar bvlT = helpers_1.createEnum('bvlT', 'smooth', {\n    'smooth': 'SfBL',\n    'chisel hard': 'PrBL',\n    'chisel soft': 'Slmt',\n});\nvar BESs = helpers_1.createEnum('BESs', 'up', {\n    up: 'In  ',\n    down: 'Out ',\n});\nvar BETE = helpers_1.createEnum('BETE', 'softer', {\n    softer: 'SfBL',\n    precise: 'PrBL',\n});\nvar IGSr = helpers_1.createEnum('IGSr', 'edge', {\n    edge: 'SrcE',\n    center: 'SrcC',\n});\nvar GrdT = helpers_1.createEnum('GrdT', 'linear', {\n    linear: 'Lnr ',\n    radial: 'Rdl ',\n    angle: 'Angl',\n    reflected: 'Rflc',\n    diamond: 'Dmnd',\n});\nexports.ClrS = helpers_1.createEnum('ClrS', 'rgb', {\n    rgb: 'RGBC',\n    hsb: 'HSBl',\n    lab: 'LbCl',\n});\nvar FStl = helpers_1.createEnum('FStl', 'outside', {\n    outside: 'OutF',\n    center: 'CtrF',\n    inside: 'InsF'\n});\nvar FrFl = helpers_1.createEnum('FrFl', 'color', {\n    color: 'SClr',\n    gradient: 'GrFl',\n    pattern: 'Ptrn',\n});\nvar strokeStyleLineCapType = helpers_1.createEnum('strokeStyleLineCapType', 'butt', {\n    butt: 'strokeStyleButtCap',\n    round: 'strokeStyleRoundCap',\n    square: 'strokeStyleSquareCap',\n});\nvar strokeStyleLineJoinType = helpers_1.createEnum('strokeStyleLineJoinType', 'miter', {\n    miter: 'strokeStyleMiterJoin',\n    round: 'strokeStyleRoundJoin',\n    bevel: 'strokeStyleBevelJoin',\n});\nvar strokeStyleLineAlignment = helpers_1.createEnum('strokeStyleLineAlignment', 'inside', {\n    inside: 'strokeStyleAlignInside',\n    center: 'strokeStyleAlignCenter',\n    outside: 'strokeStyleAlignOutside',\n});\nfunction hasKey(key) {\n    return function (target) { return target[key] !== undefined; };\n}\naddHandler('TySh', hasKey('text'), function (reader, target, leftBytes) {\n    if (psdReader_1.readInt16(reader) !== 1)\n        throw new Error(\"Invalid TySh version\");\n    var transform = [];\n    for (var i = 0; i < 6; i++)\n        transform.push(psdReader_1.readFloat64(reader));\n    if (psdReader_1.readInt16(reader) !== 50)\n        throw new Error(\"Invalid TySh text version\");\n    var text = descriptor_1.readVersionAndDescriptor(reader);\n    if (psdReader_1.readInt16(reader) !== 1)\n        throw new Error(\"Invalid TySh warp version\");\n    var warp = descriptor_1.readVersionAndDescriptor(reader);\n    target.text = {\n        transform: transform,\n        left: psdReader_1.readFloat32(reader),\n        top: psdReader_1.readFloat32(reader),\n        right: psdReader_1.readFloat32(reader),\n        bottom: psdReader_1.readFloat32(reader),\n        text: text['Txt '].replace(/\\r/g, '\\n'),\n        index: text.TextIndex || 0,\n        gridding: textGridding.decode(text.textGridding),\n        antiAlias: Annt.decode(text.AntA),\n        orientation: Ornt.decode(text.Ornt),\n        warp: {\n            style: warpStyle.decode(warp.warpStyle),\n            value: warp.warpValue || 0,\n            perspective: warp.warpPerspective || 0,\n            perspectiveOther: warp.warpPerspectiveOther || 0,\n            rotate: Ornt.decode(warp.warpRotate),\n        },\n    };\n    if (text.EngineData) {\n        var engineData = text_1.decodeEngineData(engineData_1.parseEngineData(text.EngineData));\n        // const before = parseEngineData(text.EngineData);\n        // const after = encodeEngineData(engineData);\n        // require('fs').writeFileSync('before.txt', require('util').inspect(before, false, 99, false), 'utf8');\n        // require('fs').writeFileSync('after.txt', require('util').inspect(after, false, 99, false), 'utf8');\n        // console.log(require('util').inspect(parseEngineData(text.EngineData), false, 99, true));\n        target.text = __assign(__assign({}, target.text), engineData);\n        // console.log(require('util').inspect(target.text, false, 99, true));\n    }\n    psdReader_1.skipBytes(reader, leftBytes());\n}, function (writer, target) {\n    var text = target.text;\n    var warp = text.warp || {};\n    var transform = text.transform || [1, 0, 0, 1, 0, 0];\n    var textDescriptor = {\n        'Txt ': (text.text || '').replace(/\\r?\\n/g, '\\r'),\n        textGridding: textGridding.encode(text.gridding),\n        Ornt: Ornt.encode(text.orientation),\n        AntA: Annt.encode(text.antiAlias),\n        TextIndex: text.index || 0,\n        EngineData: engineData_1.serializeEngineData(text_1.encodeEngineData(text)),\n    };\n    var warpDescriptor = {\n        warpStyle: warpStyle.encode(warp.style),\n        warpValue: warp.value || 0,\n        warpPerspective: warp.perspective || 0,\n        warpPerspectiveOther: warp.perspectiveOther || 0,\n        warpRotate: Ornt.encode(warp.rotate),\n    };\n    psdWriter_1.writeInt16(writer, 1); // version\n    for (var i = 0; i < 6; i++) {\n        psdWriter_1.writeFloat64(writer, transform[i]);\n    }\n    psdWriter_1.writeInt16(writer, 50); // text version\n    descriptor_1.writeVersionAndDescriptor(writer, '', 'TxLr', textDescriptor);\n    psdWriter_1.writeInt16(writer, 1); // warp version\n    descriptor_1.writeVersionAndDescriptor(writer, '', 'warp', warpDescriptor);\n    psdWriter_1.writeFloat32(writer, text.left);\n    psdWriter_1.writeFloat32(writer, text.top);\n    psdWriter_1.writeFloat32(writer, text.right);\n    psdWriter_1.writeFloat32(writer, text.bottom);\n    // writeZeros(writer, 2);\n});\n// vector fills\naddHandler('SoCo', function (target) { return target.vectorFill !== undefined && target.vectorStroke === undefined &&\n    target.vectorFill.type === 'color'; }, function (reader, target) {\n    var descriptor = descriptor_1.readVersionAndDescriptor(reader);\n    target.vectorFill = parseVectorContent(descriptor);\n}, function (writer, target) {\n    var descriptor = serializeVectorContent(target.vectorFill).descriptor;\n    descriptor_1.writeVersionAndDescriptor(writer, '', 'null', descriptor);\n});\naddHandler('GdFl', function (target) { return target.vectorFill !== undefined && target.vectorStroke === undefined &&\n    (target.vectorFill.type === 'solid' || target.vectorFill.type === 'noise'); }, function (reader, target) {\n    var descriptor = descriptor_1.readVersionAndDescriptor(reader);\n    target.vectorFill = parseVectorContent(descriptor);\n}, function (writer, target) {\n    var descriptor = serializeVectorContent(target.vectorFill).descriptor;\n    descriptor_1.writeVersionAndDescriptor(writer, '', 'null', descriptor);\n});\naddHandler('PtFl', function (target) { return target.vectorFill !== undefined && target.vectorStroke === undefined &&\n    target.vectorFill.type === 'pattern'; }, function (reader, target) {\n    var descriptor = descriptor_1.readVersionAndDescriptor(reader);\n    target.vectorFill = parseVectorContent(descriptor);\n}, function (writer, target) {\n    var descriptor = serializeVectorContent(target.vectorFill).descriptor;\n    descriptor_1.writeVersionAndDescriptor(writer, '', 'null', descriptor);\n});\naddHandler('vscg', function (target) { return target.vectorFill !== undefined && target.vectorStroke !== undefined; }, function (reader, target, left) {\n    psdReader_1.readSignature(reader); // key\n    var descriptor = descriptor_1.readVersionAndDescriptor(reader);\n    target.vectorFill = parseVectorContent(descriptor);\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var _a = serializeVectorContent(target.vectorFill), descriptor = _a.descriptor, key = _a.key;\n    psdWriter_1.writeSignature(writer, key);\n    descriptor_1.writeVersionAndDescriptor(writer, '', 'null', descriptor);\n});\nfunction readBezierKnot(reader, width, height) {\n    var y0 = psdReader_1.readFixedPointPath32(reader) * height;\n    var x0 = psdReader_1.readFixedPointPath32(reader) * width;\n    var y1 = psdReader_1.readFixedPointPath32(reader) * height;\n    var x1 = psdReader_1.readFixedPointPath32(reader) * width;\n    var y2 = psdReader_1.readFixedPointPath32(reader) * height;\n    var x2 = psdReader_1.readFixedPointPath32(reader) * width;\n    return [x0, y0, x1, y1, x2, y2];\n}\naddHandler('vmsk', hasKey('vectorMask'), function (reader, target, left, _a) {\n    var width = _a.width, height = _a.height;\n    if (psdReader_1.readUint32(reader) !== 3)\n        throw new Error('Invalid vmsk version');\n    target.vectorMask = { paths: [] };\n    var vectorMask = target.vectorMask;\n    var flags = psdReader_1.readUint32(reader);\n    vectorMask.invert = (flags & 1) !== 0;\n    vectorMask.notLink = (flags & 2) !== 0;\n    vectorMask.disable = (flags & 4) !== 0;\n    var paths = vectorMask.paths;\n    var path = undefined;\n    while (left() >= 26) {\n        var selector = psdReader_1.readUint16(reader);\n        switch (selector) {\n            case 0: // Closed subpath length record\n                psdReader_1.readUint16(reader); // count\n                psdReader_1.skipBytes(reader, 22);\n                path = { open: false, knots: [] };\n                paths.push(path);\n                break;\n            case 1: // Closed subpath Bezier knot, linked\n            case 4: // Open subpath Bezier knot, linked\n                path.knots.push({ linked: true, points: readBezierKnot(reader, width, height) });\n                break;\n            case 2: // Closed subpath Bezier knot, unlinked\n            case 5: // Open subpath Bezier knot, unlinked\n                path.knots.push({ linked: false, points: readBezierKnot(reader, width, height) });\n                break;\n            case 3: // Open subpath length record\n                psdReader_1.readUint16(reader); // count\n                psdReader_1.skipBytes(reader, 22);\n                path = { open: true, knots: [] };\n                paths.push(path);\n                break;\n            case 6: // Path fill rule record\n                psdReader_1.skipBytes(reader, 24);\n                break;\n            case 7: { // Clipboard record\n                // TODO: check if these need to be multiplied by document size\n                var top_1 = psdReader_1.readFixedPointPath32(reader);\n                var left_1 = psdReader_1.readFixedPointPath32(reader);\n                var bottom = psdReader_1.readFixedPointPath32(reader);\n                var right = psdReader_1.readFixedPointPath32(reader);\n                var resolution = psdReader_1.readFixedPointPath32(reader);\n                psdReader_1.skipBytes(reader, 4);\n                vectorMask.clipboard = { top: top_1, left: left_1, bottom: bottom, right: right, resolution: resolution };\n                break;\n            }\n            case 8: // Initial fill rule record\n                vectorMask.fillStartsWithAllPixels = !!psdReader_1.readUint16(reader);\n                psdReader_1.skipBytes(reader, 22);\n                break;\n            default: throw new Error('Invalid vmsk section');\n        }\n    }\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target, _a) {\n    var width = _a.width, height = _a.height;\n    var vectorMask = target.vectorMask;\n    var flags = (vectorMask.invert ? 1 : 0) |\n        (vectorMask.notLink ? 2 : 0) |\n        (vectorMask.disable ? 4 : 0);\n    psdWriter_1.writeUint32(writer, 3); // version\n    psdWriter_1.writeUint32(writer, flags);\n    // initial entry\n    psdWriter_1.writeUint16(writer, 6);\n    psdWriter_1.writeZeros(writer, 24);\n    var clipboard = vectorMask.clipboard;\n    if (clipboard) {\n        psdWriter_1.writeUint16(writer, 7);\n        psdWriter_1.writeFixedPointPath32(writer, clipboard.top);\n        psdWriter_1.writeFixedPointPath32(writer, clipboard.left);\n        psdWriter_1.writeFixedPointPath32(writer, clipboard.bottom);\n        psdWriter_1.writeFixedPointPath32(writer, clipboard.right);\n        psdWriter_1.writeFixedPointPath32(writer, clipboard.resolution);\n        psdWriter_1.writeZeros(writer, 4);\n    }\n    if (vectorMask.fillStartsWithAllPixels !== undefined) {\n        psdWriter_1.writeUint16(writer, 8);\n        psdWriter_1.writeUint16(writer, vectorMask.fillStartsWithAllPixels ? 1 : 0);\n        psdWriter_1.writeZeros(writer, 22);\n    }\n    for (var _i = 0, _b = vectorMask.paths; _i < _b.length; _i++) {\n        var path = _b[_i];\n        psdWriter_1.writeUint16(writer, path.open ? 3 : 0);\n        psdWriter_1.writeUint16(writer, path.knots.length);\n        psdWriter_1.writeUint16(writer, 1);\n        psdWriter_1.writeUint16(writer, 1);\n        psdWriter_1.writeZeros(writer, 18);\n        var linkedKnot = path.open ? 4 : 1;\n        var unlinkedKnot = path.open ? 5 : 2;\n        for (var _c = 0, _d = path.knots; _c < _d.length; _c++) {\n            var _e = _d[_c], linked = _e.linked, points = _e.points;\n            psdWriter_1.writeUint16(writer, linked ? linkedKnot : unlinkedKnot);\n            psdWriter_1.writeFixedPointPath32(writer, points[1] / width); // y0\n            psdWriter_1.writeFixedPointPath32(writer, points[0] / height); // x0\n            psdWriter_1.writeFixedPointPath32(writer, points[3] / width); // y1\n            psdWriter_1.writeFixedPointPath32(writer, points[2] / height); // x1\n            psdWriter_1.writeFixedPointPath32(writer, points[5] / width); // y2\n            psdWriter_1.writeFixedPointPath32(writer, points[4] / height); // x2\n        }\n    }\n});\n// TODO: need to write vmsk if has outline ?\naddHandlerAlias('vsms', 'vmsk');\naddHandler('luni', hasKey('name'), function (reader, target, left) {\n    target.name = psdReader_1.readUnicodeString(reader);\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    psdWriter_1.writeUnicodeString(writer, target.name);\n    // writeUint16(writer, 0); // padding (but not extending string length)\n});\naddHandler('lnsr', hasKey('nameSource'), function (reader, target) { return target.nameSource = psdReader_1.readSignature(reader); }, function (writer, target) { return psdWriter_1.writeSignature(writer, target.nameSource); });\naddHandler('lyid', hasKey('id'), function (reader, target) { return target.id = psdReader_1.readUint32(reader); }, function (writer, target) { return psdWriter_1.writeUint32(writer, target.id); });\naddHandler('clbl', hasKey('blendClippendElements'), function (reader, target) {\n    target.blendClippendElements = !!psdReader_1.readUint8(reader);\n    psdReader_1.skipBytes(reader, 3);\n}, function (writer, target) {\n    psdWriter_1.writeUint8(writer, target.blendClippendElements ? 1 : 0);\n    psdWriter_1.writeZeros(writer, 3);\n});\naddHandler('infx', hasKey('blendInteriorElements'), function (reader, target) {\n    target.blendInteriorElements = !!psdReader_1.readUint8(reader);\n    psdReader_1.skipBytes(reader, 3);\n}, function (writer, target) {\n    psdWriter_1.writeUint8(writer, target.blendInteriorElements ? 1 : 0);\n    psdWriter_1.writeZeros(writer, 3);\n});\naddHandler('knko', hasKey('knockout'), function (reader, target) {\n    target.knockout = !!psdReader_1.readUint8(reader);\n    psdReader_1.skipBytes(reader, 3);\n}, function (writer, target) {\n    psdWriter_1.writeUint8(writer, target.knockout ? 1 : 0);\n    psdWriter_1.writeZeros(writer, 3);\n});\naddHandler('lspf', hasKey('protected'), function (reader, target) {\n    var flags = psdReader_1.readUint32(reader);\n    target.protected = {\n        transparency: (flags & 0x01) !== 0,\n        composite: (flags & 0x02) !== 0,\n        position: (flags & 0x04) !== 0,\n    };\n}, function (writer, target) {\n    var flags = (target.protected.transparency ? 0x01 : 0) |\n        (target.protected.composite ? 0x02 : 0) |\n        (target.protected.position ? 0x04 : 0);\n    psdWriter_1.writeUint32(writer, flags);\n});\naddHandler('lclr', hasKey('layerColor'), function (reader, target) {\n    var color = psdReader_1.readUint16(reader);\n    psdReader_1.skipBytes(reader, 6);\n    target.layerColor = helpers_1.layerColors[color];\n}, function (writer, target) {\n    var index = helpers_1.layerColors.indexOf(target.layerColor);\n    psdWriter_1.writeUint16(writer, index === -1 ? 0 : index);\n    psdWriter_1.writeZeros(writer, 6);\n});\naddHandler('shmd', hasKey('timestamp'), function (reader, target, left, _, options) {\n    var count = psdReader_1.readUint32(reader);\n    var _loop_1 = function (i) {\n        psdReader_1.checkSignature(reader, '8BIM');\n        var key = psdReader_1.readSignature(reader);\n        psdReader_1.readUint8(reader); // copy\n        psdReader_1.skipBytes(reader, 3);\n        psdReader_1.readSection(reader, 1, function (left) {\n            if (key === 'cust') {\n                var desc = descriptor_1.readVersionAndDescriptor(reader);\n                if (desc.layerTime !== undefined)\n                    target.timestamp = desc.layerTime;\n            }\n            else if (key === 'mlst') {\n                var desc = descriptor_1.readVersionAndDescriptor(reader);\n                options.logDevFeatures && console.log('mlst', desc);\n                // options.logDevFeatures && console.log('mlst', require('util').inspect(desc, false, 99, true));\n            }\n            else if (key === 'mdyn') {\n                // frame flags\n                var unknown = psdReader_1.readUint16(reader);\n                var propagate = psdReader_1.readUint8(reader);\n                var flags = psdReader_1.readUint8(reader);\n                var unifyLayerPosition = (flags & 1) !== 0;\n                var unifyLayerStyle = (flags & 2) !== 0;\n                var unifyLayerVisibility = (flags & 4) !== 0;\n                options.logDevFeatures && console.log('mdyn', 'unknown:', unknown, 'propagate:', propagate, 'flags:', flags, { unifyLayerPosition: unifyLayerPosition, unifyLayerStyle: unifyLayerStyle, unifyLayerVisibility: unifyLayerVisibility });\n                // const desc = readVersionAndDescriptor(reader) as FrameListDescriptor;\n                // console.log('mdyn', require('util').inspect(desc, false, 99, true));\n            }\n            else {\n                options.logDevFeatures && console.log('Unhandled metadata', key);\n            }\n            psdReader_1.skipBytes(reader, left());\n        });\n    };\n    for (var i = 0; i < count; i++) {\n        _loop_1(i);\n    }\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var desc = {\n        layerTime: target.timestamp,\n    };\n    psdWriter_1.writeUint32(writer, 1); // count\n    psdWriter_1.writeSignature(writer, '8BIM');\n    psdWriter_1.writeSignature(writer, 'cust');\n    psdWriter_1.writeUint8(writer, 0); // copy (always false)\n    psdWriter_1.writeZeros(writer, 3);\n    psdWriter_1.writeSection(writer, 2, function () { return descriptor_1.writeVersionAndDescriptor(writer, '', 'metadata', desc); });\n});\naddHandler('sn2P', hasKey('usingAlignedRendering'), function (reader, target) { return target.usingAlignedRendering = !!psdReader_1.readUint32(reader); }, function (writer, target) { return psdWriter_1.writeUint32(writer, target.usingAlignedRendering ? 1 : 0); });\naddHandler('fxrp', hasKey('referencePoint'), function (reader, target) {\n    target.referencePoint = {\n        x: psdReader_1.readFloat64(reader),\n        y: psdReader_1.readFloat64(reader),\n    };\n}, function (writer, target) {\n    psdWriter_1.writeFloat64(writer, target.referencePoint.x);\n    psdWriter_1.writeFloat64(writer, target.referencePoint.y);\n});\naddHandler('lsct', hasKey('sectionDivider'), function (reader, target, left) {\n    target.sectionDivider = { type: psdReader_1.readUint32(reader) };\n    if (left()) {\n        psdReader_1.checkSignature(reader, '8BIM');\n        target.sectionDivider.key = psdReader_1.readSignature(reader);\n    }\n    if (left()) {\n        // 0 = normal\n        // 1 = scene group, affects the animation timeline.\n        target.sectionDivider.subType = psdReader_1.readUint32(reader);\n    }\n}, function (writer, target) {\n    psdWriter_1.writeUint32(writer, target.sectionDivider.type);\n    if (target.sectionDivider.key) {\n        psdWriter_1.writeSignature(writer, '8BIM');\n        psdWriter_1.writeSignature(writer, target.sectionDivider.key);\n        if (target.sectionDivider.subType !== undefined) {\n            psdWriter_1.writeUint32(writer, target.sectionDivider.subType);\n        }\n    }\n});\nMOCK_HANDLERS && addHandler('Patt', function (target) { return 'children' in target; }, // (target as any)._Patt !== undefined,\nfunction (reader, target, left) {\n    console.log('additional info: Patt');\n    target._Patt = psdReader_1.readBytes(reader, left());\n}, function (writer, target) { return  false && 0; });\naddHandler('Patt', // TODO: handle also Pat2 & Pat3\nfunction (// TODO: handle also Pat2 & Pat3\ntarget) { return !target; }, function (reader, _target, left) {\n    if (!left())\n        return;\n    psdReader_1.skipBytes(reader, left());\n    return; // not supported yet\n    /*\n    const length = readUint32(reader);\n    const version = readUint32(reader);\n\r\n    if (version !== 1) throw new Error(`Invalid Patt version: ${version}`);\n\r\n    const colorMode = readUint32(reader) as ColorMode;\n    const x = readInt16(reader);\n    const y = readInt16(reader);\n\r\n    if (supportedColorModes.indexOf(colorMode) == -1) {\n        throw new Error(`Invalid Patt color mode: ${colorMode}`);\n    }\n\r\n    const name = readUnicodeString(reader);\n    const id = readPascalString(reader, 1);\n\r\n    // TODO: index color table here (only for indexed color mode, not supported right now)\n    console.log('patt', length, colorMode, x, y, name, id);\n\r\n    // virtual memory array list\n    {\n        const version = readUint32(reader);\n\r\n        if (version !== 3) throw new Error(`Invalid Patt:VMAL version: ${version}`);\n\r\n        const length = readUint32(reader);\n        const top = readUint32(reader);\n        const left = readUint32(reader);\n        const bottom = readUint32(reader);\n        const right = readUint32(reader);\n        const channels = readUint32(reader);\n\r\n        console.log('VMAL', length, top, left, bottom, right, channels);\n\r\n        for (let i = 0; i < (channels + 2); i++) {\n            const has = readUint32(reader);\n\r\n            if (has) {\n                const length = readUint32(reader);\n                const pixelDepth = readUint32(reader);\n                const top = readUint32(reader);\n                const left = readUint32(reader);\n                const bottom = readUint32(reader);\n                const right = readUint32(reader);\n                const pixelDepth2 = readUint16(reader);\n                const compressionMode = readUint8(reader); // 1 - zip\n\r\n                // TODO: decompress data ...\n\r\n                skipBytes(reader, length - (4 + 16 + 2 + 1));\n\r\n                console.log('channel', length, pixelDepth, top, left, bottom, right, pixelDepth2, compressionMode);\n            } else {\n                console.log('SKIP');\n            }\n        }\n    }\n\r\n    if (!target.patterns) target.patterns = [];\n\r\n    target.patterns.push({ name, id, colorMode, x, y });\n\r\n    skipBytes(reader, left());\n    */\n}, function (_writer, _target) {\n});\naddHandler('pths', hasKey('pathList'), function (reader, target) {\n    var descriptor = descriptor_1.readVersionAndDescriptor(reader);\n    target.pathList = []; // TODO: read paths (find example with non-empty list)\n    descriptor;\n    // console.log('pths', descriptor); // TODO: remove this\n}, function (writer, _target) {\n    var descriptor = {\n        pathList: [],\n    };\n    descriptor_1.writeVersionAndDescriptor(writer, '', 'pathsDataClass', descriptor);\n});\naddHandler('lyvr', hasKey('version'), function (reader, target) { return target.version = psdReader_1.readUint32(reader); }, function (writer, target) { return psdWriter_1.writeUint32(writer, target.version); });\naddHandler('lrFX', hasKey('effects'), function (reader, target, left) {\n    if (!target.effects) {\n        target.effects = effectsHelpers_1.readEffects(reader);\n    }\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    effectsHelpers_1.writeEffects(writer, target.effects);\n});\nfunction adjustmentType(type) {\n    return function (target) { return !!target.adjustment && target.adjustment.type === type; };\n}\naddHandler('brit', adjustmentType('brightness/contrast'), function (reader, target, left) {\n    if (!target.adjustment) { // ignore if got one from CgEd block\n        target.adjustment = {\n            type: 'brightness/contrast',\n            brightness: psdReader_1.readInt16(reader),\n            contrast: psdReader_1.readInt16(reader),\n            meanValue: psdReader_1.readInt16(reader),\n            labColorOnly: !!psdReader_1.readUint8(reader),\n            useLegacy: true,\n        };\n    }\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var _a;\n    var info = target.adjustment;\n    psdWriter_1.writeInt16(writer, info.brightness || 0);\n    psdWriter_1.writeInt16(writer, info.contrast || 0);\n    psdWriter_1.writeInt16(writer, (_a = info.meanValue) !== null && _a !== void 0 ? _a : 127);\n    psdWriter_1.writeUint8(writer, info.labColorOnly ? 1 : 0);\n    psdWriter_1.writeZeros(writer, 1);\n});\nfunction readLevelsChannel(reader) {\n    var shadowInput = psdReader_1.readInt16(reader);\n    var highlightInput = psdReader_1.readInt16(reader);\n    var shadowOutput = psdReader_1.readInt16(reader);\n    var highlightOutput = psdReader_1.readInt16(reader);\n    var midtoneInput = psdReader_1.readInt16(reader) / 100;\n    return { shadowInput: shadowInput, highlightInput: highlightInput, shadowOutput: shadowOutput, highlightOutput: highlightOutput, midtoneInput: midtoneInput };\n}\nfunction writeLevelsChannel(writer, channel) {\n    psdWriter_1.writeInt16(writer, channel.shadowInput);\n    psdWriter_1.writeInt16(writer, channel.highlightInput);\n    psdWriter_1.writeInt16(writer, channel.shadowOutput);\n    psdWriter_1.writeInt16(writer, channel.highlightOutput);\n    psdWriter_1.writeInt16(writer, Math.round(channel.midtoneInput * 100));\n}\naddHandler('levl', adjustmentType('levels'), function (reader, target, left) {\n    if (psdReader_1.readUint16(reader) !== 2)\n        throw new Error('Invalid levl version');\n    target.adjustment = __assign(__assign({}, target.adjustment), { type: 'levels', rgb: readLevelsChannel(reader), red: readLevelsChannel(reader), green: readLevelsChannel(reader), blue: readLevelsChannel(reader) });\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var info = target.adjustment;\n    var defaultChannel = {\n        shadowInput: 0,\n        highlightInput: 255,\n        shadowOutput: 0,\n        highlightOutput: 255,\n        midtoneInput: 1,\n    };\n    psdWriter_1.writeUint16(writer, 2); // version\n    writeLevelsChannel(writer, info.rgb || defaultChannel);\n    writeLevelsChannel(writer, info.red || defaultChannel);\n    writeLevelsChannel(writer, info.blue || defaultChannel);\n    writeLevelsChannel(writer, info.green || defaultChannel);\n    for (var i = 0; i < 59; i++)\n        writeLevelsChannel(writer, defaultChannel);\n});\nfunction readCurveChannel(reader) {\n    var nodes = psdReader_1.readUint16(reader);\n    var channel = [];\n    for (var j = 0; j < nodes; j++) {\n        var output = psdReader_1.readInt16(reader);\n        var input = psdReader_1.readInt16(reader);\n        channel.push({ input: input, output: output });\n    }\n    return channel;\n}\nfunction writeCurveChannel(writer, channel) {\n    psdWriter_1.writeUint16(writer, channel.length);\n    for (var _i = 0, channel_1 = channel; _i < channel_1.length; _i++) {\n        var n = channel_1[_i];\n        psdWriter_1.writeUint16(writer, n.output);\n        psdWriter_1.writeUint16(writer, n.input);\n    }\n}\naddHandler('curv', adjustmentType('curves'), function (reader, target, left) {\n    psdReader_1.readUint8(reader);\n    if (psdReader_1.readUint16(reader) !== 1)\n        throw new Error('Invalid curv version');\n    psdReader_1.readUint16(reader);\n    var channels = psdReader_1.readUint16(reader);\n    var info = { type: 'curves' };\n    if (channels & 1)\n        info.rgb = readCurveChannel(reader);\n    if (channels & 2)\n        info.red = readCurveChannel(reader);\n    if (channels & 4)\n        info.green = readCurveChannel(reader);\n    if (channels & 8)\n        info.blue = readCurveChannel(reader);\n    target.adjustment = __assign(__assign({}, target.adjustment), info);\n    // ignoring, duplicate information\n    // checkSignature(reader, 'Crv ');\n    // const cVersion = readUint16(reader);\n    // readUint16(reader);\n    // const channelCount = readUint16(reader);\n    // for (let i = 0; i < channelCount; i++) {\n    // \tconst index = readUint16(reader);\n    // \tconst nodes = readUint16(reader);\n    // \tfor (let j = 0; j < nodes; j++) {\n    // \t\tconst output = readInt16(reader);\n    // \t\tconst input = readInt16(reader);\n    // \t}\n    // }\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var info = target.adjustment;\n    var rgb = info.rgb, red = info.red, green = info.green, blue = info.blue;\n    var channels = 0;\n    var channelCount = 0;\n    if (rgb && rgb.length) {\n        channels |= 1;\n        channelCount++;\n    }\n    if (red && red.length) {\n        channels |= 2;\n        channelCount++;\n    }\n    if (green && green.length) {\n        channels |= 4;\n        channelCount++;\n    }\n    if (blue && blue.length) {\n        channels |= 8;\n        channelCount++;\n    }\n    psdWriter_1.writeUint8(writer, 0);\n    psdWriter_1.writeUint16(writer, 1); // version\n    psdWriter_1.writeUint16(writer, 0);\n    psdWriter_1.writeUint16(writer, channels);\n    if (rgb && rgb.length)\n        writeCurveChannel(writer, rgb);\n    if (red && red.length)\n        writeCurveChannel(writer, red);\n    if (green && green.length)\n        writeCurveChannel(writer, green);\n    if (blue && blue.length)\n        writeCurveChannel(writer, blue);\n    psdWriter_1.writeSignature(writer, 'Crv ');\n    psdWriter_1.writeUint16(writer, 4); // version\n    psdWriter_1.writeUint16(writer, 0);\n    psdWriter_1.writeUint16(writer, channelCount);\n    if (rgb && rgb.length) {\n        psdWriter_1.writeUint16(writer, 0);\n        writeCurveChannel(writer, rgb);\n    }\n    if (red && red.length) {\n        psdWriter_1.writeUint16(writer, 1);\n        writeCurveChannel(writer, red);\n    }\n    if (green && green.length) {\n        psdWriter_1.writeUint16(writer, 2);\n        writeCurveChannel(writer, green);\n    }\n    if (blue && blue.length) {\n        psdWriter_1.writeUint16(writer, 3);\n        writeCurveChannel(writer, blue);\n    }\n    psdWriter_1.writeZeros(writer, 2);\n});\naddHandler('expA', adjustmentType('exposure'), function (reader, target, left) {\n    if (psdReader_1.readUint16(reader) !== 1)\n        throw new Error('Invalid expA version');\n    target.adjustment = __assign(__assign({}, target.adjustment), { type: 'exposure', exposure: psdReader_1.readFloat32(reader), offset: psdReader_1.readFloat32(reader), gamma: psdReader_1.readFloat32(reader) });\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var info = target.adjustment;\n    psdWriter_1.writeUint16(writer, 1); // version\n    psdWriter_1.writeFloat32(writer, info.exposure);\n    psdWriter_1.writeFloat32(writer, info.offset);\n    psdWriter_1.writeFloat32(writer, info.gamma);\n    psdWriter_1.writeZeros(writer, 2);\n});\naddHandler('vibA', adjustmentType('vibrance'), function (reader, target, left) {\n    var desc = descriptor_1.readVersionAndDescriptor(reader);\n    target.adjustment = { type: 'vibrance' };\n    if (desc.vibrance !== undefined)\n        target.adjustment.vibrance = desc.vibrance;\n    if (desc.Strt !== undefined)\n        target.adjustment.saturation = desc.Strt;\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var info = target.adjustment;\n    var desc = {};\n    if (info.vibrance !== undefined)\n        desc.vibrance = info.vibrance;\n    if (info.saturation !== undefined)\n        desc.Strt = info.saturation;\n    descriptor_1.writeVersionAndDescriptor(writer, '', 'null', desc);\n});\nfunction readHueChannel(reader) {\n    return {\n        a: psdReader_1.readInt16(reader),\n        b: psdReader_1.readInt16(reader),\n        c: psdReader_1.readInt16(reader),\n        d: psdReader_1.readInt16(reader),\n        hue: psdReader_1.readInt16(reader),\n        saturation: psdReader_1.readInt16(reader),\n        lightness: psdReader_1.readInt16(reader),\n    };\n}\nfunction writeHueChannel(writer, channel) {\n    var c = channel || {};\n    psdWriter_1.writeInt16(writer, c.a || 0);\n    psdWriter_1.writeInt16(writer, c.b || 0);\n    psdWriter_1.writeInt16(writer, c.c || 0);\n    psdWriter_1.writeInt16(writer, c.d || 0);\n    psdWriter_1.writeInt16(writer, c.hue || 0);\n    psdWriter_1.writeInt16(writer, c.saturation || 0);\n    psdWriter_1.writeInt16(writer, c.lightness || 0);\n}\naddHandler('hue2', adjustmentType('hue/saturation'), function (reader, target, left) {\n    if (psdReader_1.readUint16(reader) !== 2)\n        throw new Error('Invalid hue2 version');\n    target.adjustment = __assign(__assign({}, target.adjustment), { type: 'hue/saturation', master: readHueChannel(reader), reds: readHueChannel(reader), yellows: readHueChannel(reader), greens: readHueChannel(reader), cyans: readHueChannel(reader), blues: readHueChannel(reader), magentas: readHueChannel(reader) });\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var info = target.adjustment;\n    psdWriter_1.writeUint16(writer, 2); // version\n    writeHueChannel(writer, info.master);\n    writeHueChannel(writer, info.reds);\n    writeHueChannel(writer, info.yellows);\n    writeHueChannel(writer, info.greens);\n    writeHueChannel(writer, info.cyans);\n    writeHueChannel(writer, info.blues);\n    writeHueChannel(writer, info.magentas);\n});\nfunction readColorBalance(reader) {\n    return {\n        cyanRed: psdReader_1.readInt16(reader),\n        magentaGreen: psdReader_1.readInt16(reader),\n        yellowBlue: psdReader_1.readInt16(reader),\n    };\n}\nfunction writeColorBalance(writer, value) {\n    psdWriter_1.writeInt16(writer, value.cyanRed || 0);\n    psdWriter_1.writeInt16(writer, value.magentaGreen || 0);\n    psdWriter_1.writeInt16(writer, value.yellowBlue || 0);\n}\naddHandler('blnc', adjustmentType('color balance'), function (reader, target, left) {\n    target.adjustment = {\n        type: 'color balance',\n        shadows: readColorBalance(reader),\n        midtones: readColorBalance(reader),\n        highlights: readColorBalance(reader),\n        preserveLuminosity: !!psdReader_1.readUint8(reader),\n    };\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var info = target.adjustment;\n    writeColorBalance(writer, info.shadows || {});\n    writeColorBalance(writer, info.midtones || {});\n    writeColorBalance(writer, info.highlights || {});\n    psdWriter_1.writeUint8(writer, info.preserveLuminosity ? 1 : 0);\n    psdWriter_1.writeZeros(writer, 1);\n});\naddHandler('blwh', adjustmentType('black & white'), function (reader, target, left) {\n    var desc = descriptor_1.readVersionAndDescriptor(reader);\n    target.adjustment = {\n        type: 'black & white',\n        reds: desc['Rd  '],\n        yellows: desc.Yllw,\n        greens: desc['Grn '],\n        cyans: desc['Cyn '],\n        blues: desc['Bl  '],\n        magentas: desc.Mgnt,\n        useTint: !!desc.useTint,\n        presetKind: desc.bwPresetKind,\n        presetFileName: desc.blackAndWhitePresetFileName,\n    };\n    if (desc.tintColor !== undefined)\n        target.adjustment.tintColor = parseColor(desc.tintColor);\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var info = target.adjustment;\n    var desc = {\n        'Rd  ': info.reds || 0,\n        Yllw: info.yellows || 0,\n        'Grn ': info.greens || 0,\n        'Cyn ': info.cyans || 0,\n        'Bl  ': info.blues || 0,\n        Mgnt: info.magentas || 0,\n        useTint: !!info.useTint,\n        tintColor: serializeColor(info.tintColor),\n        bwPresetKind: info.presetKind || 0,\n        blackAndWhitePresetFileName: info.presetFileName || '',\n    };\n    descriptor_1.writeVersionAndDescriptor(writer, '', 'null', desc);\n});\naddHandler('phfl', adjustmentType('photo filter'), function (reader, target, left) {\n    var version = psdReader_1.readUint16(reader);\n    if (version !== 2 && version !== 3)\n        throw new Error('Invalid phfl version');\n    var color;\n    if (version === 2) {\n        color = psdReader_1.readColor(reader);\n    }\n    else { // version 3\n        // TODO: test this, this is probably wrong\n        color = {\n            l: psdReader_1.readInt32(reader) / 100,\n            a: psdReader_1.readInt32(reader) / 100,\n            b: psdReader_1.readInt32(reader) / 100,\n        };\n    }\n    target.adjustment = {\n        type: 'photo filter',\n        color: color,\n        density: psdReader_1.readUint32(reader) / 100,\n        preserveLuminosity: !!psdReader_1.readUint8(reader),\n    };\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var info = target.adjustment;\n    psdWriter_1.writeUint16(writer, 2); // version\n    psdWriter_1.writeColor(writer, info.color || { l: 0, a: 0, b: 0 });\n    psdWriter_1.writeUint32(writer, (info.density || 0) * 100);\n    psdWriter_1.writeUint8(writer, info.preserveLuminosity ? 1 : 0);\n    psdWriter_1.writeZeros(writer, 3);\n});\nfunction readMixrChannel(reader) {\n    var red = psdReader_1.readInt16(reader);\n    var green = psdReader_1.readInt16(reader);\n    var blue = psdReader_1.readInt16(reader);\n    psdReader_1.skipBytes(reader, 2);\n    var constant = psdReader_1.readInt16(reader);\n    return { red: red, green: green, blue: blue, constant: constant };\n}\nfunction writeMixrChannel(writer, channel) {\n    var c = channel || {};\n    psdWriter_1.writeInt16(writer, c.red);\n    psdWriter_1.writeInt16(writer, c.green);\n    psdWriter_1.writeInt16(writer, c.blue);\n    psdWriter_1.writeZeros(writer, 2);\n    psdWriter_1.writeInt16(writer, c.constant);\n}\naddHandler('mixr', adjustmentType('channel mixer'), function (reader, target, left) {\n    if (psdReader_1.readUint16(reader) !== 1)\n        throw new Error('Invalid mixr version');\n    var adjustment = target.adjustment = __assign(__assign({}, target.adjustment), { type: 'channel mixer', monochrome: !!psdReader_1.readUint16(reader) });\n    if (!adjustment.monochrome) {\n        adjustment.red = readMixrChannel(reader);\n        adjustment.green = readMixrChannel(reader);\n        adjustment.blue = readMixrChannel(reader);\n    }\n    adjustment.gray = readMixrChannel(reader);\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var info = target.adjustment;\n    psdWriter_1.writeUint16(writer, 1); // version\n    psdWriter_1.writeUint16(writer, info.monochrome ? 1 : 0);\n    if (info.monochrome) {\n        writeMixrChannel(writer, info.gray);\n        psdWriter_1.writeZeros(writer, 3 * 5 * 2);\n    }\n    else {\n        writeMixrChannel(writer, info.red);\n        writeMixrChannel(writer, info.green);\n        writeMixrChannel(writer, info.blue);\n        writeMixrChannel(writer, info.gray);\n    }\n});\nvar colorLookupType = helpers_1.createEnum('colorLookupType', '3DLUT', {\n    '3dlut': '3DLUT',\n    abstractProfile: 'abstractProfile',\n    deviceLinkProfile: 'deviceLinkProfile',\n});\nvar LUTFormatType = helpers_1.createEnum('LUTFormatType', 'look', {\n    look: 'LUTFormatLOOK',\n    cube: 'LUTFormatCUBE',\n    '3dl': 'LUTFormat3DL',\n});\nvar colorLookupOrder = helpers_1.createEnum('colorLookupOrder', 'rgb', {\n    rgb: 'rgbOrder',\n    bgr: 'bgrOrder',\n});\naddHandler('clrL', adjustmentType('color lookup'), function (reader, target, left) {\n    if (psdReader_1.readUint16(reader) !== 1)\n        throw new Error('Invalid clrL version');\n    var desc = descriptor_1.readVersionAndDescriptor(reader);\n    target.adjustment = { type: 'color lookup' };\n    var info = target.adjustment;\n    if (desc.lookupType !== undefined)\n        info.lookupType = colorLookupType.decode(desc.lookupType);\n    if (desc['Nm  '] !== undefined)\n        info.name = desc['Nm  '];\n    if (desc.Dthr !== undefined)\n        info.dither = desc.Dthr;\n    if (desc.profile !== undefined)\n        info.profile = desc.profile;\n    if (desc.LUTFormat !== undefined)\n        info.lutFormat = LUTFormatType.decode(desc.LUTFormat);\n    if (desc.dataOrder !== undefined)\n        info.dataOrder = colorLookupOrder.decode(desc.dataOrder);\n    if (desc.tableOrder !== undefined)\n        info.tableOrder = colorLookupOrder.decode(desc.tableOrder);\n    if (desc.LUT3DFileData !== undefined)\n        info.lut3DFileData = desc.LUT3DFileData;\n    if (desc.LUT3DFileName !== undefined)\n        info.lut3DFileName = desc.LUT3DFileName;\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var info = target.adjustment;\n    var desc = {};\n    if (info.lookupType !== undefined)\n        desc.lookupType = colorLookupType.encode(info.lookupType);\n    if (info.name !== undefined)\n        desc['Nm  '] = info.name;\n    if (info.dither !== undefined)\n        desc.Dthr = info.dither;\n    if (info.profile !== undefined)\n        desc.profile = info.profile;\n    if (info.lutFormat !== undefined)\n        desc.LUTFormat = LUTFormatType.encode(info.lutFormat);\n    if (info.dataOrder !== undefined)\n        desc.dataOrder = colorLookupOrder.encode(info.dataOrder);\n    if (info.tableOrder !== undefined)\n        desc.tableOrder = colorLookupOrder.encode(info.tableOrder);\n    if (info.lut3DFileData !== undefined)\n        desc.LUT3DFileData = info.lut3DFileData;\n    if (info.lut3DFileName !== undefined)\n        desc.LUT3DFileName = info.lut3DFileName;\n    psdWriter_1.writeUint16(writer, 1); // version\n    descriptor_1.writeVersionAndDescriptor(writer, '', 'null', desc);\n});\naddHandler('nvrt', adjustmentType('invert'), function (reader, target, left) {\n    target.adjustment = { type: 'invert' };\n    psdReader_1.skipBytes(reader, left());\n}, function () {\n    // nothing to write here\n});\naddHandler('post', adjustmentType('posterize'), function (reader, target, left) {\n    target.adjustment = {\n        type: 'posterize',\n        levels: psdReader_1.readUint16(reader),\n    };\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var _a;\n    var info = target.adjustment;\n    psdWriter_1.writeUint16(writer, (_a = info.levels) !== null && _a !== void 0 ? _a : 4);\n    psdWriter_1.writeZeros(writer, 2);\n});\naddHandler('thrs', adjustmentType('threshold'), function (reader, target, left) {\n    target.adjustment = {\n        type: 'threshold',\n        level: psdReader_1.readUint16(reader),\n    };\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var _a;\n    var info = target.adjustment;\n    psdWriter_1.writeUint16(writer, (_a = info.level) !== null && _a !== void 0 ? _a : 128);\n    psdWriter_1.writeZeros(writer, 2);\n});\nvar grdmColorModels = ['', '', '', 'rgb', 'hsb', '', 'lab'];\naddHandler('grdm', adjustmentType('gradient map'), function (reader, target, left) {\n    if (psdReader_1.readUint16(reader) !== 1)\n        throw new Error('Invalid grdm version');\n    var info = {\n        type: 'gradient map',\n        gradientType: 'solid',\n    };\n    info.reverse = !!psdReader_1.readUint8(reader);\n    info.dither = !!psdReader_1.readUint8(reader);\n    info.name = psdReader_1.readUnicodeString(reader);\n    info.colorStops = [];\n    info.opacityStops = [];\n    var stopsCount = psdReader_1.readUint16(reader);\n    for (var i = 0; i < stopsCount; i++) {\n        info.colorStops.push({\n            location: psdReader_1.readUint32(reader),\n            midpoint: psdReader_1.readUint32(reader) / 100,\n            color: psdReader_1.readColor(reader),\n        });\n        psdReader_1.skipBytes(reader, 2);\n    }\n    var opacityStopsCount = psdReader_1.readUint16(reader);\n    for (var i = 0; i < opacityStopsCount; i++) {\n        info.opacityStops.push({\n            location: psdReader_1.readUint32(reader),\n            midpoint: psdReader_1.readUint32(reader) / 100,\n            opacity: psdReader_1.readUint16(reader) / 0xff,\n        });\n    }\n    var expansionCount = psdReader_1.readUint16(reader);\n    if (expansionCount !== 2)\n        throw new Error('Invalid grdm expansion count');\n    var interpolation = psdReader_1.readUint16(reader);\n    info.smoothness = interpolation / 4096;\n    var length = psdReader_1.readUint16(reader);\n    if (length !== 32)\n        throw new Error('Invalid grdm length');\n    info.gradientType = psdReader_1.readUint16(reader) ? 'noise' : 'solid';\n    info.randomSeed = psdReader_1.readUint32(reader);\n    info.addTransparency = !!psdReader_1.readUint16(reader);\n    info.restrictColors = !!psdReader_1.readUint16(reader);\n    info.roughness = psdReader_1.readUint32(reader) / 4096;\n    info.colorModel = (grdmColorModels[psdReader_1.readUint16(reader)] || 'rgb');\n    info.min = [\n        psdReader_1.readUint16(reader) / 0x8000,\n        psdReader_1.readUint16(reader) / 0x8000,\n        psdReader_1.readUint16(reader) / 0x8000,\n        psdReader_1.readUint16(reader) / 0x8000,\n    ];\n    info.max = [\n        psdReader_1.readUint16(reader) / 0x8000,\n        psdReader_1.readUint16(reader) / 0x8000,\n        psdReader_1.readUint16(reader) / 0x8000,\n        psdReader_1.readUint16(reader) / 0x8000,\n    ];\n    psdReader_1.skipBytes(reader, left());\n    for (var _i = 0, _a = info.colorStops; _i < _a.length; _i++) {\n        var s = _a[_i];\n        s.location /= interpolation;\n    }\n    for (var _b = 0, _c = info.opacityStops; _b < _c.length; _b++) {\n        var s = _c[_b];\n        s.location /= interpolation;\n    }\n    target.adjustment = info;\n}, function (writer, target) {\n    var _a, _b, _c;\n    var info = target.adjustment;\n    psdWriter_1.writeUint16(writer, 1); // version\n    psdWriter_1.writeUint8(writer, info.reverse ? 1 : 0);\n    psdWriter_1.writeUint8(writer, info.dither ? 1 : 0);\n    psdWriter_1.writeUnicodeStringWithPadding(writer, info.name || '');\n    psdWriter_1.writeUint16(writer, info.colorStops && info.colorStops.length || 0);\n    var interpolation = Math.round(((_a = info.smoothness) !== null && _a !== void 0 ? _a : 1) * 4096);\n    for (var _i = 0, _d = info.colorStops || []; _i < _d.length; _i++) {\n        var s = _d[_i];\n        psdWriter_1.writeUint32(writer, Math.round(s.location * interpolation));\n        psdWriter_1.writeUint32(writer, Math.round(s.midpoint * 100));\n        psdWriter_1.writeColor(writer, s.color);\n        psdWriter_1.writeZeros(writer, 2);\n    }\n    psdWriter_1.writeUint16(writer, info.opacityStops && info.opacityStops.length || 0);\n    for (var _e = 0, _f = info.opacityStops || []; _e < _f.length; _e++) {\n        var s = _f[_e];\n        psdWriter_1.writeUint32(writer, Math.round(s.location * interpolation));\n        psdWriter_1.writeUint32(writer, Math.round(s.midpoint * 100));\n        psdWriter_1.writeUint16(writer, Math.round(s.opacity * 0xff));\n    }\n    psdWriter_1.writeUint16(writer, 2); // expansion count\n    psdWriter_1.writeUint16(writer, interpolation);\n    psdWriter_1.writeUint16(writer, 32); // length\n    psdWriter_1.writeUint16(writer, info.gradientType === 'noise' ? 1 : 0);\n    psdWriter_1.writeUint32(writer, info.randomSeed || 0);\n    psdWriter_1.writeUint16(writer, info.addTransparency ? 1 : 0);\n    psdWriter_1.writeUint16(writer, info.restrictColors ? 1 : 0);\n    psdWriter_1.writeUint32(writer, Math.round(((_b = info.roughness) !== null && _b !== void 0 ? _b : 1) * 4096));\n    var colorModel = grdmColorModels.indexOf((_c = info.colorModel) !== null && _c !== void 0 ? _c : 'rgb');\n    psdWriter_1.writeUint16(writer, colorModel === -1 ? 3 : colorModel);\n    for (var i = 0; i < 4; i++)\n        psdWriter_1.writeUint16(writer, Math.round((info.min && info.min[i] || 0) * 0x8000));\n    for (var i = 0; i < 4; i++)\n        psdWriter_1.writeUint16(writer, Math.round((info.max && info.max[i] || 0) * 0x8000));\n    psdWriter_1.writeZeros(writer, 4);\n});\nfunction readSelectiveColors(reader) {\n    return {\n        c: psdReader_1.readInt16(reader),\n        m: psdReader_1.readInt16(reader),\n        y: psdReader_1.readInt16(reader),\n        k: psdReader_1.readInt16(reader),\n    };\n}\nfunction writeSelectiveColors(writer, cmyk) {\n    var c = cmyk || {};\n    psdWriter_1.writeInt16(writer, c.c);\n    psdWriter_1.writeInt16(writer, c.m);\n    psdWriter_1.writeInt16(writer, c.y);\n    psdWriter_1.writeInt16(writer, c.k);\n}\naddHandler('selc', adjustmentType('selective color'), function (reader, target) {\n    if (psdReader_1.readUint16(reader) !== 1)\n        throw new Error('Invalid selc version');\n    var mode = psdReader_1.readUint16(reader) ? 'absolute' : 'relative';\n    psdReader_1.skipBytes(reader, 8);\n    target.adjustment = {\n        type: 'selective color',\n        mode: mode,\n        reds: readSelectiveColors(reader),\n        yellows: readSelectiveColors(reader),\n        greens: readSelectiveColors(reader),\n        cyans: readSelectiveColors(reader),\n        blues: readSelectiveColors(reader),\n        magentas: readSelectiveColors(reader),\n        whites: readSelectiveColors(reader),\n        neutrals: readSelectiveColors(reader),\n        blacks: readSelectiveColors(reader),\n    };\n}, function (writer, target) {\n    var info = target.adjustment;\n    psdWriter_1.writeUint16(writer, 1); // version\n    psdWriter_1.writeUint16(writer, info.mode === 'absolute' ? 1 : 0);\n    psdWriter_1.writeZeros(writer, 8);\n    writeSelectiveColors(writer, info.reds);\n    writeSelectiveColors(writer, info.yellows);\n    writeSelectiveColors(writer, info.greens);\n    writeSelectiveColors(writer, info.cyans);\n    writeSelectiveColors(writer, info.blues);\n    writeSelectiveColors(writer, info.magentas);\n    writeSelectiveColors(writer, info.whites);\n    writeSelectiveColors(writer, info.neutrals);\n    writeSelectiveColors(writer, info.blacks);\n});\naddHandler('CgEd', function (target) {\n    var a = target.adjustment;\n    if (!a)\n        return false;\n    return (a.type === 'brightness/contrast' && !a.useLegacy) ||\n        ((a.type === 'levels' || a.type === 'curves' || a.type === 'exposure' || a.type === 'channel mixer' ||\n            a.type === 'hue/saturation') && a.presetFileName !== undefined);\n}, function (reader, target, left) {\n    var desc = descriptor_1.readVersionAndDescriptor(reader);\n    if (desc.Vrsn !== 1)\n        throw new Error('Invalid CgEd version');\n    // this section can specify preset file name for other adjustment types\n    if ('presetFileName' in desc) {\n        target.adjustment = __assign(__assign({}, target.adjustment), { presetKind: desc.presetKind, presetFileName: desc.presetFileName });\n    }\n    else if ('curvesPresetFileName' in desc) {\n        target.adjustment = __assign(__assign({}, target.adjustment), { presetKind: desc.curvesPresetKind, presetFileName: desc.curvesPresetFileName });\n    }\n    else if ('mixerPresetFileName' in desc) {\n        target.adjustment = __assign(__assign({}, target.adjustment), { presetKind: desc.mixerPresetKind, presetFileName: desc.mixerPresetFileName });\n    }\n    else {\n        target.adjustment = {\n            type: 'brightness/contrast',\n            brightness: desc.Brgh,\n            contrast: desc.Cntr,\n            meanValue: desc.means,\n            useLegacy: !!desc.useLegacy,\n            labColorOnly: !!desc['Lab '],\n            auto: !!desc.Auto,\n        };\n    }\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var _a, _b, _c, _d;\n    var info = target.adjustment;\n    if (info.type === 'levels' || info.type === 'exposure' || info.type === 'hue/saturation') {\n        var desc = {\n            Vrsn: 1,\n            presetKind: (_a = info.presetKind) !== null && _a !== void 0 ? _a : 1,\n            presetFileName: info.presetFileName || '',\n        };\n        descriptor_1.writeVersionAndDescriptor(writer, '', 'null', desc);\n    }\n    else if (info.type === 'curves') {\n        var desc = {\n            Vrsn: 1,\n            curvesPresetKind: (_b = info.presetKind) !== null && _b !== void 0 ? _b : 1,\n            curvesPresetFileName: info.presetFileName || '',\n        };\n        descriptor_1.writeVersionAndDescriptor(writer, '', 'null', desc);\n    }\n    else if (info.type === 'channel mixer') {\n        var desc = {\n            Vrsn: 1,\n            mixerPresetKind: (_c = info.presetKind) !== null && _c !== void 0 ? _c : 1,\n            mixerPresetFileName: info.presetFileName || '',\n        };\n        descriptor_1.writeVersionAndDescriptor(writer, '', 'null', desc);\n    }\n    else if (info.type === 'brightness/contrast') {\n        var desc = {\n            Vrsn: 1,\n            Brgh: info.brightness || 0,\n            Cntr: info.contrast || 0,\n            means: (_d = info.meanValue) !== null && _d !== void 0 ? _d : 127,\n            'Lab ': !!info.labColorOnly,\n            useLegacy: !!info.useLegacy,\n            Auto: !!info.auto,\n        };\n        descriptor_1.writeVersionAndDescriptor(writer, '', 'null', desc);\n    }\n    else {\n        throw new Error('Unhandled CgEd case');\n    }\n});\naddHandler('Txt2', hasKey('engineData'), function (reader, target, left) {\n    var data = psdReader_1.readBytes(reader, left());\n    target.engineData = base64_js_1.fromByteArray(data);\n    // const engineData = parseEngineData(data);\n    // console.log(require('util').inspect(engineData, false, 99, true));\n    // require('fs').writeFileSync('resources/engineData2Simple.txt', require('util').inspect(engineData, false, 99, false), 'utf8');\n    // require('fs').writeFileSync('test_data.json', JSON.stringify(ed, null, 2), 'utf8');\n}, function (writer, target) {\n    var buffer = base64_js_1.toByteArray(target.engineData);\n    psdWriter_1.writeBytes(writer, buffer);\n});\naddHandler('FMsk', hasKey('filterMask'), function (reader, target) {\n    target.filterMask = {\n        colorSpace: psdReader_1.readColor(reader),\n        opacity: psdReader_1.readUint16(reader) / 0xff,\n    };\n}, function (writer, target) {\n    var _a;\n    psdWriter_1.writeColor(writer, target.filterMask.colorSpace);\n    psdWriter_1.writeUint16(writer, helpers_1.clamp((_a = target.filterMask.opacity) !== null && _a !== void 0 ? _a : 1, 0, 1) * 0xff);\n});\naddHandler('vstk', hasKey('vectorStroke'), function (reader, target, left) {\n    var descriptor = descriptor_1.readVersionAndDescriptor(reader);\n    target.vectorStroke = {\n        strokeEnabled: descriptor.strokeEnabled,\n        fillEnabled: descriptor.fillEnabled,\n        lineWidth: parseUnits(descriptor.strokeStyleLineWidth),\n        lineDashOffset: parseUnits(descriptor.strokeStyleLineDashOffset),\n        miterLimit: descriptor.strokeStyleMiterLimit,\n        lineCapType: strokeStyleLineCapType.decode(descriptor.strokeStyleLineCapType),\n        lineJoinType: strokeStyleLineJoinType.decode(descriptor.strokeStyleLineJoinType),\n        lineAlignment: strokeStyleLineAlignment.decode(descriptor.strokeStyleLineAlignment),\n        scaleLock: descriptor.strokeStyleScaleLock,\n        strokeAdjust: descriptor.strokeStyleStrokeAdjust,\n        lineDashSet: descriptor.strokeStyleLineDashSet.map(parseUnits),\n        blendMode: BlnM.decode(descriptor.strokeStyleBlendMode),\n        opacity: parsePercent(descriptor.strokeStyleOpacity),\n        content: parseVectorContent(descriptor.strokeStyleContent),\n        resolution: descriptor.strokeStyleResolution,\n    };\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var _a, _b, _c;\n    var stroke = target.vectorStroke;\n    var descriptor = {\n        strokeStyleVersion: 2,\n        strokeEnabled: !!stroke.strokeEnabled,\n        fillEnabled: !!stroke.fillEnabled,\n        strokeStyleLineWidth: stroke.lineWidth || { value: 3, units: 'Points' },\n        strokeStyleLineDashOffset: stroke.lineDashOffset || { value: 0, units: 'Points' },\n        strokeStyleMiterLimit: (_a = stroke.miterLimit) !== null && _a !== void 0 ? _a : 100,\n        strokeStyleLineCapType: strokeStyleLineCapType.encode(stroke.lineCapType),\n        strokeStyleLineJoinType: strokeStyleLineJoinType.encode(stroke.lineJoinType),\n        strokeStyleLineAlignment: strokeStyleLineAlignment.encode(stroke.lineAlignment),\n        strokeStyleScaleLock: !!stroke.scaleLock,\n        strokeStyleStrokeAdjust: !!stroke.strokeAdjust,\n        strokeStyleLineDashSet: stroke.lineDashSet || [],\n        strokeStyleBlendMode: BlnM.encode(stroke.blendMode),\n        strokeStyleOpacity: unitsPercent((_b = stroke.opacity) !== null && _b !== void 0 ? _b : 1),\n        strokeStyleContent: serializeVectorContent(stroke.content || { type: 'color', color: { r: 0, g: 0, b: 0 } }).descriptor,\n        strokeStyleResolution: (_c = stroke.resolution) !== null && _c !== void 0 ? _c : 72,\n    };\n    descriptor_1.writeVersionAndDescriptor(writer, '', 'strokeStyle', descriptor);\n});\naddHandler('lfx2', hasKey('effects'), function (reader, target, left, _, options) {\n    var log = !!options.logMissingFeatures;\n    var version = psdReader_1.readUint32(reader);\n    if (version !== 0)\n        throw new Error(\"Invalid lfx2 version\");\n    var info = descriptor_1.readVersionAndDescriptor(reader);\n    target.effects = {}; // discard if read in 'lrFX' section\n    var effects = target.effects;\n    if (!info.masterFXSwitch)\n        effects.disabled = true;\n    if (info['Scl '])\n        effects.scale = parsePercent(info['Scl ']);\n    if (info.DrSh)\n        effects.dropShadow = parseEffectObject(info.DrSh, log);\n    if (info.IrSh)\n        effects.innerShadow = parseEffectObject(info.IrSh, log);\n    if (info.OrGl)\n        effects.outerGlow = parseEffectObject(info.OrGl, log);\n    if (info.IrGl)\n        effects.innerGlow = parseEffectObject(info.IrGl, log);\n    if (info.ebbl)\n        effects.bevel = parseEffectObject(info.ebbl, log);\n    if (info.SoFi)\n        effects.solidFill = parseEffectObject(info.SoFi, log);\n    if (info.patternFill)\n        effects.patternOverlay = parseEffectObject(info.patternFill, log);\n    if (info.GrFl)\n        effects.gradientOverlay = parseEffectObject(info.GrFl, log);\n    if (info.ChFX)\n        effects.satin = parseEffectObject(info.ChFX, log);\n    if (info.FrFX) {\n        effects.stroke = {\n            enabled: !!info.FrFX.enab,\n            position: FStl.decode(info.FrFX.Styl),\n            fillType: FrFl.decode(info.FrFX.PntT),\n            blendMode: BlnM.decode(info.FrFX['Md  ']),\n            opacity: parsePercent(info.FrFX.Opct),\n            size: parseUnits(info.FrFX['Sz  ']),\n        };\n        if (info.FrFX['Clr '])\n            effects.stroke.color = parseColor(info.FrFX['Clr ']);\n        if (info.FrFX.Grad)\n            effects.stroke.gradient = parseGradientContent(info.FrFX);\n        if (info.FrFX.Ptrn)\n            effects.stroke.pattern = parsePatternContent(info.FrFX);\n    }\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target, _, options) {\n    var _a;\n    var log = !!options.logMissingFeatures;\n    var effects = target.effects;\n    var info = {\n        masterFXSwitch: !effects.disabled,\n        'Scl ': unitsPercent((_a = effects.scale) !== null && _a !== void 0 ? _a : 1),\n    };\n    if (effects.dropShadow)\n        info.DrSh = serializeEffectObject(effects.dropShadow, 'dropShadow', log);\n    if (effects.innerShadow)\n        info.IrSh = serializeEffectObject(effects.innerShadow, 'innerShadow', log);\n    if (effects.outerGlow)\n        info.OrGl = serializeEffectObject(effects.outerGlow, 'outerGlow', log);\n    if (effects.innerGlow)\n        info.IrGl = serializeEffectObject(effects.innerGlow, 'innerGlow', log);\n    if (effects.bevel)\n        info.ebbl = serializeEffectObject(effects.bevel, 'bevel', log);\n    if (effects.solidFill)\n        info.SoFi = serializeEffectObject(effects.solidFill, 'solidFill', log);\n    if (effects.patternOverlay)\n        info.patternFill = serializeEffectObject(effects.patternOverlay, 'patternOverlay', log);\n    if (effects.gradientOverlay)\n        info.GrFl = serializeEffectObject(effects.gradientOverlay, 'gradientOverlay', log);\n    if (effects.satin)\n        info.ChFX = serializeEffectObject(effects.satin, 'satin', log);\n    var stroke = effects.stroke;\n    if (stroke) {\n        info.FrFX = {\n            enab: !!stroke.enabled,\n            Styl: FStl.encode(stroke.position),\n            PntT: FrFl.encode(stroke.fillType),\n            'Md  ': BlnM.encode(stroke.blendMode),\n            Opct: unitsPercent(stroke.opacity),\n            'Sz  ': unitsValue(stroke.size, 'size'),\n        };\n        if (stroke.color)\n            info.FrFX['Clr '] = serializeColor(stroke.color);\n        if (stroke.gradient)\n            info.FrFX = __assign(__assign({}, info.FrFX), serializeGradientContent(stroke.gradient));\n        if (stroke.pattern)\n            info.FrFX = __assign(__assign({}, info.FrFX), serializePatternContent(stroke.pattern));\n    }\n    psdWriter_1.writeUint32(writer, 0); // version\n    descriptor_1.writeVersionAndDescriptor(writer, '', 'null', info);\n});\nfunction parseGradient(grad) {\n    if (grad.GrdF === 'GrdF.CstS') {\n        var samples_1 = grad.Intr || 4096;\n        return {\n            type: 'solid',\n            name: grad['Nm  '],\n            smoothness: grad.Intr / 4096,\n            colorStops: grad.Clrs.map(function (s) { return ({\n                color: parseColor(s['Clr ']),\n                location: s.Lctn / samples_1,\n                midpoint: s.Mdpn / 100,\n            }); }),\n            opacityStops: grad.Trns.map(function (s) { return ({\n                opacity: parsePercent(s.Opct),\n                location: s.Lctn / samples_1,\n                midpoint: s.Mdpn / 100,\n            }); }),\n        };\n    }\n    else {\n        return {\n            type: 'noise',\n            name: grad['Nm  '],\n            roughness: grad.Smth / 4096,\n            colorModel: exports.ClrS.decode(grad.ClrS),\n            randomSeed: grad.RndS,\n            restrictColors: !!grad.VctC,\n            addTransparency: !!grad.ShTr,\n            min: grad['Mnm '].map(function (x) { return x / 100; }),\n            max: grad['Mxm '].map(function (x) { return x / 100; }),\n        };\n    }\n}\nfunction serializeGradient(grad) {\n    var _a, _b;\n    if (grad.type === 'solid') {\n        var samples_2 = Math.round(((_a = grad.smoothness) !== null && _a !== void 0 ? _a : 1) * 4096);\n        return {\n            GrdF: 'GrdF.CstS',\n            'Nm  ': grad.name,\n            Intr: samples_2,\n            Clrs: grad.colorStops.map(function (s) {\n                var _a;\n                return ({\n                    'Clr ': serializeColor(s.color),\n                    Type: 'Clry.UsrS',\n                    Lctn: Math.round(s.location * samples_2),\n                    Mdpn: Math.round(((_a = s.midpoint) !== null && _a !== void 0 ? _a : 0.5) * 100),\n                });\n            }),\n            Trns: grad.opacityStops.map(function (s) {\n                var _a;\n                return ({\n                    Opct: unitsPercent(s.opacity),\n                    Lctn: Math.round(s.location * samples_2),\n                    Mdpn: Math.round(((_a = s.midpoint) !== null && _a !== void 0 ? _a : 0.5) * 100),\n                });\n            }),\n        };\n    }\n    else {\n        return {\n            GrdF: 'GrdF.ClNs',\n            'Nm  ': grad.name,\n            ShTr: !!grad.addTransparency,\n            VctC: !!grad.restrictColors,\n            ClrS: exports.ClrS.encode(grad.colorModel),\n            RndS: grad.randomSeed || 0,\n            Smth: Math.round(((_b = grad.roughness) !== null && _b !== void 0 ? _b : 1) * 4096),\n            'Mnm ': (grad.min || [0, 0, 0, 0]).map(function (x) { return x * 100; }),\n            'Mxm ': (grad.max || [1, 1, 1, 1]).map(function (x) { return x * 100; }),\n        };\n    }\n}\nfunction parseGradientContent(descriptor) {\n    var result = parseGradient(descriptor.Grad);\n    result.style = GrdT.decode(descriptor.Type);\n    if (descriptor.Dthr !== undefined)\n        result.dither = descriptor.Dthr;\n    if (descriptor.Rvrs !== undefined)\n        result.reverse = descriptor.Rvrs;\n    if (descriptor.Angl !== undefined)\n        result.angle = parseAngle(descriptor.Angl);\n    if (descriptor['Scl '] !== undefined)\n        result.scale = parsePercent(descriptor['Scl ']);\n    if (descriptor.Algn !== undefined)\n        result.align = descriptor.Algn;\n    if (descriptor.Ofst !== undefined) {\n        result.offset = {\n            x: parsePercent(descriptor.Ofst.Hrzn),\n            y: parsePercent(descriptor.Ofst.Vrtc)\n        };\n    }\n    return result;\n}\nfunction parsePatternContent(descriptor) {\n    var result = {\n        name: descriptor.Ptrn['Nm  '],\n        id: descriptor.Ptrn.Idnt,\n    };\n    if (descriptor.Lnkd !== undefined)\n        result.linked = descriptor.Lnkd;\n    if (descriptor.phase !== undefined)\n        result.phase = { x: descriptor.phase.Hrzn, y: descriptor.phase.Vrtc };\n    return result;\n}\nfunction parseVectorContent(descriptor) {\n    if ('Grad' in descriptor) {\n        return parseGradientContent(descriptor);\n    }\n    else if ('Ptrn' in descriptor) {\n        return __assign({ type: 'pattern' }, parsePatternContent(descriptor));\n    }\n    else if ('Clr ' in descriptor) {\n        return { type: 'color', color: parseColor(descriptor['Clr ']) };\n    }\n    else {\n        throw new Error('Invalid vector content');\n    }\n}\nfunction serializeGradientContent(content) {\n    var result = {\n        Grad: serializeGradient(content),\n        Type: GrdT.encode(content.style),\n    };\n    if (content.dither !== undefined)\n        result.Dthr = content.dither;\n    if (content.reverse !== undefined)\n        result.Rvrs = content.reverse;\n    if (content.angle !== undefined)\n        result.Angl = unitsAngle(content.angle);\n    if (content.scale !== undefined)\n        result['Scl '] = unitsPercent(content.scale);\n    if (content.align !== undefined)\n        result.Algn = content.align;\n    if (content.offset) {\n        result.Ofst = {\n            Hrzn: unitsPercent(content.offset.x),\n            Vrtc: unitsPercent(content.offset.y),\n        };\n    }\n    return result;\n}\nfunction serializePatternContent(content) {\n    var result = {\n        Ptrn: {\n            'Nm  ': content.name || '',\n            Idnt: content.id || '',\n        }\n    };\n    if (content.linked !== undefined)\n        result.Lnkd = !!content.linked;\n    if (content.phase !== undefined)\n        result.phase = { Hrzn: content.phase.x, Vrtc: content.phase.y };\n    return result;\n}\nfunction serializeVectorContent(content) {\n    if (content.type === 'color') {\n        return { key: 'SoCo', descriptor: { 'Clr ': serializeColor(content.color) } };\n    }\n    else if (content.type === 'pattern') {\n        return { key: 'PtFl', descriptor: serializePatternContent(content) };\n    }\n    else {\n        return { key: 'GdFl', descriptor: serializeGradientContent(content) };\n    }\n}\nfunction parseAngle(x) {\n    if (x === undefined)\n        return 0;\n    if (x.units !== 'Angle')\n        throw new Error(\"Invalid units: \" + x.units);\n    return x.value;\n}\nfunction parsePercent(x) {\n    if (x === undefined)\n        return 1;\n    if (x.units !== 'Percent')\n        throw new Error(\"Invalid units: \" + x.units);\n    return x.value / 100;\n}\nfunction parseUnits(_a) {\n    var units = _a.units, value = _a.value;\n    if (units !== 'Pixels' && units !== 'Millimeters' && units !== 'Points' && units !== 'None' &&\n        units !== 'Picas' && units !== 'Inches' && units !== 'Centimeters') {\n        throw new Error(\"Invalid units: \" + JSON.stringify({ units: units, value: value }));\n    }\n    return { value: value, units: units };\n}\nfunction unitsAngle(value) {\n    return { units: 'Angle', value: value || 0 };\n}\nfunction unitsPercent(value) {\n    return { units: 'Percent', value: Math.round(helpers_1.clamp(value || 0, 0, 1) * 100) };\n}\nfunction unitsValue(x, key) {\n    if (x == null)\n        return { units: 'Pixels', value: 0 };\n    if (typeof x !== 'object')\n        throw new Error(\"Invalid value: \" + JSON.stringify(x) + \" (key: \" + key + \") (should have value and units)\");\n    var units = x.units, value = x.value;\n    if (typeof value !== 'number')\n        throw new Error(\"Invalid value in \" + JSON.stringify(x) + \" (key: \" + key + \")\");\n    if (units !== 'Pixels' && units !== 'Millimeters' && units !== 'Points' && units !== 'None' &&\n        units !== 'Picas' && units !== 'Inches' && units !== 'Centimeters') {\n        throw new Error(\"Invalid units in \" + JSON.stringify(x) + \" (key: \" + key + \")\");\n    }\n    return { units: units, value: value };\n}\nfunction parseColor(color) {\n    if ('H   ' in color) {\n        return { h: parsePercent(color['H   ']), s: color.Strt, b: color.Brgh };\n    }\n    else if ('Rd  ' in color) {\n        return { r: color['Rd  '], g: color['Grn '], b: color['Bl  '] };\n    }\n    else if ('Cyn ' in color) {\n        return { c: color['Cyn '], m: color.Mgnt, y: color['Ylw '], k: color.Blck };\n    }\n    else if ('Gry ' in color) {\n        return { k: color['Gry '] };\n    }\n    else if ('Lmnc' in color) {\n        return { l: color.Lmnc, a: color['A   '], b: color['B   '] };\n    }\n    else {\n        throw new Error('Unsupported color descriptor');\n    }\n}\nfunction serializeColor(color) {\n    if (!color) {\n        return { 'Rd  ': 0, 'Grn ': 0, 'Bl  ': 0 };\n    }\n    else if ('r' in color) {\n        return { 'Rd  ': color.r || 0, 'Grn ': color.g || 0, 'Bl  ': color.b || 0 };\n    }\n    else if ('h' in color) {\n        return { 'H   ': unitsPercent(color.h), Strt: color.s || 0, Brgh: color.b || 0 };\n    }\n    else if ('c' in color) {\n        return { 'Cyn ': color.c || 0, Mgnt: color.m || 0, 'Ylw ': color.y || 0, Blck: color.k || 0 };\n    }\n    else if ('l' in color) {\n        return { Lmnc: color.l || 0, 'A   ': color.a || 0, 'B   ': color.b || 0 };\n    }\n    else if ('k' in color) {\n        return { 'Gry ': color.k };\n    }\n    else {\n        throw new Error('Invalid color value');\n    }\n}\nfunction parseEffectObject(obj, reportErrors) {\n    var result = {};\n    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var val = obj[key];\n        switch (key) {\n            case 'enab':\n                result.enabled = !!val;\n                break;\n            case 'uglg':\n                result.useGlobalLight = !!val;\n                break;\n            case 'AntA':\n                result.antialiased = !!val;\n                break;\n            case 'Algn':\n                result.align = !!val;\n                break;\n            case 'Dthr':\n                result.dither = !!val;\n                break;\n            case 'Invr':\n                result.invert = !!val;\n                break;\n            case 'Rvrs':\n                result.reverse = !!val;\n                break;\n            case 'Clr ':\n                result.color = parseColor(val);\n                break;\n            case 'hglC':\n                result.highlightColor = parseColor(val);\n                break;\n            case 'sdwC':\n                result.shadowColor = parseColor(val);\n                break;\n            case 'Styl':\n                result.position = FStl.decode(val);\n                break;\n            case 'Md  ':\n                result.blendMode = BlnM.decode(val);\n                break;\n            case 'hglM':\n                result.highlightBlendMode = BlnM.decode(val);\n                break;\n            case 'sdwM':\n                result.shadowBlendMode = BlnM.decode(val);\n                break;\n            case 'bvlS':\n                result.style = BESl.decode(val);\n                break;\n            case 'bvlD':\n                result.direction = BESs.decode(val);\n                break;\n            case 'bvlT':\n                result.technique = bvlT.decode(val);\n                break;\n            case 'GlwT':\n                result.technique = BETE.decode(val);\n                break;\n            case 'glwS':\n                result.source = IGSr.decode(val);\n                break;\n            case 'Type':\n                result.type = GrdT.decode(val);\n                break;\n            case 'Opct':\n                result.opacity = parsePercent(val);\n                break;\n            case 'hglO':\n                result.highlightOpacity = parsePercent(val);\n                break;\n            case 'sdwO':\n                result.shadowOpacity = parsePercent(val);\n                break;\n            case 'lagl':\n                result.angle = parseAngle(val);\n                break;\n            case 'Angl':\n                result.angle = parseAngle(val);\n                break;\n            case 'Lald':\n                result.altitude = parseAngle(val);\n                break;\n            case 'Sftn':\n                result.soften = parseUnits(val);\n                break;\n            case 'srgR':\n                result.strength = parsePercent(val);\n                break;\n            case 'blur':\n                result.size = parseUnits(val);\n                break;\n            case 'Nose':\n                result.noise = parsePercent(val);\n                break;\n            case 'Inpr':\n                result.range = parsePercent(val);\n                break;\n            case 'Ckmt':\n                result.choke = parseUnits(val);\n                break;\n            case 'ShdN':\n                result.jitter = parsePercent(val);\n                break;\n            case 'Dstn':\n                result.distance = parseUnits(val);\n                break;\n            case 'Scl ':\n                result.scale = parsePercent(val);\n                break;\n            case 'Ptrn':\n                result.pattern = { name: val['Nm  '], id: val.Idnt };\n                break;\n            case 'phase':\n                result.phase = { x: val.Hrzn, y: val.Vrtc };\n                break;\n            case 'Ofst':\n                result.offset = { x: parsePercent(val.Hrzn), y: parsePercent(val.Vrtc) };\n                break;\n            case 'MpgS':\n            case 'TrnS':\n                result.contour = {\n                    name: val['Nm  '],\n                    curve: val['Crv '].map(function (p) { return ({ x: p.Hrzn, y: p.Vrtc }); }),\n                };\n                break;\n            case 'Grad':\n                result.gradient = parseGradient(val);\n                break;\n            case 'useTexture':\n            case 'useShape':\n            case 'layerConceals':\n            case 'present':\n            case 'showInDialog':\n            case 'antialiasGloss':\n                result[key] = val;\n                break;\n            default:\n                reportErrors && console.log(\"Invalid effect key: '\" + key + \"':\", val);\n        }\n    }\n    return result;\n}\nfunction serializeEffectObject(obj, objName, reportErrors) {\n    var result = {};\n    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {\n        var objKey = _a[_i];\n        var key = objKey;\n        var val = obj[key];\n        switch (key) {\n            case 'enabled':\n                result.enab = !!val;\n                break;\n            case 'useGlobalLight':\n                result.uglg = !!val;\n                break;\n            case 'antialiased':\n                result.AntA = !!val;\n                break;\n            case 'align':\n                result.Algn = !!val;\n                break;\n            case 'dither':\n                result.Dthr = !!val;\n                break;\n            case 'invert':\n                result.Invr = !!val;\n                break;\n            case 'reverse':\n                result.Rvrs = !!val;\n                break;\n            case 'color':\n                result['Clr '] = serializeColor(val);\n                break;\n            case 'highlightColor':\n                result.hglC = serializeColor(val);\n                break;\n            case 'shadowColor':\n                result.sdwC = serializeColor(val);\n                break;\n            case 'position':\n                result.Styl = FStl.encode(val);\n                break;\n            case 'blendMode':\n                result['Md  '] = BlnM.encode(val);\n                break;\n            case 'highlightBlendMode':\n                result.hglM = BlnM.encode(val);\n                break;\n            case 'shadowBlendMode':\n                result.sdwM = BlnM.encode(val);\n                break;\n            case 'style':\n                result.bvlS = BESl.encode(val);\n                break;\n            case 'direction':\n                result.bvlD = BESs.encode(val);\n                break;\n            case 'technique':\n                if (objName === 'bevel') {\n                    result.bvlT = bvlT.encode(val);\n                }\n                else {\n                    result.GlwT = BETE.encode(val);\n                }\n                break;\n            case 'source':\n                result.glwS = IGSr.encode(val);\n                break;\n            case 'type':\n                result.Type = GrdT.encode(val);\n                break;\n            case 'opacity':\n                result.Opct = unitsPercent(val);\n                break;\n            case 'highlightOpacity':\n                result.hglO = unitsPercent(val);\n                break;\n            case 'shadowOpacity':\n                result.sdwO = unitsPercent(val);\n                break;\n            case 'angle':\n                if (objName === 'gradientOverlay') {\n                    result.Angl = unitsAngle(val);\n                }\n                else {\n                    result.lagl = unitsAngle(val);\n                }\n                break;\n            case 'altitude':\n                result.Lald = unitsAngle(val);\n                break;\n            case 'soften':\n                result.Sftn = unitsValue(val, key);\n                break;\n            case 'strength':\n                result.srgR = unitsPercent(val);\n                break;\n            case 'size':\n                result.blur = unitsValue(val, key);\n                break;\n            case 'noise':\n                result.Nose = unitsPercent(val);\n                break;\n            case 'range':\n                result.Inpr = unitsPercent(val);\n                break;\n            case 'choke':\n                result.Ckmt = unitsValue(val, key);\n                break;\n            case 'jitter':\n                result.ShdN = unitsPercent(val);\n                break;\n            case 'distance':\n                result.Dstn = unitsValue(val, key);\n                break;\n            case 'scale':\n                result['Scl '] = unitsPercent(val);\n                break;\n            case 'pattern':\n                result.Ptrn = { 'Nm  ': val.name, Idnt: val.id };\n                break;\n            case 'phase':\n                result.phase = { Hrzn: val.x, Vrtc: val.y };\n                break;\n            case 'offset':\n                result.Ofst = { Hrzn: unitsPercent(val.x), Vrtc: unitsPercent(val.y) };\n                break;\n            case 'contour': {\n                result[objName === 'satin' ? 'MpgS' : 'TrnS'] = {\n                    'Nm  ': val.name,\n                    'Crv ': val.curve.map(function (p) { return ({ Hrzn: p.x, Vrtc: p.y }); }),\n                };\n                break;\n            }\n            case 'gradient':\n                result.Grad = serializeGradient(val);\n                break;\n            case 'useTexture':\n            case 'useShape':\n            case 'layerConceals':\n            case 'present':\n            case 'showInDialog':\n            case 'antialiasGloss':\n                result[key] = val;\n                break;\n            default:\n                reportErrors && console.log(\"Invalid effect key: '\" + key + \"' value:\", val);\n        }\n    }\n    return result;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n//# sourceURL=webpack://psd.index/./node_modules/ag-psd/dist/additionalInfo.js?")},"./node_modules/ag-psd/dist/descriptor.js":function(__unused_webpack_module,exports,__webpack_require__){eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.writeVersionAndDescriptor = exports.readVersionAndDescriptor = exports.writeDescriptorStructure = exports.readDescriptorStructure = exports.readAsciiStringOrClassId = exports.setLogErrors = void 0;\nvar psdReader_1 = __webpack_require__(/*! ./psdReader */ \"./node_modules/ag-psd/dist/psdReader.js\");\nvar psdWriter_1 = __webpack_require__(/*! ./psdWriter */ \"./node_modules/ag-psd/dist/psdWriter.js\");\nfunction revMap(map) {\n    var result = {};\n    Object.keys(map).forEach(function (key) { return result[map[key]] = key; });\n    return result;\n}\nvar unitsMap = {\n    '#Ang': 'Angle',\n    '#Rsl': 'Density',\n    '#Rlt': 'Distance',\n    '#Nne': 'None',\n    '#Prc': 'Percent',\n    '#Pxl': 'Pixels',\n    '#Mlm': 'Millimeters',\n    '#Pnt': 'Points',\n    'RrPi': 'Picas',\n    'RrIn': 'Inches',\n    'RrCm': 'Centimeters',\n};\nvar unitsMapRev = revMap(unitsMap);\nvar logErrors = false;\nfunction setLogErrors(value) {\n    logErrors = value;\n}\nexports.setLogErrors = setLogErrors;\nfunction makeType(name, classID) {\n    return { name: name, classID: classID };\n}\nvar fieldToExtType = {\n    strokeStyleContent: makeType('', 'solidColorLayer'),\n    printProofSetup: makeType('Proof Setup', 'proofSetup'),\n    patternFill: makeType('', 'patternFill'),\n    Grad: makeType('Gradient', 'Grdn'),\n    ebbl: makeType('', 'ebbl'),\n    SoFi: makeType('', 'SoFi'),\n    GrFl: makeType('', 'GrFl'),\n    sdwC: makeType('', 'RGBC'),\n    hglC: makeType('', 'RGBC'),\n    'Clr ': makeType('', 'RGBC'),\n    'tintColor': makeType('', 'RGBC'),\n    Ofst: makeType('', 'Pnt '),\n    ChFX: makeType('', 'ChFX'),\n    MpgS: makeType('', 'ShpC'),\n    DrSh: makeType('', 'DrSh'),\n    IrSh: makeType('', 'IrSh'),\n    OrGl: makeType('', 'OrGl'),\n    IrGl: makeType('', 'IrGl'),\n    TrnS: makeType('', 'ShpC'),\n    Ptrn: makeType('', 'Ptrn'),\n    FrFX: makeType('', 'FrFX'),\n    phase: makeType('', 'Pnt '),\n};\nvar fieldToArrayExtType = {\n    'Crv ': makeType('', 'CrPt'),\n    'Clrs': makeType('', 'Clrt'),\n    'Trns': makeType('', 'TrnS'),\n};\nvar typeToField = {\n    'TEXT': [\n        'Txt ', 'printerName', 'Nm  ', 'Idnt', 'blackAndWhitePresetFileName', 'LUT3DFileName',\n        'presetFileName', 'curvesPresetFileName', 'mixerPresetFileName',\n    ],\n    'tdta': ['EngineData', 'LUT3DFileData'],\n    'long': [\n        'TextIndex', 'RndS', 'Mdpn', 'Smth', 'Lctn', 'strokeStyleVersion', 'LaID', 'Vrsn',\n        'Brgh', 'Cntr', 'means', 'vibrance', 'Strt', 'bwPresetKind', 'presetKind',\n        'curvesPresetKind', 'mixerPresetKind',\n    ],\n    'enum': [\n        'textGridding', 'Ornt', 'warpStyle', 'warpRotate', 'Inte', 'Bltn', 'ClrS',\n        'sdwM', 'hglM', 'bvlT', 'bvlS', 'bvlD', 'Md  ', 'Type', 'glwS', 'GrdF', 'GlwT',\n        'strokeStyleLineCapType', 'strokeStyleLineJoinType', 'strokeStyleLineAlignment',\n        'strokeStyleBlendMode', 'PntT', 'Styl', 'lookupType', 'LUTFormat', 'dataOrder',\n        'tableOrder'\n    ],\n    'bool': [\n        'PstS', 'printSixteenBit', 'masterFXSwitch', 'enab', 'uglg', 'antialiasGloss',\n        'useShape', 'useTexture', 'masterFXSwitch', 'uglg', 'antialiasGloss', 'useShape',\n        'useTexture', 'Algn', 'Rvrs', 'Dthr', 'Invr', 'VctC', 'ShTr', 'layerConceals',\n        'strokeEnabled', 'fillEnabled', 'strokeStyleScaleLock', 'strokeStyleStrokeAdjust',\n        'hardProof', 'MpBl', 'paperWhite', 'useLegacy', 'Auto', 'Lab ', 'useTint',\n    ],\n    'doub': [\n        'warpValue', 'warpPerspective', 'warpPerspectiveOther', 'Intr',\n        'strokeStyleMiterLimit', 'strokeStyleResolution', 'layerTime',\n    ],\n    'UntF': [\n        'Scl ', 'sdwO', 'hglO', 'lagl', 'Lald', 'srgR', 'blur', 'Sftn', 'Opct', 'Dstn', 'Angl',\n        'Ckmt', 'Nose', 'Inpr', 'ShdN', 'strokeStyleLineWidth', 'strokeStyleLineDashOffset',\n        'strokeStyleOpacity', 'Sz  ', 'H   ',\n    ],\n    'VlLs': [\n        'Crv ', 'Clrs', 'Mnm ', 'Mxm ', 'Trns', 'pathList', 'strokeStyleLineDashSet', 'FrLs',\n        'LaSt',\n    ],\n};\nvar channels = [\n    'Rd  ', 'Grn ', 'Bl  ', 'Yllw', 'Ylw ', 'Cyn ', 'Mgnt', 'Blck', 'Gry ', 'Lmnc', 'A   ', 'B   ',\n];\nvar fieldToArrayType = {\n    'Mnm ': 'long',\n    'Mxm ': 'long',\n    'FrLs': 'long',\n    'strokeStyleLineDashSet': 'UntF',\n};\nvar fieldToType = {};\nfor (var _i = 0, _a = Object.keys(typeToField); _i < _a.length; _i++) {\n    var type = _a[_i];\n    for (var _b = 0, _c = typeToField[type]; _b < _c.length; _b++) {\n        var field = _c[_b];\n        fieldToType[field] = type;\n    }\n}\nfor (var _d = 0, _e = Object.keys(fieldToExtType); _d < _e.length; _d++) {\n    var field = _e[_d];\n    fieldToType[field] = 'Objc';\n}\nfor (var _f = 0, _g = Object.keys(fieldToArrayExtType); _f < _g.length; _f++) {\n    var field = _g[_f];\n    fieldToArrayType[field] = 'Objc';\n}\nfunction getTypeByKey(key, value) {\n    if (key === 'AntA') {\n        return typeof value === 'string' ? 'enum' : 'bool';\n    }\n    else if (key === 'Hrzn' || key === 'Vrtc') {\n        return typeof value === 'number' ? 'doub' : 'UntF';\n    }\n    else {\n        return fieldToType[key];\n    }\n}\nfunction readAsciiStringOrClassId(reader) {\n    var length = psdReader_1.readInt32(reader);\n    var result = length === 0 ? psdReader_1.readSignature(reader) : psdReader_1.readAsciiString(reader, length);\n    return result;\n}\nexports.readAsciiStringOrClassId = readAsciiStringOrClassId;\nfunction writeAsciiStringOrClassId(writer, value) {\n    if (value.length === 4 && value !== 'warp') {\n        // write classId\n        psdWriter_1.writeInt32(writer, 0);\n        psdWriter_1.writeSignature(writer, value);\n    }\n    else {\n        // write ascii string\n        psdWriter_1.writeInt32(writer, value.length);\n        for (var i = 0; i < value.length; i++) {\n            psdWriter_1.writeUint8(writer, value.charCodeAt(i));\n        }\n    }\n}\nfunction readDescriptorStructure(reader) {\n    // const struct =\n    readClassStructure(reader);\n    // console.log(struct);\n    var itemsCount = psdReader_1.readUint32(reader);\n    var object = {};\n    for (var i = 0; i < itemsCount; i++) {\n        var key = readAsciiStringOrClassId(reader);\n        var type = psdReader_1.readSignature(reader);\n        // console.log('>', key, type);\n        var data = readOSType(reader, type);\n        object[key] = data;\n    }\n    // console.log('//', struct);\n    return object;\n}\nexports.readDescriptorStructure = readDescriptorStructure;\nfunction writeDescriptorStructure(writer, name, classId, value) {\n    if (logErrors && !classId)\n        console.log('Missing classId for: ', name, classId, value);\n    // write class structure\n    psdWriter_1.writeUnicodeStringWithPadding(writer, name);\n    writeAsciiStringOrClassId(writer, classId);\n    var keys = Object.keys(value);\n    psdWriter_1.writeUint32(writer, keys.length);\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        var type = getTypeByKey(key, value[key]);\n        var extType = fieldToExtType[key];\n        if (channels.indexOf(key) !== -1) {\n            type = classId === 'RGBC' ? 'doub' : 'long';\n        }\n        else if (key === 'profile') {\n            type = classId === 'printOutput' ? 'TEXT' : 'tdta';\n        }\n        else if (key === 'strokeStyleContent') {\n            if (value[key]['Clr ']) {\n                extType = makeType('', 'solidColorLayer');\n            }\n            else if (value[key].Grad) {\n                extType = makeType('', 'gradientLayer');\n            }\n            else if (value[key].Ptrn) {\n                extType = makeType('', 'patternLayer');\n            }\n            else {\n                logErrors && console.log('Invalid strokeStyleContent value', value[key]);\n            }\n        }\n        writeAsciiStringOrClassId(writer, key);\n        psdWriter_1.writeSignature(writer, type || 'long');\n        writeOSType(writer, type || 'long', value[key], key, extType);\n        if (logErrors && !type)\n            console.log(\"Missing descriptor field type for: '\" + key + \"' in\", value);\n    }\n}\nexports.writeDescriptorStructure = writeDescriptorStructure;\nfunction readOSType(reader, type) {\n    switch (type) {\n        case 'obj ': // Reference\n            return readReferenceStructure(reader);\n        case 'Objc': // Descriptor\n        case 'GlbO': // GlobalObject same as Descriptor\n            return readDescriptorStructure(reader);\n        case 'VlLs': { // List\n            var length_1 = psdReader_1.readInt32(reader);\n            var items = [];\n            for (var i = 0; i < length_1; i++) {\n                var type_1 = psdReader_1.readSignature(reader);\n                // console.log('  >', type);\n                items.push(readOSType(reader, type_1));\n                // if (typeof items[items.length - 1] === 'object' && 'units' in items[items.length - 1])\n                // \tconsole.log('[]', items[items.length - 1]);\n            }\n            return items;\n        }\n        case 'doub': // Double\n            return psdReader_1.readFloat64(reader);\n        case 'UntF': { // Unit double\n            var units = psdReader_1.readSignature(reader);\n            var value = psdReader_1.readFloat64(reader);\n            if (!unitsMap[units])\n                throw new Error(\"Invalid units: \" + units);\n            return { units: unitsMap[units], value: value };\n        }\n        case 'UnFl': { // Unit float\n            var units = psdReader_1.readSignature(reader);\n            var value = psdReader_1.readFloat32(reader);\n            if (!unitsMap[units])\n                throw new Error(\"Invalid units: \" + units);\n            return { units: unitsMap[units], value: value };\n        }\n        case 'TEXT': // String\n            return psdReader_1.readUnicodeString(reader);\n        case 'enum': { // Enumerated\n            var type_2 = readAsciiStringOrClassId(reader);\n            var value = readAsciiStringOrClassId(reader);\n            return type_2 + \".\" + value;\n        }\n        case 'long': // Integer\n            return psdReader_1.readInt32(reader);\n        case 'comp': { // Large Integer\n            var low = psdReader_1.readUint32(reader);\n            var high = psdReader_1.readUint32(reader);\n            return { low: low, high: high };\n        }\n        case 'bool': // Boolean\n            return !!psdReader_1.readUint8(reader);\n        case 'type': // Class\n        case 'GlbC': // Class\n            return readClassStructure(reader);\n        case 'alis': { // Alias\n            var length_2 = psdReader_1.readInt32(reader);\n            return psdReader_1.readAsciiString(reader, length_2);\n        }\n        case 'tdta': { // Raw Data\n            var length_3 = psdReader_1.readInt32(reader);\n            return psdReader_1.readBytes(reader, length_3);\n        }\n        case 'ObAr': // Object array\n            throw new Error('not implemented: ObAr');\n        case 'Pth ': { // File path\n            /*const length =*/ psdReader_1.readInt32(reader);\n            var sig = psdReader_1.readSignature(reader);\n            /*const pathSize =*/ psdReader_1.readInt32LE(reader);\n            var charsCount = psdReader_1.readInt32LE(reader);\n            var path = psdReader_1.readUnicodeStringWithLength(reader, charsCount);\n            return { sig: sig, path: path };\n        }\n        default:\n            throw new Error(\"Invalid TySh descriptor OSType: \" + type + \" at \" + reader.offset.toString(16));\n    }\n}\nfunction writeOSType(writer, type, value, key, extType) {\n    switch (type) {\n        // case 'obj ': // Reference\n        // \twriteReferenceStructure(reader);\n        case 'Objc': // Descriptor\n        case 'GlbO': // GlobalObject same as Descriptor\n            if (!extType)\n                throw new Error(\"Missing ext type for: \" + key + \" (\" + JSON.stringify(value) + \")\");\n            writeDescriptorStructure(writer, extType.name, extType.classID, value);\n            break;\n        case 'VlLs': // List\n            psdWriter_1.writeInt32(writer, value.length);\n            for (var i = 0; i < value.length; i++) {\n                var type_3 = fieldToArrayType[key];\n                psdWriter_1.writeSignature(writer, type_3 || 'long');\n                writeOSType(writer, type_3 || 'long', value[i], '', fieldToArrayExtType[key]);\n                if (logErrors && !type_3)\n                    console.log(\"Missing descriptor array type for: '\" + key + \"' in\", value);\n            }\n            break;\n        case 'doub': // Double\n            psdWriter_1.writeFloat64(writer, value);\n            break;\n        case 'UntF': // Unit double\n            if (!unitsMapRev[value.units])\n                throw new Error(\"Invalid units: \" + value.units);\n            psdWriter_1.writeSignature(writer, unitsMapRev[value.units]);\n            psdWriter_1.writeFloat64(writer, value.value);\n            break;\n        case 'UnFl': // Unit float\n            if (!unitsMapRev[value.units])\n                throw new Error(\"Invalid units: \" + value.units);\n            psdWriter_1.writeSignature(writer, unitsMapRev[value.units]);\n            psdWriter_1.writeFloat32(writer, value.value);\n            break;\n        case 'TEXT': // String\n            psdWriter_1.writeUnicodeStringWithPadding(writer, value);\n            break;\n        case 'enum': { // Enumerated\n            var _a = value.split('.'), type_4 = _a[0], val = _a[1];\n            writeAsciiStringOrClassId(writer, type_4);\n            writeAsciiStringOrClassId(writer, val);\n            break;\n        }\n        case 'long': // Integer\n            psdWriter_1.writeInt32(writer, value);\n            break;\n        // case 'comp': // Large Integer\n        // \twriteLargeInteger(reader);\n        case 'bool': // Boolean\n            psdWriter_1.writeUint8(writer, value ? 1 : 0);\n            break;\n        // case 'type': // Class\n        // case 'GlbC': // Class\n        // \twriteClassStructure(reader);\n        // case 'alis': // Alias\n        // \twriteAliasStructure(reader);\n        case 'tdta': // Raw Data\n            psdWriter_1.writeInt32(writer, value.byteLength);\n            psdWriter_1.writeBytes(writer, value);\n            break;\n        // case 'ObAr': // Object array\n        // \tthrow new Error('not implemented: ObAr');\n        // case 'Pth ': // File path\n        // \twriteFilePath(reader);\n        default:\n            throw new Error(\"Not implemented TySh descriptor OSType: \" + type);\n    }\n}\nfunction readReferenceStructure(reader) {\n    var itemsCount = psdReader_1.readInt32(reader);\n    var items = [];\n    for (var i = 0; i < itemsCount; i++) {\n        var type = psdReader_1.readSignature(reader);\n        switch (type) {\n            case 'prop': { // Property\n                var _a = readClassStructure(reader), name_1 = _a.name, classID = _a.classID;\n                var keyID = readAsciiStringOrClassId(reader);\n                items.push({ name: name_1, classID: classID, keyID: keyID });\n                break;\n            }\n            case 'Clss': // Class\n                items.push(readClassStructure(reader));\n                break;\n            case 'Enmr': { // Enumerated Reference\n                var _b = readClassStructure(reader), name_2 = _b.name, classID = _b.classID;\n                var TypeID = readAsciiStringOrClassId(reader);\n                var value = readAsciiStringOrClassId(reader);\n                items.push({ name: name_2, classID: classID, TypeID: TypeID, value: value });\n                break;\n            }\n            case 'rele': { // Offset\n                var _c = readClassStructure(reader), name_3 = _c.name, classID = _c.classID;\n                var value = psdReader_1.readUint32(reader);\n                items.push({ name: name_3, classID: classID, value: value });\n                break;\n            }\n            case 'Idnt': // Identifier\n                items.push(psdReader_1.readInt32(reader));\n                break;\n            case 'indx': // Index\n                items.push(psdReader_1.readInt32(reader));\n                break;\n            case 'name': // Name\n                items.push(psdReader_1.readUnicodeString(reader));\n                break;\n            default:\n                throw new Error(\"Invalid TySh descriptor Reference type: \" + type);\n        }\n    }\n    return items;\n}\nfunction readClassStructure(reader) {\n    var name = psdReader_1.readUnicodeString(reader);\n    var classID = readAsciiStringOrClassId(reader);\n    return { name: name, classID: classID };\n}\nfunction readVersionAndDescriptor(reader) {\n    var version = psdReader_1.readUint32(reader);\n    if (version !== 16)\n        throw new Error('Invalid descriptor version');\n    return readDescriptorStructure(reader);\n}\nexports.readVersionAndDescriptor = readVersionAndDescriptor;\nfunction writeVersionAndDescriptor(writer, name, classID, descriptor) {\n    psdWriter_1.writeUint32(writer, 16); // version\n    writeDescriptorStructure(writer, name, classID, descriptor);\n}\nexports.writeVersionAndDescriptor = writeVersionAndDescriptor;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n//# sourceURL=webpack://psd.index/./node_modules/ag-psd/dist/descriptor.js?")},"./node_modules/ag-psd/dist/effectsHelpers.js":function(__unused_webpack_module,exports,__webpack_require__){eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.writeEffects = exports.readEffects = void 0;\nvar helpers_1 = __webpack_require__(/*! ./helpers */ \"./node_modules/ag-psd/dist/helpers.js\");\nvar psdReader_1 = __webpack_require__(/*! ./psdReader */ \"./node_modules/ag-psd/dist/psdReader.js\");\nvar psdWriter_1 = __webpack_require__(/*! ./psdWriter */ \"./node_modules/ag-psd/dist/psdWriter.js\");\nvar bevelStyles = [\n    undefined,\n    'outer bevel', 'inner bevel', 'emboss', 'pillow emboss', 'stroke emboss'\n];\nfunction readBlendMode(reader) {\n    psdReader_1.checkSignature(reader, '8BIM');\n    return helpers_1.toBlendMode[psdReader_1.readSignature(reader)] || 'normal';\n}\nfunction writeBlendMode(writer, mode) {\n    psdWriter_1.writeSignature(writer, '8BIM');\n    psdWriter_1.writeSignature(writer, helpers_1.fromBlendMode[mode] || 'norm');\n}\nfunction readFixedPoint8(reader) {\n    return psdReader_1.readUint8(reader) / 0xff;\n}\nfunction writeFixedPoint8(writer, value) {\n    psdWriter_1.writeUint8(writer, Math.round(value * 0xff) | 0);\n}\nfunction readEffects(reader) {\n    var version = psdReader_1.readUint16(reader);\n    if (version !== 0)\n        throw new Error(\"Invalid effects layer version: \" + version);\n    var effectsCount = psdReader_1.readUint16(reader);\n    var effects = {};\n    for (var i = 0; i < effectsCount; i++) {\n        psdReader_1.checkSignature(reader, '8BIM');\n        var type = psdReader_1.readSignature(reader);\n        switch (type) {\n            case 'cmnS': { // common state (see See Effects layer, common state info)\n                var size = psdReader_1.readUint32(reader);\n                var version_1 = psdReader_1.readUint32(reader);\n                var visible = !!psdReader_1.readUint8(reader);\n                psdReader_1.skipBytes(reader, 2);\n                if (size !== 7 || version_1 !== 0 || !visible)\n                    throw new Error(\"Invalid effects common state\");\n                break;\n            }\n            case 'dsdw': // drop shadow (see See Effects layer, drop shadow and inner shadow info)\n            case 'isdw': { // inner shadow (see See Effects layer, drop shadow and inner shadow info)\n                var blockSize = psdReader_1.readUint32(reader);\n                var version_2 = psdReader_1.readUint32(reader);\n                if (blockSize !== 41 && blockSize !== 51)\n                    throw new Error(\"Invalid shadow size: \" + blockSize);\n                if (version_2 !== 0 && version_2 !== 2)\n                    throw new Error(\"Invalid shadow version: \" + version_2);\n                var size = psdReader_1.readFixedPoint32(reader);\n                psdReader_1.readFixedPoint32(reader); // intensity\n                var angle = psdReader_1.readFixedPoint32(reader);\n                var distance = psdReader_1.readFixedPoint32(reader);\n                var color = psdReader_1.readColor(reader);\n                var blendMode = readBlendMode(reader);\n                var enabled = !!psdReader_1.readUint8(reader);\n                var useGlobalLight = !!psdReader_1.readUint8(reader);\n                var opacity = readFixedPoint8(reader);\n                if (blockSize >= 51)\n                    psdReader_1.readColor(reader); // native color\n                var shadowInfo = {\n                    size: { units: 'Pixels', value: size },\n                    distance: { units: 'Pixels', value: distance },\n                    angle: angle, color: color, blendMode: blendMode, enabled: enabled, useGlobalLight: useGlobalLight, opacity: opacity\n                };\n                if (type === 'dsdw') {\n                    effects.dropShadow = shadowInfo;\n                }\n                else {\n                    effects.innerShadow = shadowInfo;\n                }\n                break;\n            }\n            case 'oglw': { // outer glow (see See Effects layer, outer glow info)\n                var blockSize = psdReader_1.readUint32(reader);\n                var version_3 = psdReader_1.readUint32(reader);\n                if (blockSize !== 32 && blockSize !== 42)\n                    throw new Error(\"Invalid outer glow size: \" + blockSize);\n                if (version_3 !== 0 && version_3 !== 2)\n                    throw new Error(\"Invalid outer glow version: \" + version_3);\n                var size = psdReader_1.readFixedPoint32(reader);\n                psdReader_1.readFixedPoint32(reader); // intensity\n                var color = psdReader_1.readColor(reader);\n                var blendMode = readBlendMode(reader);\n                var enabled = !!psdReader_1.readUint8(reader);\n                var opacity = readFixedPoint8(reader);\n                if (blockSize >= 42)\n                    psdReader_1.readColor(reader); // native color\n                effects.outerGlow = {\n                    size: { units: 'Pixels', value: size },\n                    color: color, blendMode: blendMode, enabled: enabled, opacity: opacity\n                };\n                break;\n            }\n            case 'iglw': { // inner glow (see See Effects layer, inner glow info)\n                var blockSize = psdReader_1.readUint32(reader);\n                var version_4 = psdReader_1.readUint32(reader);\n                if (blockSize !== 32 && blockSize !== 43)\n                    throw new Error(\"Invalid inner glow size: \" + blockSize);\n                if (version_4 !== 0 && version_4 !== 2)\n                    throw new Error(\"Invalid inner glow version: \" + version_4);\n                var size = psdReader_1.readFixedPoint32(reader);\n                psdReader_1.readFixedPoint32(reader); // intensity\n                var color = psdReader_1.readColor(reader);\n                var blendMode = readBlendMode(reader);\n                var enabled = !!psdReader_1.readUint8(reader);\n                var opacity = readFixedPoint8(reader);\n                if (blockSize >= 43) {\n                    psdReader_1.readUint8(reader); // inverted\n                    psdReader_1.readColor(reader); // native color\n                }\n                effects.innerGlow = {\n                    size: { units: 'Pixels', value: size },\n                    color: color, blendMode: blendMode, enabled: enabled, opacity: opacity\n                };\n                break;\n            }\n            case 'bevl': { // bevel (see See Effects layer, bevel info)\n                var blockSize = psdReader_1.readUint32(reader);\n                var version_5 = psdReader_1.readUint32(reader);\n                if (blockSize !== 58 && blockSize !== 78)\n                    throw new Error(\"Invalid bevel size: \" + blockSize);\n                if (version_5 !== 0 && version_5 !== 2)\n                    throw new Error(\"Invalid bevel version: \" + version_5);\n                var angle = psdReader_1.readFixedPoint32(reader);\n                var strength = psdReader_1.readFixedPoint32(reader);\n                var size = psdReader_1.readFixedPoint32(reader);\n                var highlightBlendMode = readBlendMode(reader);\n                var shadowBlendMode = readBlendMode(reader);\n                var highlightColor = psdReader_1.readColor(reader);\n                var shadowColor = psdReader_1.readColor(reader);\n                var style = bevelStyles[psdReader_1.readUint8(reader)] || 'inner bevel';\n                var highlightOpacity = readFixedPoint8(reader);\n                var shadowOpacity = readFixedPoint8(reader);\n                var enabled = !!psdReader_1.readUint8(reader);\n                var useGlobalLight = !!psdReader_1.readUint8(reader);\n                var direction = psdReader_1.readUint8(reader) ? 'down' : 'up';\n                if (blockSize >= 78) {\n                    psdReader_1.readColor(reader); // real highlight color\n                    psdReader_1.readColor(reader); // real shadow color\n                }\n                effects.bevel = {\n                    size: { units: 'Pixels', value: size },\n                    angle: angle, strength: strength, highlightBlendMode: highlightBlendMode, shadowBlendMode: shadowBlendMode, highlightColor: highlightColor, shadowColor: shadowColor,\n                    style: style, highlightOpacity: highlightOpacity, shadowOpacity: shadowOpacity, enabled: enabled, useGlobalLight: useGlobalLight, direction: direction,\n                };\n                break;\n            }\n            case 'sofi': { // solid fill (Photoshop 7.0) (see See Effects layer, solid fill (added in Photoshop 7.0))\n                var size = psdReader_1.readUint32(reader);\n                var version_6 = psdReader_1.readUint32(reader);\n                if (size !== 34)\n                    throw new Error(\"Invalid effects solid fill info size: \" + size);\n                if (version_6 !== 2)\n                    throw new Error(\"Invalid effects solid fill info version: \" + version_6);\n                var blendMode = readBlendMode(reader);\n                var color = psdReader_1.readColor(reader);\n                var opacity = readFixedPoint8(reader);\n                var enabled = !!psdReader_1.readUint8(reader);\n                psdReader_1.readColor(reader); // native color\n                effects.solidFill = { blendMode: blendMode, color: color, opacity: opacity, enabled: enabled };\n                break;\n            }\n            default:\n                throw new Error(\"Invalid effect type: '\" + type + \"'\");\n        }\n    }\n    return effects;\n}\nexports.readEffects = readEffects;\nfunction writeShadowInfo(writer, shadow) {\n    var _a;\n    psdWriter_1.writeUint32(writer, 51);\n    psdWriter_1.writeUint32(writer, 2);\n    psdWriter_1.writeFixedPoint32(writer, shadow.size && shadow.size.value || 0);\n    psdWriter_1.writeFixedPoint32(writer, 0); // intensity\n    psdWriter_1.writeFixedPoint32(writer, shadow.angle || 0);\n    psdWriter_1.writeFixedPoint32(writer, shadow.distance && shadow.distance.value || 0);\n    psdWriter_1.writeColor(writer, shadow.color);\n    writeBlendMode(writer, shadow.blendMode);\n    psdWriter_1.writeUint8(writer, shadow.enabled ? 1 : 0);\n    psdWriter_1.writeUint8(writer, shadow.useGlobalLight ? 1 : 0);\n    writeFixedPoint8(writer, (_a = shadow.opacity) !== null && _a !== void 0 ? _a : 1);\n    psdWriter_1.writeColor(writer, shadow.color); // native color\n}\nfunction writeEffects(writer, effects) {\n    var _a, _b, _c;\n    psdWriter_1.writeUint16(writer, 0);\n    var count = 1;\n    if (effects.dropShadow)\n        count++;\n    if (effects.innerShadow)\n        count++;\n    if (effects.outerGlow)\n        count++;\n    if (effects.innerGlow)\n        count++;\n    if (effects.bevel)\n        count++;\n    if (effects.solidFill)\n        count++;\n    psdWriter_1.writeUint16(writer, count);\n    psdWriter_1.writeSignature(writer, '8BIM');\n    psdWriter_1.writeSignature(writer, 'cmnS');\n    psdWriter_1.writeUint32(writer, 7); // size\n    psdWriter_1.writeUint32(writer, 0); // version\n    psdWriter_1.writeUint8(writer, 1); // visible\n    psdWriter_1.writeZeros(writer, 2);\n    if (effects.dropShadow) {\n        psdWriter_1.writeSignature(writer, '8BIM');\n        psdWriter_1.writeSignature(writer, 'dsdw');\n        writeShadowInfo(writer, effects.dropShadow);\n    }\n    if (effects.innerShadow) {\n        psdWriter_1.writeSignature(writer, '8BIM');\n        psdWriter_1.writeSignature(writer, 'isdw');\n        writeShadowInfo(writer, effects.innerShadow);\n    }\n    if (effects.outerGlow) {\n        psdWriter_1.writeSignature(writer, '8BIM');\n        psdWriter_1.writeSignature(writer, 'oglw');\n        psdWriter_1.writeUint32(writer, 42);\n        psdWriter_1.writeUint32(writer, 2);\n        psdWriter_1.writeFixedPoint32(writer, ((_a = effects.outerGlow.size) === null || _a === void 0 ? void 0 : _a.value) || 0);\n        psdWriter_1.writeFixedPoint32(writer, 0); // intensity\n        psdWriter_1.writeColor(writer, effects.outerGlow.color);\n        writeBlendMode(writer, effects.outerGlow.blendMode);\n        psdWriter_1.writeUint8(writer, effects.outerGlow.enabled ? 1 : 0);\n        writeFixedPoint8(writer, effects.outerGlow.opacity || 0);\n        psdWriter_1.writeColor(writer, effects.outerGlow.color);\n    }\n    if (effects.innerGlow) {\n        psdWriter_1.writeSignature(writer, '8BIM');\n        psdWriter_1.writeSignature(writer, 'iglw');\n        psdWriter_1.writeUint32(writer, 43);\n        psdWriter_1.writeUint32(writer, 2);\n        psdWriter_1.writeFixedPoint32(writer, ((_b = effects.innerGlow.size) === null || _b === void 0 ? void 0 : _b.value) || 0);\n        psdWriter_1.writeFixedPoint32(writer, 0); // intensity\n        psdWriter_1.writeColor(writer, effects.innerGlow.color);\n        writeBlendMode(writer, effects.innerGlow.blendMode);\n        psdWriter_1.writeUint8(writer, effects.innerGlow.enabled ? 1 : 0);\n        writeFixedPoint8(writer, effects.innerGlow.opacity || 0);\n        psdWriter_1.writeUint8(writer, 0); // inverted\n        psdWriter_1.writeColor(writer, effects.innerGlow.color);\n    }\n    if (effects.bevel) {\n        psdWriter_1.writeSignature(writer, '8BIM');\n        psdWriter_1.writeSignature(writer, 'bevl');\n        psdWriter_1.writeUint32(writer, 78);\n        psdWriter_1.writeUint32(writer, 2);\n        psdWriter_1.writeFixedPoint32(writer, effects.bevel.angle || 0);\n        psdWriter_1.writeFixedPoint32(writer, effects.bevel.strength || 0);\n        psdWriter_1.writeFixedPoint32(writer, ((_c = effects.bevel.size) === null || _c === void 0 ? void 0 : _c.value) || 0);\n        writeBlendMode(writer, effects.bevel.highlightBlendMode);\n        writeBlendMode(writer, effects.bevel.shadowBlendMode);\n        psdWriter_1.writeColor(writer, effects.bevel.highlightColor);\n        psdWriter_1.writeColor(writer, effects.bevel.shadowColor);\n        var style = bevelStyles.indexOf(effects.bevel.style);\n        psdWriter_1.writeUint8(writer, style <= 0 ? 1 : style);\n        writeFixedPoint8(writer, effects.bevel.highlightOpacity || 0);\n        writeFixedPoint8(writer, effects.bevel.shadowOpacity || 0);\n        psdWriter_1.writeUint8(writer, effects.bevel.enabled ? 1 : 0);\n        psdWriter_1.writeUint8(writer, effects.bevel.useGlobalLight ? 1 : 0);\n        psdWriter_1.writeUint8(writer, effects.bevel.direction === 'down' ? 1 : 0);\n        psdWriter_1.writeColor(writer, effects.bevel.highlightColor);\n        psdWriter_1.writeColor(writer, effects.bevel.shadowColor);\n    }\n    if (effects.solidFill) {\n        psdWriter_1.writeSignature(writer, '8BIM');\n        psdWriter_1.writeSignature(writer, 'sofi');\n        psdWriter_1.writeUint32(writer, 34);\n        psdWriter_1.writeUint32(writer, 2);\n        writeBlendMode(writer, effects.solidFill.blendMode);\n        psdWriter_1.writeColor(writer, effects.solidFill.color);\n        writeFixedPoint8(writer, effects.solidFill.opacity || 0);\n        psdWriter_1.writeUint8(writer, effects.solidFill.enabled ? 1 : 0);\n        psdWriter_1.writeColor(writer, effects.solidFill.color);\n    }\n}\nexports.writeEffects = writeEffects;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n//# sourceURL=webpack://psd.index/./node_modules/ag-psd/dist/effectsHelpers.js?")},"./node_modules/ag-psd/dist/engineData.js":function(__unused_webpack_module,exports){eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serializeEngineData = exports.parseEngineData = void 0;\nfunction isWhitespace(char) {\n    // ' ', '\\n', '\\r', '\\t'\n    return char === 32 || char === 10 || char === 13 || char === 9;\n}\nfunction isNumber(char) {\n    // 0123456789.-\n    return (char >= 48 && char <= 57) || char === 46 || char === 45;\n}\nfunction parseEngineData(data) {\n    var index = 0;\n    function skipWhitespace() {\n        while (index < data.length && isWhitespace(data[index])) {\n            index++;\n        }\n    }\n    function getTextByte() {\n        var byte = data[index];\n        index++;\n        if (byte === 92) { // \\\n            byte = data[index];\n            index++;\n        }\n        return byte;\n    }\n    function getText() {\n        var result = '';\n        if (data[index] === 41) { // )\n            index++;\n            return result;\n        }\n        // Strings start with utf-16 BOM\n        if (data[index] !== 0xFE || data[index + 1] !== 0xFF) {\n            throw new Error('Invalid utf-16 BOM');\n        }\n        index += 2;\n        // ), ( and \\ characters are escaped in ascii manner, remove the escapes before interpreting\n        // the bytes as utf-16\n        while (index < data.length && data[index] !== 41) { // )\n            var high = getTextByte();\n            var low = getTextByte();\n            var char = (high << 8) | low;\n            result += String.fromCharCode(char);\n        }\n        index++;\n        return result;\n    }\n    var root = null;\n    var stack = [];\n    function pushContainer(value) {\n        if (!stack.length) {\n            stack.push(value);\n            root = value;\n        }\n        else {\n            pushValue(value);\n            stack.push(value);\n        }\n    }\n    function pushValue(value) {\n        if (!stack.length)\n            throw new Error('Invalid data');\n        var top = stack[stack.length - 1];\n        if (typeof top === 'string') {\n            stack[stack.length - 2][top] = value;\n            pop();\n        }\n        else if (Array.isArray(top)) {\n            top.push(value);\n        }\n        else {\n            throw new Error('Invalid data');\n        }\n    }\n    function pushProperty(name) {\n        if (!stack.length)\n            pushContainer({});\n        var top = stack[stack.length - 1];\n        if (top && typeof top === 'string') {\n            if (name === 'nil') {\n                pushValue(null);\n            }\n            else {\n                pushValue(\"/\" + name);\n            }\n        }\n        else if (top && typeof top === 'object') {\n            stack.push(name);\n        }\n        else {\n            throw new Error('Invalid data');\n        }\n    }\n    function pop() {\n        if (!stack.length)\n            throw new Error('Invalid data');\n        stack.pop();\n    }\n    skipWhitespace();\n    while (index < data.length) {\n        var i = index;\n        var char = data[i];\n        if (char === 60 && data[i + 1] === 60) { // <<\n            index += 2;\n            pushContainer({});\n        }\n        else if (char === 62 && data[i + 1] === 62) { // >>\n            index += 2;\n            pop();\n        }\n        else if (char === 47) { // /\n            index += 1;\n            var start = index;\n            while (index < data.length && !isWhitespace(data[index])) {\n                index++;\n            }\n            var name_1 = '';\n            for (var i_1 = start; i_1 < index; i_1++) {\n                name_1 += String.fromCharCode(data[i_1]);\n            }\n            pushProperty(name_1);\n        }\n        else if (char === 40) { // (\n            index += 1;\n            pushValue(getText());\n        }\n        else if (char === 91) { // [\n            index += 1;\n            pushContainer([]);\n        }\n        else if (char === 93) { // ]\n            index += 1;\n            pop();\n        }\n        else if (char === 110 && data[i + 1] === 117 && data[i + 2] === 108 && data[i + 3] === 108) { // null\n            index += 4;\n            pushValue(null);\n        }\n        else if (char === 116 && data[i + 1] === 114 && data[i + 2] === 117 && data[i + 3] === 101) { // true\n            index += 4;\n            pushValue(true);\n        }\n        else if (char === 102 && data[i + 1] === 97 && data[i + 2] === 108 && data[i + 3] === 115 && data[i + 4] === 101) { // false\n            index += 5;\n            pushValue(false);\n        }\n        else if (isNumber(char)) {\n            var value = '';\n            while (index < data.length && isNumber(data[index])) {\n                value += String.fromCharCode(data[index]);\n                index++;\n            }\n            pushValue(parseFloat(value));\n        }\n        else {\n            index += 1;\n            console.log(\"Invalid token \" + String.fromCharCode(char) + \" at \" + index);\n            // ` near ${String.fromCharCode.apply(null, data.slice(index - 10, index + 20) as any)}` +\n            // `data [${Array.from(data.slice(index - 10, index + 20)).join(', ')}]`\n        }\n        skipWhitespace();\n    }\n    return root;\n}\nexports.parseEngineData = parseEngineData;\nvar floatKeys = [\n    'Axis', 'XY', 'Zone', 'WordSpacing', 'FirstLineIndent', 'GlyphSpacing', 'StartIndent', 'EndIndent', 'SpaceBefore',\n    'SpaceAfter', 'LetterSpacing', 'Values', 'GridSize', 'GridLeading', 'PointBase', 'BoxBounds', 'TransformPoint0', 'TransformPoint1',\n    'TransformPoint2', 'FontSize', 'Leading', 'HorizontalScale', 'VerticalScale', 'BaselineShift', 'Tsume',\n    'OutlineWidth',\n];\nvar intArrays = ['RunLengthArray'];\n// TODO: handle /nil\nfunction serializeEngineData(data, condensed) {\n    if (condensed === void 0) { condensed = false; }\n    var buffer = new Uint8Array(1024);\n    var offset = 0;\n    var indent = 0;\n    function write(value) {\n        if (offset >= buffer.length) {\n            var newBuffer = new Uint8Array(buffer.length * 2);\n            newBuffer.set(buffer);\n            buffer = newBuffer;\n        }\n        buffer[offset] = value;\n        offset++;\n    }\n    function writeString(value) {\n        for (var i = 0; i < value.length; i++) {\n            write(value.charCodeAt(i));\n        }\n    }\n    function writeIndent() {\n        if (condensed) {\n            writeString(' ');\n        }\n        else {\n            for (var i = 0; i < indent; i++) {\n                writeString('\\t');\n            }\n        }\n    }\n    function writeProperty(key, value) {\n        writeIndent();\n        writeString(\"/\" + key);\n        writeValue(value, key, true);\n        if (!condensed)\n            writeString('\\n');\n    }\n    function serializeInt(value) {\n        return value.toString();\n    }\n    function serializeFloat(value) {\n        return value.toFixed(5)\n            .replace(/(\\d)0+$/g, '$1')\n            .replace(/^0+\\.([1-9])/g, '.$1')\n            .replace(/^-0+\\.0(\\d)/g, '-.0$1');\n    }\n    function serializeNumber(value, key) {\n        var isFloat = (key && floatKeys.indexOf(key) !== -1) || (value | 0) !== value;\n        return isFloat ? serializeFloat(value) : serializeInt(value);\n    }\n    function getKeys(value) {\n        var keys = Object.keys(value);\n        if (keys.indexOf('98') !== -1)\n            keys.unshift.apply(keys, keys.splice(keys.indexOf('99'), 1));\n        if (keys.indexOf('99') !== -1)\n            keys.unshift.apply(keys, keys.splice(keys.indexOf('99'), 1));\n        return keys;\n    }\n    function writeStringByte(value) {\n        if (value === 40 || value === 41 || value === 92) { // ( ) \\\n            write(92); // \\\n        }\n        write(value);\n    }\n    function writeValue(value, key, inProperty) {\n        if (inProperty === void 0) { inProperty = false; }\n        function writePrefix() {\n            if (inProperty) {\n                writeString(' ');\n            }\n            else {\n                writeIndent();\n            }\n        }\n        if (value === null) {\n            writePrefix();\n            writeString(condensed ? '/nil' : 'null');\n        }\n        else if (typeof value === 'number') {\n            writePrefix();\n            writeString(serializeNumber(value, key));\n        }\n        else if (typeof value === 'boolean') {\n            writePrefix();\n            writeString(value ? 'true' : 'false');\n        }\n        else if (typeof value === 'string') {\n            writePrefix();\n            if ((key === '99' || key === '98') && value.charAt(0) === '/') {\n                writeString(value);\n            }\n            else {\n                writeString('(');\n                write(0xfe);\n                write(0xff);\n                for (var i = 0; i < value.length; i++) {\n                    var code = value.charCodeAt(i);\n                    writeStringByte((code >> 8) & 0xff);\n                    writeStringByte(code & 0xff);\n                }\n                writeString(')');\n            }\n        }\n        else if (Array.isArray(value)) {\n            writePrefix();\n            if (value.every(function (x) { return typeof x === 'number'; })) {\n                writeString('[');\n                var intArray = intArrays.indexOf(key) !== -1;\n                for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {\n                    var x = value_1[_i];\n                    writeString(' ');\n                    writeString(intArray ? serializeNumber(x) : serializeFloat(x));\n                }\n                writeString(' ]');\n            }\n            else {\n                writeString('[');\n                if (!condensed)\n                    writeString('\\n');\n                for (var _a = 0, value_2 = value; _a < value_2.length; _a++) {\n                    var x = value_2[_a];\n                    writeValue(x, key);\n                    if (!condensed)\n                        writeString('\\n');\n                }\n                writeIndent();\n                writeString(']');\n            }\n        }\n        else if (typeof value === 'object') {\n            if (inProperty && !condensed)\n                writeString('\\n');\n            writeIndent();\n            writeString('<<');\n            if (!condensed)\n                writeString('\\n');\n            indent++;\n            for (var _b = 0, _c = getKeys(value); _b < _c.length; _b++) {\n                var key_1 = _c[_b];\n                writeProperty(key_1, value[key_1]);\n            }\n            indent--;\n            writeIndent();\n            writeString('>>');\n        }\n        return undefined;\n    }\n    if (condensed) {\n        if (typeof data === 'object') {\n            for (var _i = 0, _a = getKeys(data); _i < _a.length; _i++) {\n                var key = _a[_i];\n                writeProperty(key, data[key]);\n            }\n        }\n    }\n    else {\n        writeString('\\n\\n');\n        writeValue(data);\n    }\n    return buffer.slice(0, offset);\n}\nexports.serializeEngineData = serializeEngineData;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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QkFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFbEMsTUFBTSxFQUFFLENBQUM7WUFFVCxLQUFrQixVQUFjLEVBQWQsS0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQWQsY0FBYyxFQUFkLElBQWMsRUFBRTtnQkFBN0IsSUFBTSxLQUFHLFNBQUE7Z0JBQ2IsYUFBYSxDQUFDLEtBQUcsRUFBRSxLQUFLLENBQUMsS0FBRyxDQUFDLENBQUMsQ0FBQzthQUMvQjtZQUVELE1BQU0sRUFBRSxDQUFDO1lBQ1QsV0FBVyxFQUFFLENBQUM7WUFDZCxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEI7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNsQixDQUFDO0lBRUQsSUFBSSxTQUFTLEVBQUU7UUFDZCxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUM3QixLQUFrQixVQUFhLEVBQWIsS0FBQSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQWIsY0FBYSxFQUFiLElBQWEsRUFBRTtnQkFBNUIsSUFBTSxHQUFHLFNBQUE7Z0JBQ2IsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUM5QjtTQUNEO0tBQ0Q7U0FBTTtRQUNOLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQixVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakI7SUFFRCxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUEzS0Qsa0RBMktDIiwiZmlsZSI6ImVuZ2luZURhdGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc1doaXRlc3BhY2UoY2hhcjogbnVtYmVyKSB7XHJcblx0Ly8gJyAnLCAnXFxuJywgJ1xccicsICdcXHQnXHJcblx0cmV0dXJuIGNoYXIgPT09IDMyIHx8IGNoYXIgPT09IDEwIHx8IGNoYXIgPT09IDEzIHx8IGNoYXIgPT09IDk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzTnVtYmVyKGNoYXI6IG51bWJlcikge1xyXG5cdC8vIDAxMjM0NTY3ODkuLVxyXG5cdHJldHVybiAoY2hhciA+PSA0OCAmJiBjaGFyIDw9IDU3KSB8fCBjaGFyID09PSA0NiB8fCBjaGFyID09PSA0NTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRW5naW5lRGF0YShkYXRhOiBudW1iZXJbXSB8IFVpbnQ4QXJyYXkpIHtcclxuXHRsZXQgaW5kZXggPSAwO1xyXG5cclxuXHRmdW5jdGlvbiBza2lwV2hpdGVzcGFjZSgpIHtcclxuXHRcdHdoaWxlIChpbmRleCA8IGRhdGEubGVuZ3RoICYmIGlzV2hpdGVzcGFjZShkYXRhW2luZGV4XSkpIHtcclxuXHRcdFx0aW5kZXgrKztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldFRleHRCeXRlKCkge1xyXG5cdFx0bGV0IGJ5dGUgPSBkYXRhW2luZGV4XTtcclxuXHRcdGluZGV4Kys7XHJcblxyXG5cdFx0aWYgKGJ5dGUgPT09IDkyKSB7IC8vIFxcXHJcblx0XHRcdGJ5dGUgPSBkYXRhW2luZGV4XTtcclxuXHRcdFx0aW5kZXgrKztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gYnl0ZTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldFRleHQoKSB7XHJcblx0XHRsZXQgcmVzdWx0ID0gJyc7XHJcblxyXG5cdFx0aWYgKGRhdGFbaW5kZXhdID09PSA0MSkgeyAvLyApXHJcblx0XHRcdGluZGV4Kys7XHJcblx0XHRcdHJldHVybiByZXN1bHQ7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU3RyaW5ncyBzdGFydCB3aXRoIHV0Zi0xNiBCT01cclxuXHRcdGlmIChkYXRhW2luZGV4XSAhPT0gMHhGRSB8fCBkYXRhW2luZGV4ICsgMV0gIT09IDB4RkYpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHV0Zi0xNiBCT00nKTtcclxuXHRcdH1cclxuXHJcblx0XHRpbmRleCArPSAyO1xyXG5cclxuXHRcdC8vICksICggYW5kIFxcIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQgaW4gYXNjaWkgbWFubmVyLCByZW1vdmUgdGhlIGVzY2FwZXMgYmVmb3JlIGludGVycHJldGluZ1xyXG5cdFx0Ly8gdGhlIGJ5dGVzIGFzIHV0Zi0xNlxyXG5cdFx0d2hpbGUgKGluZGV4IDwgZGF0YS5sZW5ndGggJiYgZGF0YVtpbmRleF0gIT09IDQxKSB7IC8vIClcclxuXHRcdFx0Y29uc3QgaGlnaCA9IGdldFRleHRCeXRlKCk7XHJcblx0XHRcdGNvbnN0IGxvdyA9IGdldFRleHRCeXRlKCk7XHJcblx0XHRcdGNvbnN0IGNoYXIgPSAoaGlnaCA8PCA4KSB8IGxvdztcclxuXHRcdFx0cmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhcik7XHJcblx0XHR9XHJcblxyXG5cdFx0aW5kZXgrKztcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRsZXQgcm9vdDogYW55ID0gbnVsbDtcclxuXHRjb25zdCBzdGFjazogYW55W10gPSBbXTtcclxuXHJcblx0ZnVuY3Rpb24gcHVzaENvbnRhaW5lcih2YWx1ZTogYW55KSB7XHJcblx0XHRpZiAoIXN0YWNrLmxlbmd0aCkge1xyXG5cdFx0XHRzdGFjay5wdXNoKHZhbHVlKTtcclxuXHRcdFx0cm9vdCA9IHZhbHVlO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cHVzaFZhbHVlKHZhbHVlKTtcclxuXHRcdFx0c3RhY2sucHVzaCh2YWx1ZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBwdXNoVmFsdWUodmFsdWU6IGFueSkge1xyXG5cdFx0aWYgKCFzdGFjay5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBkYXRhJyk7XHJcblxyXG5cdFx0Y29uc3QgdG9wID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XHJcblxyXG5cdFx0aWYgKHR5cGVvZiB0b3AgPT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdHN0YWNrW3N0YWNrLmxlbmd0aCAtIDJdW3RvcF0gPSB2YWx1ZTtcclxuXHRcdFx0cG9wKCk7XHJcblx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodG9wKSkge1xyXG5cdFx0XHR0b3AucHVzaCh2YWx1ZSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGF0YScpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcHVzaFByb3BlcnR5KG5hbWU6IHN0cmluZykge1xyXG5cdFx0aWYgKCFzdGFjay5sZW5ndGgpIHB1c2hDb250YWluZXIoe30pO1xyXG5cclxuXHRcdGNvbnN0IHRvcCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xyXG5cclxuXHRcdGlmICh0b3AgJiYgdHlwZW9mIHRvcCA9PT0gJ3N0cmluZycpIHtcclxuXHRcdFx0aWYgKG5hbWUgPT09ICduaWwnKSB7XHJcblx0XHRcdFx0cHVzaFZhbHVlKG51bGwpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHB1c2hWYWx1ZShgLyR7bmFtZX1gKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmICh0b3AgJiYgdHlwZW9mIHRvcCA9PT0gJ29iamVjdCcpIHtcclxuXHRcdFx0c3RhY2sucHVzaChuYW1lKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBkYXRhJyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBwb3AoKSB7XHJcblx0XHRpZiAoIXN0YWNrLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGRhdGEnKTtcclxuXHRcdHN0YWNrLnBvcCgpO1xyXG5cdH1cclxuXHJcblx0c2tpcFdoaXRlc3BhY2UoKTtcclxuXHJcblx0d2hpbGUgKGluZGV4IDwgZGF0YS5sZW5ndGgpIHtcclxuXHRcdGNvbnN0IGkgPSBpbmRleDtcclxuXHRcdGNvbnN0IGNoYXIgPSBkYXRhW2ldO1xyXG5cclxuXHRcdGlmIChjaGFyID09PSA2MCAmJiBkYXRhW2kgKyAxXSA9PT0gNjApIHsgLy8gPDxcclxuXHRcdFx0aW5kZXggKz0gMjtcclxuXHRcdFx0cHVzaENvbnRhaW5lcih7fSk7XHJcblx0XHR9IGVsc2UgaWYgKGNoYXIgPT09IDYyICYmIGRhdGFbaSArIDFdID09PSA2MikgeyAvLyA+PlxyXG5cdFx0XHRpbmRleCArPSAyO1xyXG5cdFx0XHRwb3AoKTtcclxuXHRcdH0gZWxzZSBpZiAoY2hhciA9PT0gNDcpIHsgLy8gL1xyXG5cdFx0XHRpbmRleCArPSAxO1xyXG5cdFx0XHRjb25zdCBzdGFydCA9IGluZGV4O1xyXG5cclxuXHRcdFx0d2hpbGUgKGluZGV4IDwgZGF0YS5sZW5ndGggJiYgIWlzV2hpdGVzcGFjZShkYXRhW2luZGV4XSkpIHtcclxuXHRcdFx0XHRpbmRleCsrO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRsZXQgbmFtZSA9ICcnO1xyXG5cclxuXHRcdFx0Zm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgaW5kZXg7IGkrKykge1xyXG5cdFx0XHRcdG5hbWUgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShkYXRhW2ldKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cHVzaFByb3BlcnR5KG5hbWUpO1xyXG5cdFx0fSBlbHNlIGlmIChjaGFyID09PSA0MCkgeyAvLyAoXHJcblx0XHRcdGluZGV4ICs9IDE7XHJcblx0XHRcdHB1c2hWYWx1ZShnZXRUZXh0KCkpO1xyXG5cdFx0fSBlbHNlIGlmIChjaGFyID09PSA5MSkgeyAvLyBbXHJcblx0XHRcdGluZGV4ICs9IDE7XHJcblx0XHRcdHB1c2hDb250YWluZXIoW10pO1xyXG5cdFx0fSBlbHNlIGlmIChjaGFyID09PSA5MykgeyAvLyBdXHJcblx0XHRcdGluZGV4ICs9IDE7XHJcblx0XHRcdHBvcCgpO1xyXG5cdFx0fSBlbHNlIGlmIChjaGFyID09PSAxMTAgJiYgZGF0YVtpICsgMV0gPT09IDExNyAmJiBkYXRhW2kgKyAyXSA9PT0gMTA4ICYmIGRhdGFbaSArIDNdID09PSAxMDgpIHsgLy8gbnVsbFxyXG5cdFx0XHRpbmRleCArPSA0O1xyXG5cdFx0XHRwdXNoVmFsdWUobnVsbCk7XHJcblx0XHR9IGVsc2UgaWYgKGNoYXIgPT09IDExNiAmJiBkYXRhW2kgKyAxXSA9PT0gMTE0ICYmIGRhdGFbaSArIDJdID09PSAxMTcgJiYgZGF0YVtpICsgM10gPT09IDEwMSkgeyAvLyB0cnVlXHJcblx0XHRcdGluZGV4ICs9IDQ7XHJcblx0XHRcdHB1c2hWYWx1ZSh0cnVlKTtcclxuXHRcdH0gZWxzZSBpZiAoY2hhciA9PT0gMTAyICYmIGRhdGFbaSArIDFdID09PSA5NyAmJiBkYXRhW2kgKyAyXSA9PT0gMTA4ICYmIGRhdGFbaSArIDNdID09PSAxMTUgJiYgZGF0YVtpICsgNF0gPT09IDEwMSkgeyAvLyBmYWxzZVxyXG5cdFx0XHRpbmRleCArPSA1O1xyXG5cdFx0XHRwdXNoVmFsdWUoZmFsc2UpO1xyXG5cdFx0fSBlbHNlIGlmIChpc051bWJlcihjaGFyKSkge1xyXG5cdFx0XHRsZXQgdmFsdWUgPSAnJztcclxuXHJcblx0XHRcdHdoaWxlIChpbmRleCA8IGRhdGEubGVuZ3RoICYmIGlzTnVtYmVyKGRhdGFbaW5kZXhdKSkge1xyXG5cdFx0XHRcdHZhbHVlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVtpbmRleF0pO1xyXG5cdFx0XHRcdGluZGV4Kys7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHB1c2hWYWx1ZShwYXJzZUZsb2F0KHZhbHVlKSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpbmRleCArPSAxO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhgSW52YWxpZCB0b2tlbiAke1N0cmluZy5mcm9tQ2hhckNvZGUoY2hhcil9IGF0ICR7aW5kZXh9YCk7XHJcblx0XHRcdC8vIGAgbmVhciAke1N0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgZGF0YS5zbGljZShpbmRleCAtIDEwLCBpbmRleCArIDIwKSBhcyBhbnkpfWAgK1xyXG5cdFx0XHQvLyBgZGF0YSBbJHtBcnJheS5mcm9tKGRhdGEuc2xpY2UoaW5kZXggLSAxMCwgaW5kZXggKyAyMCkpLmpvaW4oJywgJyl9XWBcclxuXHRcdH1cclxuXHJcblx0XHRza2lwV2hpdGVzcGFjZSgpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHJvb3Q7XHJcbn1cclxuXHJcbmNvbnN0IGZsb2F0S2V5cyA9IFtcclxuXHQnQXhpcycsICdYWScsICdab25lJywgJ1dvcmRTcGFjaW5nJywgJ0ZpcnN0TGluZUluZGVudCcsICdHbHlwaFNwYWNpbmcnLCAnU3RhcnRJbmRlbnQnLCAnRW5kSW5kZW50JywgJ1NwYWNlQmVmb3JlJyxcclxuXHQnU3BhY2VBZnRlcicsICdMZXR0ZXJTcGFjaW5nJywgJ1ZhbHVlcycsICdHcmlkU2l6ZScsICdHcmlkTGVhZGluZycsICdQb2ludEJhc2UnLCAnQm94Qm91bmRzJywgJ1RyYW5zZm9ybVBvaW50MCcsICdUcmFuc2Zvcm1Qb2ludDEnLFxyXG5cdCdUcmFuc2Zvcm1Qb2ludDInLCAnRm9udFNpemUnLCAnTGVhZGluZycsICdIb3Jpem9udGFsU2NhbGUnLCAnVmVydGljYWxTY2FsZScsICdCYXNlbGluZVNoaWZ0JywgJ1RzdW1lJyxcclxuXHQnT3V0bGluZVdpZHRoJyxcclxuXTtcclxuXHJcbmNvbnN0IGludEFycmF5cyA9IFsnUnVuTGVuZ3RoQXJyYXknXTtcclxuXHJcbi8vIFRPRE86IGhhbmRsZSAvbmlsXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVFbmdpbmVEYXRhKGRhdGE6IGFueSwgY29uZGVuc2VkID0gZmFsc2UpIHtcclxuXHRsZXQgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMTAyNCk7XHJcblx0bGV0IG9mZnNldCA9IDA7XHJcblx0bGV0IGluZGVudCA9IDA7XHJcblxyXG5cdGZ1bmN0aW9uIHdyaXRlKHZhbHVlOiBudW1iZXIpIHtcclxuXHRcdGlmIChvZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xyXG5cdFx0XHRjb25zdCBuZXdCdWZmZXIgPSBuZXcgVWludDhBcnJheShidWZmZXIubGVuZ3RoICogMik7XHJcblx0XHRcdG5ld0J1ZmZlci5zZXQoYnVmZmVyKTtcclxuXHRcdFx0YnVmZmVyID0gbmV3QnVmZmVyO1xyXG5cdFx0fVxyXG5cclxuXHRcdGJ1ZmZlcltvZmZzZXRdID0gdmFsdWU7XHJcblx0XHRvZmZzZXQrKztcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHdyaXRlU3RyaW5nKHZhbHVlOiBzdHJpbmcpIHtcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0d3JpdGUodmFsdWUuY2hhckNvZGVBdChpKSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB3cml0ZUluZGVudCgpIHtcclxuXHRcdGlmIChjb25kZW5zZWQpIHtcclxuXHRcdFx0d3JpdGVTdHJpbmcoJyAnKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZW50OyBpKyspIHtcclxuXHRcdFx0XHR3cml0ZVN0cmluZygnXFx0Jyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHdyaXRlUHJvcGVydHkoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcclxuXHRcdHdyaXRlSW5kZW50KCk7XHJcblx0XHR3cml0ZVN0cmluZyhgLyR7a2V5fWApO1xyXG5cdFx0d3JpdGVWYWx1ZSh2YWx1ZSwga2V5LCB0cnVlKTtcclxuXHRcdGlmICghY29uZGVuc2VkKSB3cml0ZVN0cmluZygnXFxuJyk7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBzZXJpYWxpemVJbnQodmFsdWU6IG51bWJlcikge1xyXG5cdFx0cmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBzZXJpYWxpemVGbG9hdCh2YWx1ZTogbnVtYmVyKSB7XHJcblx0XHRyZXR1cm4gdmFsdWUudG9GaXhlZCg1KVxyXG5cdFx0XHQucmVwbGFjZSgvKFxcZCkwKyQvZywgJyQxJylcclxuXHRcdFx0LnJlcGxhY2UoL14wK1xcLihbMS05XSkvZywgJy4kMScpXHJcblx0XHRcdC5yZXBsYWNlKC9eLTArXFwuMChcXGQpL2csICctLjAkMScpO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc2VyaWFsaXplTnVtYmVyKHZhbHVlOiBudW1iZXIsIGtleT86IHN0cmluZykge1xyXG5cdFx0Y29uc3QgaXNGbG9hdCA9IChrZXkgJiYgZmxvYXRLZXlzLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHx8ICh2YWx1ZSB8IDApICE9PSB2YWx1ZTtcclxuXHRcdHJldHVybiBpc0Zsb2F0ID8gc2VyaWFsaXplRmxvYXQodmFsdWUpIDogc2VyaWFsaXplSW50KHZhbHVlKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldEtleXModmFsdWU6IGFueSkge1xyXG5cdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcclxuXHJcblx0XHRpZiAoa2V5cy5pbmRleE9mKCc5OCcpICE9PSAtMSlcclxuXHRcdFx0a2V5cy51bnNoaWZ0KC4uLmtleXMuc3BsaWNlKGtleXMuaW5kZXhPZignOTknKSwgMSkpO1xyXG5cclxuXHRcdGlmIChrZXlzLmluZGV4T2YoJzk5JykgIT09IC0xKVxyXG5cdFx0XHRrZXlzLnVuc2hpZnQoLi4ua2V5cy5zcGxpY2Uoa2V5cy5pbmRleE9mKCc5OScpLCAxKSk7XHJcblxyXG5cdFx0cmV0dXJuIGtleXM7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB3cml0ZVN0cmluZ0J5dGUodmFsdWU6IG51bWJlcikge1xyXG5cdFx0aWYgKHZhbHVlID09PSA0MCB8fCB2YWx1ZSA9PT0gNDEgfHwgdmFsdWUgPT09IDkyKSB7IC8vICggKSBcXFxyXG5cdFx0XHR3cml0ZSg5Mik7IC8vIFxcXHJcblx0XHR9XHJcblxyXG5cdFx0d3JpdGUodmFsdWUpO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gd3JpdGVWYWx1ZSh2YWx1ZTogYW55LCBrZXk/OiBzdHJpbmcsIGluUHJvcGVydHkgPSBmYWxzZSkge1xyXG5cdFx0ZnVuY3Rpb24gd3JpdGVQcmVmaXgoKSB7XHJcblx0XHRcdGlmIChpblByb3BlcnR5KSB7XHJcblx0XHRcdFx0d3JpdGVTdHJpbmcoJyAnKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR3cml0ZUluZGVudCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XHJcblx0XHRcdHdyaXRlUHJlZml4KCk7XHJcblx0XHRcdHdyaXRlU3RyaW5nKGNvbmRlbnNlZCA/ICcvbmlsJyA6ICdudWxsJyk7XHJcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcclxuXHRcdFx0d3JpdGVQcmVmaXgoKTtcclxuXHRcdFx0d3JpdGVTdHJpbmcoc2VyaWFsaXplTnVtYmVyKHZhbHVlLCBrZXkpKTtcclxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcclxuXHRcdFx0d3JpdGVQcmVmaXgoKTtcclxuXHRcdFx0d3JpdGVTdHJpbmcodmFsdWUgPyAndHJ1ZScgOiAnZmFsc2UnKTtcclxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHR3cml0ZVByZWZpeCgpO1xyXG5cclxuXHRcdFx0aWYgKChrZXkgPT09ICc5OScgfHwga2V5ID09PSAnOTgnKSAmJiB2YWx1ZS5jaGFyQXQoMCkgPT09ICcvJykge1xyXG5cdFx0XHRcdHdyaXRlU3RyaW5nKHZhbHVlKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR3cml0ZVN0cmluZygnKCcpO1xyXG5cdFx0XHRcdHdyaXRlKDB4ZmUpO1xyXG5cdFx0XHRcdHdyaXRlKDB4ZmYpO1xyXG5cclxuXHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHRjb25zdCBjb2RlID0gdmFsdWUuY2hhckNvZGVBdChpKTtcclxuXHRcdFx0XHRcdHdyaXRlU3RyaW5nQnl0ZSgoY29kZSA+PiA4KSAmIDB4ZmYpO1xyXG5cdFx0XHRcdFx0d3JpdGVTdHJpbmdCeXRlKGNvZGUgJiAweGZmKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHdyaXRlU3RyaW5nKCcpJyk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuXHRcdFx0d3JpdGVQcmVmaXgoKTtcclxuXHJcblx0XHRcdGlmICh2YWx1ZS5ldmVyeSh4ID0+IHR5cGVvZiB4ID09PSAnbnVtYmVyJykpIHtcclxuXHRcdFx0XHR3cml0ZVN0cmluZygnWycpO1xyXG5cclxuXHRcdFx0XHRjb25zdCBpbnRBcnJheSA9IGludEFycmF5cy5pbmRleE9mKGtleSEpICE9PSAtMTtcclxuXHJcblx0XHRcdFx0Zm9yIChjb25zdCB4IG9mIHZhbHVlKSB7XHJcblx0XHRcdFx0XHR3cml0ZVN0cmluZygnICcpO1xyXG5cdFx0XHRcdFx0d3JpdGVTdHJpbmcoaW50QXJyYXkgPyBzZXJpYWxpemVOdW1iZXIoeCkgOiBzZXJpYWxpemVGbG9hdCh4KSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR3cml0ZVN0cmluZygnIF0nKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR3cml0ZVN0cmluZygnWycpO1xyXG5cdFx0XHRcdGlmICghY29uZGVuc2VkKSB3cml0ZVN0cmluZygnXFxuJyk7XHJcblxyXG5cdFx0XHRcdGZvciAoY29uc3QgeCBvZiB2YWx1ZSkge1xyXG5cdFx0XHRcdFx0d3JpdGVWYWx1ZSh4LCBrZXkpO1xyXG5cdFx0XHRcdFx0aWYgKCFjb25kZW5zZWQpIHdyaXRlU3RyaW5nKCdcXG4nKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHdyaXRlSW5kZW50KCk7XHJcblx0XHRcdFx0d3JpdGVTdHJpbmcoJ10nKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcblx0XHRcdGlmIChpblByb3BlcnR5ICYmICFjb25kZW5zZWQpIHdyaXRlU3RyaW5nKCdcXG4nKTtcclxuXHJcblx0XHRcdHdyaXRlSW5kZW50KCk7XHJcblx0XHRcdHdyaXRlU3RyaW5nKCc8PCcpO1xyXG5cclxuXHRcdFx0aWYgKCFjb25kZW5zZWQpIHdyaXRlU3RyaW5nKCdcXG4nKTtcclxuXHJcblx0XHRcdGluZGVudCsrO1xyXG5cclxuXHRcdFx0Zm9yIChjb25zdCBrZXkgb2YgZ2V0S2V5cyh2YWx1ZSkpIHtcclxuXHRcdFx0XHR3cml0ZVByb3BlcnR5KGtleSwgdmFsdWVba2V5XSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGluZGVudC0tO1xyXG5cdFx0XHR3cml0ZUluZGVudCgpO1xyXG5cdFx0XHR3cml0ZVN0cmluZygnPj4nKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cdH1cclxuXHJcblx0aWYgKGNvbmRlbnNlZCkge1xyXG5cdFx0aWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRmb3IgKGNvbnN0IGtleSBvZiBnZXRLZXlzKGRhdGEpKSB7XHJcblx0XHRcdFx0d3JpdGVQcm9wZXJ0eShrZXksIGRhdGFba2V5XSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9IGVsc2Uge1xyXG5cdFx0d3JpdGVTdHJpbmcoJ1xcblxcbicpO1xyXG5cdFx0d3JpdGVWYWx1ZShkYXRhKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBidWZmZXIuc2xpY2UoMCwgb2Zmc2V0KTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IkQ6XFxQcm9qZWN0c1xcZ2l0aHViXFxhZy1wc2RcXHNyYyJ9\n\n\n//# sourceURL=webpack://psd.index/./node_modules/ag-psd/dist/engineData.js?")},"./node_modules/ag-psd/dist/helpers.js":function(__unused_webpack_module,exports,__webpack_require__){eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.initializeCanvas = exports.createImageData = exports.createCanvasFromData = exports.createCanvas = exports.writeDataRLE = exports.writeDataRaw = exports.decodeBitmap = exports.resetImageData = exports.hasAlpha = exports.clamp = exports.offsetForChannel = exports.Compression = exports.ChannelID = exports.MaskParams = exports.LayerMaskFlags = exports.ColorSpace = exports.createEnum = exports.revMap = exports.layerColors = exports.toBlendMode = exports.fromBlendMode = void 0;\nvar base64_js_1 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\");\nexports.fromBlendMode = {};\nexports.toBlendMode = {\n    'pass': 'pass through',\n    'norm': 'normal',\n    'diss': 'dissolve',\n    'dark': 'darken',\n    'mul ': 'multiply',\n    'idiv': 'color burn',\n    'lbrn': 'linear burn',\n    'dkCl': 'darker color',\n    'lite': 'lighten',\n    'scrn': 'screen',\n    'div ': 'color dodge',\n    'lddg': 'linear dodge',\n    'lgCl': 'lighter color',\n    'over': 'overlay',\n    'sLit': 'soft light',\n    'hLit': 'hard light',\n    'vLit': 'vivid light',\n    'lLit': 'linear light',\n    'pLit': 'pin light',\n    'hMix': 'hard mix',\n    'diff': 'difference',\n    'smud': 'exclusion',\n    'fsub': 'subtract',\n    'fdiv': 'divide',\n    'hue ': 'hue',\n    'sat ': 'saturation',\n    'colr': 'color',\n    'lum ': 'luminosity',\n};\nObject.keys(exports.toBlendMode).forEach(function (key) { return exports.fromBlendMode[exports.toBlendMode[key]] = key; });\nexports.layerColors = [\n    'none', 'red', 'orange', 'yellow', 'green', 'blue', 'violet', 'gray'\n];\nfunction revMap(map) {\n    var result = {};\n    Object.keys(map).forEach(function (key) { return result[map[key]] = key; });\n    return result;\n}\nexports.revMap = revMap;\nfunction createEnum(prefix, def, map) {\n    var rev = revMap(map);\n    var decode = function (val) { return rev[val.split('.')[1]] || def; };\n    var encode = function (val) { return prefix + \".\" + (map[val] || map[def]); };\n    return { decode: decode, encode: encode };\n}\nexports.createEnum = createEnum;\nvar ColorSpace;\n(function (ColorSpace) {\n    ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n    ColorSpace[ColorSpace[\"HSB\"] = 1] = \"HSB\";\n    ColorSpace[ColorSpace[\"CMYK\"] = 2] = \"CMYK\";\n    ColorSpace[ColorSpace[\"Lab\"] = 7] = \"Lab\";\n    ColorSpace[ColorSpace[\"Grayscale\"] = 8] = \"Grayscale\";\n})(ColorSpace = exports.ColorSpace || (exports.ColorSpace = {}));\nvar LayerMaskFlags;\n(function (LayerMaskFlags) {\n    LayerMaskFlags[LayerMaskFlags[\"PositionRelativeToLayer\"] = 1] = \"PositionRelativeToLayer\";\n    LayerMaskFlags[LayerMaskFlags[\"LayerMaskDisabled\"] = 2] = \"LayerMaskDisabled\";\n    LayerMaskFlags[LayerMaskFlags[\"InvertLayerMaskWhenBlending\"] = 4] = \"InvertLayerMaskWhenBlending\";\n    LayerMaskFlags[LayerMaskFlags[\"LayerMaskFromRenderingOtherData\"] = 8] = \"LayerMaskFromRenderingOtherData\";\n    LayerMaskFlags[LayerMaskFlags[\"MaskHasParametersAppliedToIt\"] = 16] = \"MaskHasParametersAppliedToIt\";\n})(LayerMaskFlags = exports.LayerMaskFlags || (exports.LayerMaskFlags = {}));\nvar MaskParams;\n(function (MaskParams) {\n    MaskParams[MaskParams[\"UserMaskDensity\"] = 1] = \"UserMaskDensity\";\n    MaskParams[MaskParams[\"UserMaskFeather\"] = 2] = \"UserMaskFeather\";\n    MaskParams[MaskParams[\"VectorMaskDensity\"] = 4] = \"VectorMaskDensity\";\n    MaskParams[MaskParams[\"VectorMaskFeather\"] = 8] = \"VectorMaskFeather\";\n})(MaskParams = exports.MaskParams || (exports.MaskParams = {}));\nvar ChannelID;\n(function (ChannelID) {\n    ChannelID[ChannelID[\"Red\"] = 0] = \"Red\";\n    ChannelID[ChannelID[\"Green\"] = 1] = \"Green\";\n    ChannelID[ChannelID[\"Blue\"] = 2] = \"Blue\";\n    ChannelID[ChannelID[\"Transparency\"] = -1] = \"Transparency\";\n    ChannelID[ChannelID[\"UserMask\"] = -2] = \"UserMask\";\n    ChannelID[ChannelID[\"RealUserMask\"] = -3] = \"RealUserMask\";\n})(ChannelID = exports.ChannelID || (exports.ChannelID = {}));\nvar Compression;\n(function (Compression) {\n    Compression[Compression[\"RawData\"] = 0] = \"RawData\";\n    Compression[Compression[\"RleCompressed\"] = 1] = \"RleCompressed\";\n    Compression[Compression[\"ZipWithoutPrediction\"] = 2] = \"ZipWithoutPrediction\";\n    Compression[Compression[\"ZipWithPrediction\"] = 3] = \"ZipWithPrediction\";\n})(Compression = exports.Compression || (exports.Compression = {}));\nfunction offsetForChannel(channelId) {\n    switch (channelId) {\n        case 0 /* Red */: return 0;\n        case 1 /* Green */: return 1;\n        case 2 /* Blue */: return 2;\n        case -1 /* Transparency */: return 3;\n        default: return channelId + 1;\n    }\n}\nexports.offsetForChannel = offsetForChannel;\nfunction clamp(value, min, max) {\n    return value < min ? min : (value > max ? max : value);\n}\nexports.clamp = clamp;\nfunction hasAlpha(data) {\n    var size = data.width * data.height * 4;\n    for (var i = 3; i < size; i += 4) {\n        if (data.data[i] !== 255) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.hasAlpha = hasAlpha;\nfunction resetImageData(_a) {\n    var width = _a.width, height = _a.height, data = _a.data;\n    var size = (width * height) | 0;\n    var buffer = new Uint32Array(data.buffer);\n    for (var p = 0; p < size; p = (p + 1) | 0) {\n        buffer[p] = 0xff000000;\n    }\n}\nexports.resetImageData = resetImageData;\nfunction decodeBitmap(input, output, width, height) {\n    for (var y = 0, p = 0, o = 0; y < height; y++) {\n        for (var x = 0; x < width;) {\n            var b = input[o++];\n            for (var i = 0; i < 8 && x < width; i++, x++) {\n                var v = b & 0x80 ? 0 : 255;\n                b = b << 1;\n                output[p++] = v;\n                output[p++] = v;\n                output[p++] = v;\n                output[p++] = 255;\n            }\n        }\n    }\n}\nexports.decodeBitmap = decodeBitmap;\nfunction writeDataRaw(data, offset, width, height) {\n    if (!width || !height)\n        return undefined;\n    var array = new Uint8Array(width * height);\n    for (var i = 0; i < array.length; i++) {\n        array[i] = data.data[i * 4 + offset];\n    }\n    return array;\n}\nexports.writeDataRaw = writeDataRaw;\nfunction writeDataRLE(buffer, _a, width, height, offsets) {\n    var data = _a.data;\n    if (!width || !height)\n        return undefined;\n    var stride = (4 * width) | 0;\n    var ol = 0;\n    var o = (offsets.length * 2 * height) | 0;\n    for (var _i = 0, offsets_1 = offsets; _i < offsets_1.length; _i++) {\n        var offset = offsets_1[_i];\n        for (var y = 0, p = offset | 0; y < height; y++) {\n            var strideStart = (y * stride) | 0;\n            var strideEnd = (strideStart + stride) | 0;\n            var lastIndex = (strideEnd + offset - 4) | 0;\n            var lastIndex2 = (lastIndex - 4) | 0;\n            var startOffset = o;\n            for (p = (strideStart + offset) | 0; p < strideEnd; p = (p + 4) | 0) {\n                if (p < lastIndex2) {\n                    var value1 = data[p];\n                    p = (p + 4) | 0;\n                    var value2 = data[p];\n                    p = (p + 4) | 0;\n                    var value3 = data[p];\n                    if (value1 === value2 && value1 === value3) {\n                        var count = 3;\n                        while (count < 128 && p < lastIndex && data[(p + 4) | 0] === value1) {\n                            count = (count + 1) | 0;\n                            p = (p + 4) | 0;\n                        }\n                        buffer[o++] = 1 - count;\n                        buffer[o++] = value1;\n                    }\n                    else {\n                        var countIndex = o;\n                        var writeLast = true;\n                        var count = 1;\n                        buffer[o++] = 0;\n                        buffer[o++] = value1;\n                        while (p < lastIndex && count < 128) {\n                            p = (p + 4) | 0;\n                            value1 = value2;\n                            value2 = value3;\n                            value3 = data[p];\n                            if (value1 === value2 && value1 === value3) {\n                                p = (p - 12) | 0;\n                                writeLast = false;\n                                break;\n                            }\n                            else {\n                                count++;\n                                buffer[o++] = value1;\n                            }\n                        }\n                        if (writeLast) {\n                            if (count < 127) {\n                                buffer[o++] = value2;\n                                buffer[o++] = value3;\n                                count += 2;\n                            }\n                            else if (count < 128) {\n                                buffer[o++] = value2;\n                                count++;\n                                p = (p - 4) | 0;\n                            }\n                            else {\n                                p = (p - 8) | 0;\n                            }\n                        }\n                        buffer[countIndex] = count - 1;\n                    }\n                }\n                else if (p === lastIndex) {\n                    buffer[o++] = 0;\n                    buffer[o++] = data[p];\n                }\n                else { // p === lastIndex2\n                    buffer[o++] = 1;\n                    buffer[o++] = data[p];\n                    p = (p + 4) | 0;\n                    buffer[o++] = data[p];\n                }\n            }\n            var length_1 = o - startOffset;\n            buffer[ol++] = (length_1 >> 8) & 0xff;\n            buffer[ol++] = length_1 & 0xff;\n        }\n    }\n    return buffer.slice(0, o);\n}\nexports.writeDataRLE = writeDataRLE;\nexports.createCanvas = function () {\n    throw new Error('Canvas not initialized, use initializeCanvas method to set up createCanvas method');\n};\nexports.createCanvasFromData = function () {\n    throw new Error('Canvas not initialized, use initializeCanvas method to set up createCanvasFromData method');\n};\nvar tempCanvas = undefined;\nexports.createImageData = function (width, height) {\n    if (!tempCanvas)\n        tempCanvas = exports.createCanvas(1, 1);\n    return tempCanvas.getContext('2d').createImageData(width, height);\n};\nif (typeof document !== 'undefined') {\n    exports.createCanvas = function (width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        return canvas;\n    };\n    exports.createCanvasFromData = function (data) {\n        var image = new Image();\n        image.src = 'data:image/jpeg;base64,' + base64_js_1.fromByteArray(data);\n        var canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        canvas.getContext('2d').drawImage(image, 0, 0);\n        return canvas;\n    };\n}\nfunction initializeCanvas(createCanvasMethod, createCanvasFromDataMethod, createImageDataMethod) {\n    exports.createCanvas = createCanvasMethod;\n    exports.createCanvasFromData = createCanvasFromDataMethod || exports.createCanvasFromData;\n    exports.createImageData = createImageDataMethod || exports.createImageData;\n}\nexports.initializeCanvas = initializeCanvas;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n//# sourceURL=webpack://psd.index/./node_modules/ag-psd/dist/helpers.js?")},"./node_modules/ag-psd/dist/imageResources.js":function(__unused_webpack_module,exports,__webpack_require__){eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resourceHandlersMap = exports.resourceHandlers = void 0;\nvar base64_js_1 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\");\nvar psdReader_1 = __webpack_require__(/*! ./psdReader */ \"./node_modules/ag-psd/dist/psdReader.js\");\nvar psdWriter_1 = __webpack_require__(/*! ./psdWriter */ \"./node_modules/ag-psd/dist/psdWriter.js\");\nvar helpers_1 = __webpack_require__(/*! ./helpers */ \"./node_modules/ag-psd/dist/helpers.js\");\nvar utf8_1 = __webpack_require__(/*! ./utf8 */ \"./node_modules/ag-psd/dist/utf8.js\");\nvar descriptor_1 = __webpack_require__(/*! ./descriptor */ \"./node_modules/ag-psd/dist/descriptor.js\");\nexports.resourceHandlers = [];\nexports.resourceHandlersMap = {};\nfunction addHandler(key, has, read, write) {\n    var handler = { key: key, has: has, read: read, write: write };\n    exports.resourceHandlers.push(handler);\n    exports.resourceHandlersMap[handler.key] = handler;\n}\nvar MOCK_HANDLERS = false;\nvar RESOLUTION_UNITS = [undefined, 'PPI', 'PPCM'];\nvar MEASUREMENT_UNITS = [undefined, 'Inches', 'Centimeters', 'Points', 'Picas', 'Columns'];\nvar hex = '0123456789abcdef';\nfunction charToNibble(code) {\n    return code <= 57 ? code - 48 : code - 87;\n}\nfunction byteAt(value, index) {\n    return (charToNibble(value.charCodeAt(index)) << 4) | charToNibble(value.charCodeAt(index + 1));\n}\nfunction readUtf8String(reader, length) {\n    var buffer = psdReader_1.readBytes(reader, length);\n    return utf8_1.decodeString(buffer);\n}\nfunction writeUtf8String(writer, value) {\n    var buffer = utf8_1.encodeString(value);\n    psdWriter_1.writeBytes(writer, buffer);\n}\nMOCK_HANDLERS && addHandler(1028, // IPTC-NAA record\nfunction (// IPTC-NAA record\ntarget) { return target._ir1028 !== undefined; }, function (reader, target, left) {\n    console.log('image resource 1028', left());\n    target._ir1028 = psdReader_1.readBytes(reader, left());\n}, function (writer, target) {\n    psdWriter_1.writeBytes(writer, target._ir1028);\n});\naddHandler(1061, function (target) { return target.captionDigest !== undefined; }, function (reader, target) {\n    var captionDigest = '';\n    for (var i = 0; i < 16; i++) {\n        var byte = psdReader_1.readUint8(reader);\n        captionDigest += hex[byte >> 4];\n        captionDigest += hex[byte & 0xf];\n    }\n    target.captionDigest = captionDigest;\n}, function (writer, target) {\n    for (var i = 0; i < 16; i++) {\n        psdWriter_1.writeUint8(writer, byteAt(target.captionDigest, i * 2));\n    }\n});\naddHandler(1060, function (target) { return target.xmpMetadata !== undefined; }, function (reader, target, left) { return target.xmpMetadata = readUtf8String(reader, left()); }, function (writer, target) { return writeUtf8String(writer, target.xmpMetadata); });\nvar Inte = helpers_1.createEnum('Inte', 'perceptual', {\n    'perceptual': 'Img ',\n    'saturation': 'Grp ',\n    'relative colorimetric': 'Clrm',\n    'absolute colorimetric': 'AClr',\n});\naddHandler(1082, function (target) { return target.printInformation !== undefined; }, function (reader, target) {\n    var _a, _b;\n    var desc = descriptor_1.readVersionAndDescriptor(reader);\n    target.printInformation = {\n        printerName: desc.printerName || '',\n        renderingIntent: Inte.decode((_a = desc.Inte) !== null && _a !== void 0 ? _a : 'Inte.Img '),\n    };\n    var info = target.printInformation;\n    if (desc.PstS !== undefined)\n        info.printerManagesColors = desc.PstS;\n    if (desc['Nm  '] !== undefined)\n        info.printerProfile = desc['Nm  '];\n    if (desc.MpBl !== undefined)\n        info.blackPointCompensation = desc.MpBl;\n    if (desc.printSixteenBit !== undefined)\n        info.printSixteenBit = desc.printSixteenBit;\n    if (desc.hardProof !== undefined)\n        info.hardProof = desc.hardProof;\n    if (desc.printProofSetup) {\n        if ('Bltn' in desc.printProofSetup) {\n            info.proofSetup = { builtin: desc.printProofSetup.Bltn.split('.')[1] };\n        }\n        else {\n            info.proofSetup = {\n                profile: desc.printProofSetup.profile,\n                renderingIntent: Inte.decode((_b = desc.printProofSetup.Inte) !== null && _b !== void 0 ? _b : 'Inte.Img '),\n                blackPointCompensation: !!desc.printProofSetup.MpBl,\n                paperWhite: !!desc.printProofSetup.paperWhite,\n            };\n        }\n    }\n}, function (writer, target) {\n    var _a, _b;\n    var info = target.printInformation;\n    var desc = {};\n    if (info.printerManagesColors) {\n        desc.PstS = true;\n    }\n    else {\n        if (info.hardProof !== undefined)\n            desc.hardProof = !!info.hardProof;\n        desc.ClrS = 'Clrs.RGBC'; // TODO: ???\n        desc['Nm  '] = (_a = info.printerProfile) !== null && _a !== void 0 ? _a : 'CIE RGB';\n    }\n    desc.Inte = Inte.encode(info.renderingIntent);\n    if (!info.printerManagesColors)\n        desc.MpBl = !!info.blackPointCompensation;\n    desc.printSixteenBit = !!info.printSixteenBit;\n    desc.printerName = info.printerName || '';\n    if (info.proofSetup && 'profile' in info.proofSetup) {\n        desc.printProofSetup = {\n            profile: info.proofSetup.profile || '',\n            Inte: Inte.encode(info.proofSetup.renderingIntent),\n            MpBl: !!info.proofSetup.blackPointCompensation,\n            paperWhite: !!info.proofSetup.paperWhite,\n        };\n    }\n    else {\n        desc.printProofSetup = {\n            Bltn: ((_b = info.proofSetup) === null || _b === void 0 ? void 0 : _b.builtin) ? \"builtinProof.\" + info.proofSetup.builtin : 'builtinProof.proofCMYK',\n        };\n    }\n    descriptor_1.writeVersionAndDescriptor(writer, '', 'printOutput', desc);\n});\nMOCK_HANDLERS && addHandler(1083, // Print style\nfunction (// Print style\ntarget) { return target._ir1083 !== undefined; }, function (reader, target, left) {\n    console.log('image resource 1083', left());\n    target._ir1083 = psdReader_1.readBytes(reader, left());\n    // TODO:\n    // const desc = readVersionAndDescriptor(reader);\n    // console.log('1083', require('util').inspect(desc, false, 99, true));\n}, function (writer, target) {\n    psdWriter_1.writeBytes(writer, target._ir1083);\n});\naddHandler(1005, function (target) { return target.resolutionInfo !== undefined; }, function (reader, target) {\n    var horizontalResolution = psdReader_1.readFixedPoint32(reader);\n    var horizontalResolutionUnit = psdReader_1.readUint16(reader);\n    var widthUnit = psdReader_1.readUint16(reader);\n    var verticalResolution = psdReader_1.readFixedPoint32(reader);\n    var verticalResolutionUnit = psdReader_1.readUint16(reader);\n    var heightUnit = psdReader_1.readUint16(reader);\n    target.resolutionInfo = {\n        horizontalResolution: horizontalResolution,\n        horizontalResolutionUnit: RESOLUTION_UNITS[horizontalResolutionUnit] || 'PPI',\n        widthUnit: MEASUREMENT_UNITS[widthUnit] || 'Inches',\n        verticalResolution: verticalResolution,\n        verticalResolutionUnit: RESOLUTION_UNITS[verticalResolutionUnit] || 'PPI',\n        heightUnit: MEASUREMENT_UNITS[heightUnit] || 'Inches',\n    };\n}, function (writer, target) {\n    var info = target.resolutionInfo;\n    psdWriter_1.writeFixedPoint32(writer, info.horizontalResolution || 0);\n    psdWriter_1.writeUint16(writer, Math.max(1, RESOLUTION_UNITS.indexOf(info.horizontalResolutionUnit)));\n    psdWriter_1.writeUint16(writer, Math.max(1, MEASUREMENT_UNITS.indexOf(info.widthUnit)));\n    psdWriter_1.writeFixedPoint32(writer, info.verticalResolution || 0);\n    psdWriter_1.writeUint16(writer, Math.max(1, RESOLUTION_UNITS.indexOf(info.verticalResolutionUnit)));\n    psdWriter_1.writeUint16(writer, Math.max(1, MEASUREMENT_UNITS.indexOf(info.heightUnit)));\n});\nvar printScaleStyles = ['centered', 'size to fit', 'user defined'];\naddHandler(1062, function (target) { return target.printScale !== undefined; }, function (reader, target) {\n    target.printScale = {\n        style: printScaleStyles[psdReader_1.readInt16(reader)],\n        x: psdReader_1.readFloat32(reader),\n        y: psdReader_1.readFloat32(reader),\n        scale: psdReader_1.readFloat32(reader),\n    };\n}, function (writer, target) {\n    var _a = target.printScale, style = _a.style, x = _a.x, y = _a.y, scale = _a.scale;\n    psdWriter_1.writeInt16(writer, Math.max(0, printScaleStyles.indexOf(style)));\n    psdWriter_1.writeFloat32(writer, x || 0);\n    psdWriter_1.writeFloat32(writer, y || 0);\n    psdWriter_1.writeFloat32(writer, scale || 0);\n});\naddHandler(1006, function (target) { return target.alphaChannelNames !== undefined; }, function (reader, target, left) {\n    target.alphaChannelNames = [];\n    while (left()) {\n        var value = psdReader_1.readPascalString(reader, 1);\n        target.alphaChannelNames.push(value);\n    }\n}, function (writer, target) {\n    for (var _i = 0, _a = target.alphaChannelNames; _i < _a.length; _i++) {\n        var name_1 = _a[_i];\n        psdWriter_1.writePascalString(writer, name_1, 1);\n    }\n});\naddHandler(1045, function (target) { return target.alphaChannelNames !== undefined; }, function (reader, target, left) {\n    target.alphaChannelNames = [];\n    while (left()) {\n        target.alphaChannelNames.push(psdReader_1.readUnicodeString(reader));\n    }\n}, function (writer, target) {\n    for (var _i = 0, _a = target.alphaChannelNames; _i < _a.length; _i++) {\n        var name_2 = _a[_i];\n        psdWriter_1.writeUnicodeStringWithPadding(writer, name_2);\n    }\n});\nMOCK_HANDLERS && addHandler(1077, function (target) { return target._ir1077 !== undefined; }, function (reader, target, left) {\n    console.log('image resource 1077', left());\n    target._ir1077 = psdReader_1.readBytes(reader, left());\n}, function (writer, target) {\n    psdWriter_1.writeBytes(writer, target._ir1077);\n});\naddHandler(1053, function (target) { return target.alphaIdentifiers !== undefined; }, function (reader, target, left) {\n    target.alphaIdentifiers = [];\n    while (left() >= 4) {\n        target.alphaIdentifiers.push(psdReader_1.readUint32(reader));\n    }\n}, function (writer, target) {\n    for (var _i = 0, _a = target.alphaIdentifiers; _i < _a.length; _i++) {\n        var id = _a[_i];\n        psdWriter_1.writeUint32(writer, id);\n    }\n});\naddHandler(1010, function (target) { return target.backgroundColor !== undefined; }, function (reader, target) { return target.backgroundColor = psdReader_1.readColor(reader); }, function (writer, target) { return psdWriter_1.writeColor(writer, target.backgroundColor); });\naddHandler(1037, function (target) { return target.globalAngle !== undefined; }, function (reader, target) { return target.globalAngle = psdReader_1.readUint32(reader); }, function (writer, target) { return psdWriter_1.writeUint32(writer, target.globalAngle); });\naddHandler(1049, function (target) { return target.globalAltitude !== undefined; }, function (reader, target) { return target.globalAltitude = psdReader_1.readUint32(reader); }, function (writer, target) { return psdWriter_1.writeUint32(writer, target.globalAltitude); });\naddHandler(1011, function (target) { return target.printFlags !== undefined; }, function (reader, target) {\n    target.printFlags = {\n        labels: !!psdReader_1.readUint8(reader),\n        cropMarks: !!psdReader_1.readUint8(reader),\n        colorBars: !!psdReader_1.readUint8(reader),\n        registrationMarks: !!psdReader_1.readUint8(reader),\n        negative: !!psdReader_1.readUint8(reader),\n        flip: !!psdReader_1.readUint8(reader),\n        interpolate: !!psdReader_1.readUint8(reader),\n        caption: !!psdReader_1.readUint8(reader),\n        printFlags: !!psdReader_1.readUint8(reader),\n    };\n}, function (writer, target) {\n    var flags = target.printFlags;\n    psdWriter_1.writeUint8(writer, flags.labels ? 1 : 0);\n    psdWriter_1.writeUint8(writer, flags.cropMarks ? 1 : 0);\n    psdWriter_1.writeUint8(writer, flags.colorBars ? 1 : 0);\n    psdWriter_1.writeUint8(writer, flags.registrationMarks ? 1 : 0);\n    psdWriter_1.writeUint8(writer, flags.negative ? 1 : 0);\n    psdWriter_1.writeUint8(writer, flags.flip ? 1 : 0);\n    psdWriter_1.writeUint8(writer, flags.interpolate ? 1 : 0);\n    psdWriter_1.writeUint8(writer, flags.caption ? 1 : 0);\n    psdWriter_1.writeUint8(writer, flags.printFlags ? 1 : 0);\n});\nMOCK_HANDLERS && addHandler(10000, // Print flags\nfunction (// Print flags\ntarget) { return target._ir10000 !== undefined; }, function (reader, target, left) {\n    console.log('image resource 10000', left());\n    target._ir10000 = psdReader_1.readBytes(reader, left());\n}, function (writer, target) {\n    psdWriter_1.writeBytes(writer, target._ir10000);\n});\nMOCK_HANDLERS && addHandler(1013, // Color halftoning\nfunction (// Color halftoning\ntarget) { return target._ir1013 !== undefined; }, function (reader, target, left) {\n    console.log('image resource 1013', left());\n    target._ir1013 = psdReader_1.readBytes(reader, left());\n}, function (writer, target) {\n    psdWriter_1.writeBytes(writer, target._ir1013);\n});\nMOCK_HANDLERS && addHandler(1016, // Color transfer functions\nfunction (// Color transfer functions\ntarget) { return target._ir1016 !== undefined; }, function (reader, target, left) {\n    console.log('image resource 1016', left());\n    target._ir1016 = psdReader_1.readBytes(reader, left());\n}, function (writer, target) {\n    psdWriter_1.writeBytes(writer, target._ir1016);\n});\naddHandler(1024, function (target) { return target.layerState !== undefined; }, function (reader, target) { return target.layerState = psdReader_1.readUint16(reader); }, function (writer, target) { return psdWriter_1.writeUint16(writer, target.layerState); });\naddHandler(1026, function (target) { return target.layersGroup !== undefined; }, function (reader, target, left) {\n    target.layersGroup = [];\n    while (left()) {\n        target.layersGroup.push(psdReader_1.readUint16(reader));\n    }\n}, function (writer, target) {\n    for (var _i = 0, _a = target.layersGroup; _i < _a.length; _i++) {\n        var g = _a[_i];\n        psdWriter_1.writeUint16(writer, g);\n    }\n});\naddHandler(1072, function (target) { return target.layerGroupsEnabledId !== undefined; }, function (reader, target, left) {\n    target.layerGroupsEnabledId = [];\n    while (left()) {\n        target.layerGroupsEnabledId.push(psdReader_1.readUint8(reader));\n    }\n}, function (writer, target) {\n    for (var _i = 0, _a = target.layerGroupsEnabledId; _i < _a.length; _i++) {\n        var id = _a[_i];\n        psdWriter_1.writeUint8(writer, id);\n    }\n});\naddHandler(1069, function (target) { return target.layerSelectionIds !== undefined; }, function (reader, target) {\n    var count = psdReader_1.readUint16(reader);\n    target.layerSelectionIds = [];\n    while (count--) {\n        target.layerSelectionIds.push(psdReader_1.readUint32(reader));\n    }\n}, function (writer, target) {\n    psdWriter_1.writeUint16(writer, target.layerSelectionIds.length);\n    for (var _i = 0, _a = target.layerSelectionIds; _i < _a.length; _i++) {\n        var id = _a[_i];\n        psdWriter_1.writeUint32(writer, id);\n    }\n});\naddHandler(1032, function (target) { return target.gridAndGuidesInformation !== undefined; }, function (reader, target) {\n    var version = psdReader_1.readUint32(reader);\n    var horizontal = psdReader_1.readUint32(reader);\n    var vertical = psdReader_1.readUint32(reader);\n    var count = psdReader_1.readUint32(reader);\n    if (version !== 1)\n        throw new Error(\"Invalid 1032 resource version: \" + version);\n    target.gridAndGuidesInformation = {\n        grid: { horizontal: horizontal, vertical: vertical },\n        guides: [],\n    };\n    for (var i = 0; i < count; i++) {\n        target.gridAndGuidesInformation.guides.push({\n            location: psdReader_1.readUint32(reader) / 32,\n            direction: psdReader_1.readUint8(reader) ? 'horizontal' : 'vertical'\n        });\n    }\n}, function (writer, target) {\n    var info = target.gridAndGuidesInformation;\n    var grid = info.grid || { horizontal: 18 * 32, vertical: 18 * 32 };\n    var guides = info.guides || [];\n    psdWriter_1.writeUint32(writer, 1);\n    psdWriter_1.writeUint32(writer, grid.horizontal);\n    psdWriter_1.writeUint32(writer, grid.vertical);\n    psdWriter_1.writeUint32(writer, guides.length);\n    for (var _i = 0, guides_1 = guides; _i < guides_1.length; _i++) {\n        var g = guides_1[_i];\n        psdWriter_1.writeUint32(writer, g.location * 32);\n        psdWriter_1.writeUint8(writer, g.direction === 'horizontal' ? 1 : 0);\n    }\n});\naddHandler(1054, function (target) { return target.urlsList !== undefined; }, function (reader, target, _, options) {\n    var count = psdReader_1.readUint32(reader);\n    if (count) {\n        if (!options.throwForMissingFeatures)\n            return;\n        throw new Error('Not implemented: URL List');\n    }\n    // TODO: read actual URL list\n    target.urlsList = [];\n}, function (writer, target) {\n    psdWriter_1.writeUint32(writer, target.urlsList.length);\n    // TODO: write actual URL list\n    if (target.urlsList.length) {\n        throw new Error('Not implemented: URL List');\n    }\n});\nMOCK_HANDLERS && addHandler(1050, // Slices\nfunction (// Slices\ntarget) { return target._ir1050 !== undefined; }, function (reader, target, left) {\n    console.log('image resource 1050', left());\n    target._ir1050 = psdReader_1.readBytes(reader, left());\n}, function (writer, target) {\n    psdWriter_1.writeBytes(writer, target._ir1050);\n});\naddHandler(1064, function (target) { return target.pixelAspectRatio !== undefined; }, function (reader, target) {\n    var version = psdReader_1.readUint32(reader);\n    if (version > 2)\n        throw new Error('Invalid pixelAspectRatio version');\n    target.pixelAspectRatio = { aspect: psdReader_1.readFloat64(reader) };\n}, function (writer, target) {\n    psdWriter_1.writeUint32(writer, 2); // version\n    psdWriter_1.writeFloat64(writer, target.pixelAspectRatio.aspect);\n});\nMOCK_HANDLERS && addHandler(1039, // ICC Profile\nfunction (// ICC Profile\ntarget) { return target._ir1039 !== undefined; }, function (reader, target, left) {\n    console.log('image resource 1039', left());\n    target._ir1039 = psdReader_1.readBytes(reader, left());\n}, function (writer, target) {\n    psdWriter_1.writeBytes(writer, target._ir1039);\n});\naddHandler(1044, function (target) { return target.idsSeedNumber !== undefined; }, function (reader, target) { return target.idsSeedNumber = psdReader_1.readUint32(reader); }, function (writer, target) { return psdWriter_1.writeUint32(writer, target.idsSeedNumber); });\naddHandler(1036, function (target) { return target.thumbnail !== undefined || target.thumbnailRaw !== undefined; }, function (reader, target, left, options) {\n    var format = psdReader_1.readUint32(reader); // 1 = kJpegRGB, 0 = kRawRGB\n    var width = psdReader_1.readUint32(reader);\n    var height = psdReader_1.readUint32(reader);\n    psdReader_1.readUint32(reader); // widthBytes = (width * bits_per_pixel + 31) / 32 * 4.\n    psdReader_1.readUint32(reader); // totalSize = widthBytes * height * planes\n    psdReader_1.readUint32(reader); // sizeAfterCompression\n    var bitsPerPixel = psdReader_1.readUint16(reader); // 24\n    var planes = psdReader_1.readUint16(reader); // 1\n    if (format !== 1 || bitsPerPixel !== 24 || planes !== 1) {\n        options.logMissingFeatures && console.log(\"Invalid thumbnail data (format: \" + format + \", bitsPerPixel: \" + bitsPerPixel + \", planes: \" + planes + \")\");\n        psdReader_1.skipBytes(reader, left());\n        return;\n    }\n    var size = left();\n    var data = psdReader_1.readBytes(reader, size);\n    if (options.useRawThumbnail) {\n        target.thumbnailRaw = { width: width, height: height, data: data };\n    }\n    else {\n        target.thumbnail = helpers_1.createCanvasFromData(data);\n    }\n}, function (writer, target) {\n    var width = 0;\n    var height = 0;\n    var data;\n    if (target.thumbnailRaw) {\n        width = target.thumbnailRaw.width;\n        height = target.thumbnailRaw.height;\n        data = target.thumbnailRaw.data;\n    }\n    else {\n        width = target.thumbnail.width;\n        height = target.thumbnail.height;\n        data = base64_js_1.toByteArray(target.thumbnail.toDataURL('image/jpeg', 1).substr('data:image/jpeg;base64,'.length));\n    }\n    var bitsPerPixel = 24;\n    var widthBytes = Math.floor((width * bitsPerPixel + 31) / 32) * 4;\n    var planes = 1;\n    var totalSize = widthBytes * height * planes;\n    var sizeAfterCompression = data.length;\n    psdWriter_1.writeUint32(writer, 1); // 1 = kJpegRGB\n    psdWriter_1.writeUint32(writer, width);\n    psdWriter_1.writeUint32(writer, height);\n    psdWriter_1.writeUint32(writer, widthBytes);\n    psdWriter_1.writeUint32(writer, totalSize);\n    psdWriter_1.writeUint32(writer, sizeAfterCompression);\n    psdWriter_1.writeUint16(writer, bitsPerPixel);\n    psdWriter_1.writeUint16(writer, planes);\n    psdWriter_1.writeBytes(writer, data);\n});\naddHandler(1057, function (target) { return target.versionInfo !== undefined; }, function (reader, target, left) {\n    var version = psdReader_1.readUint32(reader);\n    if (version !== 1)\n        throw new Error('Invalid versionInfo version');\n    target.versionInfo = {\n        hasRealMergedData: !!psdReader_1.readUint8(reader),\n        writerName: psdReader_1.readUnicodeString(reader),\n        readerName: psdReader_1.readUnicodeString(reader),\n        fileVersion: psdReader_1.readUint32(reader),\n    };\n    psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n    var versionInfo = target.versionInfo;\n    psdWriter_1.writeUint32(writer, 1); // version\n    psdWriter_1.writeUint8(writer, versionInfo.hasRealMergedData ? 1 : 0);\n    psdWriter_1.writeUnicodeString(writer, versionInfo.writerName);\n    psdWriter_1.writeUnicodeString(writer, versionInfo.readerName);\n    psdWriter_1.writeUint32(writer, versionInfo.fileVersion);\n});\nMOCK_HANDLERS && addHandler(1058, // EXIF data 1.\nfunction (// EXIF data 1.\ntarget) { return target._ir1058 !== undefined; }, function (reader, target, left) {\n    console.log('image resource 1058', left());\n    target._ir1058 = psdReader_1.readBytes(reader, left());\n}, function (writer, target) {\n    psdWriter_1.writeBytes(writer, target._ir1058);\n});\n// addHandler(\n// \t1025,\n// \ttarget => (target as any)._ir1025 !== undefined,\n// \t(reader, target, left) => {\n// \t\tconsole.log('image resource 1025', left());\n// \t\t(target as any)._ir1025 = readBytes(reader, left());\n// \t},\n// \t(writer, target) => {\n// \t\twriteBytes(writer, (target as any)._ir1025);\n// \t},\n// );\nvar FrmD = helpers_1.createEnum('FrmD', '', {\n    auto: 'Auto',\n    none: 'None',\n    dispose: 'Disp',\n});\n// TODO: Unfinished\nMOCK_HANDLERS && addHandler(4000, function (target) { return target._ir4000 !== undefined; }, function (reader, target, left, _a) {\n    var logMissingFeatures = _a.logMissingFeatures, logDevFeatures = _a.logDevFeatures;\n    if (MOCK_HANDLERS) {\n        console.log('image resource 4000', left());\n        target._ir4000 = psdReader_1.readBytes(reader, left());\n        return;\n    }\n    var key = psdReader_1.readSignature(reader);\n    if (key === 'mani') {\n        psdReader_1.checkSignature(reader, 'IRFR');\n        psdReader_1.readSection(reader, 1, function (left) {\n            var _loop_1 = function () {\n                psdReader_1.checkSignature(reader, '8BIM');\n                var key_1 = psdReader_1.readSignature(reader);\n                psdReader_1.readSection(reader, 1, function (left) {\n                    if (key_1 === 'AnDs') {\n                        var desc = descriptor_1.readVersionAndDescriptor(reader);\n                        // console.log('AnDs', desc);\n                        logDevFeatures && console.log('#4000 AnDs', desc);\n                        // logDevFeatures && console.log('#4000 AnDs', require('util').inspect(desc, false, 99, true));\n                        var result = {\n                            // desc.AFSt ???\n                            frames: desc.FrIn.map(function (x) { return ({\n                                id: x.FrID,\n                                delay: x.FrDl / 100,\n                                dispose: x.FrDs ? FrmD.decode(x.FrDs) : 'auto',\n                            }); }),\n                            animations: desc.FSts.map(function (x) { return ({\n                                id: x.FsID,\n                                frames: x.FsFr,\n                                repeats: x.LCnt,\n                            }); }),\n                        };\n                        logDevFeatures && console.log('#4000 AnDs:result', result);\n                        // logDevFeatures && console.log('#4000 AnDs:result', require('util').inspect(result, false, 99, true));\n                    }\n                    else if (key_1 === 'Roll') {\n                        var bytes = psdReader_1.readBytes(reader, left());\n                        logDevFeatures && console.log('#4000 Roll', bytes);\n                    }\n                    else {\n                        logMissingFeatures && console.log('Unhandled subsection in #4000', key_1);\n                    }\n                });\n            };\n            while (left()) {\n                _loop_1();\n            }\n        });\n    }\n    else if (key === 'mopt') {\n        var bytes = psdReader_1.readBytes(reader, left());\n        logDevFeatures && console.log('#4000 mopt', bytes);\n    }\n    else {\n        logMissingFeatures && console.log('Unhandled key in #4000:', key);\n        return;\n    }\n}, function (writer, target) {\n    psdWriter_1.writeBytes(writer, target._ir4000);\n});\n// TODO: Unfinished\nMOCK_HANDLERS && addHandler(4001, function (target) { return target._ir4001 !== undefined; }, function (reader, target, left, _a) {\n    var logMissingFeatures = _a.logMissingFeatures, logDevFeatures = _a.logDevFeatures;\n    if (MOCK_HANDLERS) {\n        console.log('image resource 4001', left());\n        target._ir4001 = psdReader_1.readBytes(reader, left());\n        return;\n    }\n    var key = psdReader_1.readSignature(reader);\n    if (key === 'mfri') {\n        var version = psdReader_1.readUint32(reader);\n        if (version !== 2)\n            throw new Error('Invalid mfri version');\n        var length_1 = psdReader_1.readUint32(reader);\n        var bytes = psdReader_1.readBytes(reader, length_1);\n        logDevFeatures && console.log('mfri', bytes);\n    }\n    else if (key === 'mset') {\n        var desc = descriptor_1.readVersionAndDescriptor(reader);\n        logDevFeatures && console.log('mset', desc);\n    }\n    else {\n        logMissingFeatures && console.log('Unhandled key in #4001', key);\n    }\n}, function (writer, target) {\n    psdWriter_1.writeBytes(writer, target._ir4001);\n});\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n//# sourceURL=webpack://psd.index/./node_modules/ag-psd/dist/imageResources.js?")},"./node_modules/ag-psd/dist/index.js":function(__unused_webpack_module,exports,__webpack_require__){eval('\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.writePsdBuffer = exports.writePsdUint8Array = exports.writePsd = exports.readPsd = exports.byteArrayToBase64 = void 0;\nvar psdWriter_1 = __webpack_require__(/*! ./psdWriter */ "./node_modules/ag-psd/dist/psdWriter.js");\nvar psdReader_1 = __webpack_require__(/*! ./psdReader */ "./node_modules/ag-psd/dist/psdReader.js");\nvar helpers_1 = __webpack_require__(/*! ./helpers */ "./node_modules/ag-psd/dist/helpers.js");\nObject.defineProperty(exports, "initializeCanvas", ({ enumerable: true, get: function () { return helpers_1.initializeCanvas; } }));\n__exportStar(__webpack_require__(/*! ./psd */ "./node_modules/ag-psd/dist/psd.js"), exports);\nvar base64_js_1 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js");\nexports.byteArrayToBase64 = base64_js_1.fromByteArray;\nfunction readPsd(buffer, options) {\n    var reader = \'buffer\' in buffer ?\n        psdReader_1.createReader(buffer.buffer, buffer.byteOffset, buffer.byteLength) :\n        psdReader_1.createReader(buffer);\n    return psdReader_1.readPsd(reader, options);\n}\nexports.readPsd = readPsd;\nfunction writePsd(psd, options) {\n    var writer = psdWriter_1.createWriter();\n    psdWriter_1.writePsd(writer, psd, options);\n    return psdWriter_1.getWriterBuffer(writer);\n}\nexports.writePsd = writePsd;\nfunction writePsdUint8Array(psd, options) {\n    var writer = psdWriter_1.createWriter();\n    psdWriter_1.writePsd(writer, psd, options);\n    return psdWriter_1.getWriterBufferNoCopy(writer);\n}\nexports.writePsdUint8Array = writePsdUint8Array;\nfunction writePsdBuffer(psd, options) {\n    if (typeof Buffer === \'undefined\') {\n        throw new Error(\'Buffer not supported on this platform\');\n    }\n    return Buffer.from(writePsdUint8Array(psd, options));\n}\nexports.writePsdBuffer = writePsdBuffer;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSx5Q0FBNEg7QUFDNUgseUNBQWtGO0FBQ2xGLHFDQUE2QztBQUFwQywyR0FBQSxnQkFBZ0IsT0FBQTtBQUN6Qix3Q0FBc0I7QUFDdEIsdUNBQTBDO0FBUzdCLFFBQUEsaUJBQWlCLEdBQUcseUJBQWEsQ0FBQztBQUUvQyxTQUFnQixPQUFPLENBQUMsTUFBZ0MsRUFBRSxPQUFxQjtJQUM5RSxJQUFNLE1BQU0sR0FBRyxRQUFRLElBQUksTUFBTSxDQUFDLENBQUM7UUFDbEMsd0JBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDbkUsd0JBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QixPQUFPLG1CQUFlLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFMRCwwQkFLQztBQUVELFNBQWdCLFFBQVEsQ0FBQyxHQUFRLEVBQUUsT0FBc0I7SUFDeEQsSUFBTSxNQUFNLEdBQUcsd0JBQVksRUFBRSxDQUFDO0lBQzlCLG9CQUFnQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkMsT0FBTywyQkFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFKRCw0QkFJQztBQUVELFNBQWdCLGtCQUFrQixDQUFDLEdBQVEsRUFBRSxPQUFzQjtJQUNsRSxJQUFNLE1BQU0sR0FBRyx3QkFBWSxFQUFFLENBQUM7SUFDOUIsb0JBQWdCLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2QyxPQUFPLGlDQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFKRCxnREFJQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxHQUFRLEVBQUUsT0FBc0I7SUFDOUQsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUU7UUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0tBQ3pEO0lBRUQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFORCx3Q0FNQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBzZCwgUmVhZE9wdGlvbnMsIFdyaXRlT3B0aW9ucyB9IGZyb20gJy4vcHNkJztcbmltcG9ydCB7IFBzZFdyaXRlciwgd3JpdGVQc2QgYXMgd3JpdGVQc2RJbnRlcm5hbCwgZ2V0V3JpdGVyQnVmZmVyLCBjcmVhdGVXcml0ZXIsIGdldFdyaXRlckJ1ZmZlck5vQ29weSB9IGZyb20gJy4vcHNkV3JpdGVyJztcbmltcG9ydCB7IFBzZFJlYWRlciwgcmVhZFBzZCBhcyByZWFkUHNkSW50ZXJuYWwsIGNyZWF0ZVJlYWRlciB9IGZyb20gJy4vcHNkUmVhZGVyJztcbmV4cG9ydCB7IGluaXRpYWxpemVDYW52YXMgfSBmcm9tICcuL2hlbHBlcnMnO1xuZXhwb3J0ICogZnJvbSAnLi9wc2QnO1xuaW1wb3J0IHsgZnJvbUJ5dGVBcnJheSB9IGZyb20gJ2Jhc2U2NC1qcyc7XG5leHBvcnQgeyBQc2RSZWFkZXIsIFBzZFdyaXRlciB9O1xuXG5pbnRlcmZhY2UgQnVmZmVyTGlrZSB7XG5cdGJ1ZmZlcjogQXJyYXlCdWZmZXI7XG5cdGJ5dGVPZmZzZXQ6IG51bWJlcjtcblx0Ynl0ZUxlbmd0aDogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgYnl0ZUFycmF5VG9CYXNlNjQgPSBmcm9tQnl0ZUFycmF5O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVhZFBzZChidWZmZXI6IEFycmF5QnVmZmVyIHwgQnVmZmVyTGlrZSwgb3B0aW9ucz86IFJlYWRPcHRpb25zKTogUHNkIHtcblx0Y29uc3QgcmVhZGVyID0gJ2J1ZmZlcicgaW4gYnVmZmVyID9cblx0XHRjcmVhdGVSZWFkZXIoYnVmZmVyLmJ1ZmZlciwgYnVmZmVyLmJ5dGVPZmZzZXQsIGJ1ZmZlci5ieXRlTGVuZ3RoKSA6XG5cdFx0Y3JlYXRlUmVhZGVyKGJ1ZmZlcik7XG5cdHJldHVybiByZWFkUHNkSW50ZXJuYWwocmVhZGVyLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlUHNkKHBzZDogUHNkLCBvcHRpb25zPzogV3JpdGVPcHRpb25zKTogQXJyYXlCdWZmZXIge1xuXHRjb25zdCB3cml0ZXIgPSBjcmVhdGVXcml0ZXIoKTtcblx0d3JpdGVQc2RJbnRlcm5hbCh3cml0ZXIsIHBzZCwgb3B0aW9ucyk7XG5cdHJldHVybiBnZXRXcml0ZXJCdWZmZXIod3JpdGVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlUHNkVWludDhBcnJheShwc2Q6IFBzZCwgb3B0aW9ucz86IFdyaXRlT3B0aW9ucyk6IFVpbnQ4QXJyYXkge1xuXHRjb25zdCB3cml0ZXIgPSBjcmVhdGVXcml0ZXIoKTtcblx0d3JpdGVQc2RJbnRlcm5hbCh3cml0ZXIsIHBzZCwgb3B0aW9ucyk7XG5cdHJldHVybiBnZXRXcml0ZXJCdWZmZXJOb0NvcHkod3JpdGVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlUHNkQnVmZmVyKHBzZDogUHNkLCBvcHRpb25zPzogV3JpdGVPcHRpb25zKTogQnVmZmVyIHtcblx0aWYgKHR5cGVvZiBCdWZmZXIgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdCdWZmZXIgbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBsYXRmb3JtJyk7XG5cdH1cblxuXHRyZXR1cm4gQnVmZmVyLmZyb20od3JpdGVQc2RVaW50OEFycmF5KHBzZCwgb3B0aW9ucykpO1xufVxuIl0sInNvdXJjZVJvb3QiOiJEOlxcUHJvamVjdHNcXGdpdGh1YlxcYWctcHNkXFxzcmMifQ==\n\n\n//# sourceURL=webpack://psd.index/./node_modules/ag-psd/dist/index.js?')},"./node_modules/ag-psd/dist/psd.js":function(__unused_webpack_module,exports){eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.SectionDividerType = exports.ColorMode = void 0;\nvar ColorMode;\n(function (ColorMode) {\n    ColorMode[ColorMode["Bitmap"] = 0] = "Bitmap";\n    ColorMode[ColorMode["Grayscale"] = 1] = "Grayscale";\n    ColorMode[ColorMode["Indexed"] = 2] = "Indexed";\n    ColorMode[ColorMode["RGB"] = 3] = "RGB";\n    ColorMode[ColorMode["CMYK"] = 4] = "CMYK";\n    ColorMode[ColorMode["Multichannel"] = 7] = "Multichannel";\n    ColorMode[ColorMode["Duotone"] = 8] = "Duotone";\n    ColorMode[ColorMode["Lab"] = 9] = "Lab";\n})(ColorMode = exports.ColorMode || (exports.ColorMode = {}));\nvar SectionDividerType;\n(function (SectionDividerType) {\n    SectionDividerType[SectionDividerType["Other"] = 0] = "Other";\n    SectionDividerType[SectionDividerType["OpenFolder"] = 1] = "OpenFolder";\n    SectionDividerType[SectionDividerType["ClosedFolder"] = 2] = "ClosedFolder";\n    SectionDividerType[SectionDividerType["BoundingSectionDivider"] = 3] = "BoundingSectionDivider";\n})(SectionDividerType = exports.SectionDividerType || (exports.SectionDividerType = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n//# sourceURL=webpack://psd.index/./node_modules/ag-psd/dist/psd.js?')},"./node_modules/ag-psd/dist/psdReader.js":function(__unused_webpack_module,exports,__webpack_require__){eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.readColor = exports.readSection = exports.readDataRLE = exports.readPsd = exports.checkSignature = exports.skipBytes = exports.readAsciiString = exports.readUnicodeStringWithLength = exports.readUnicodeString = exports.readPascalString = exports.readSignature = exports.readBytes = exports.readFixedPointPath32 = exports.readFixedPoint32 = exports.readFloat64 = exports.readFloat32 = exports.readUint32 = exports.readInt32LE = exports.readInt32 = exports.readUint16 = exports.readInt16 = exports.peekUint8 = exports.readUint8 = exports.createReader = exports.supportedColorModes = void 0;\nvar helpers_1 = __webpack_require__(/*! ./helpers */ \"./node_modules/ag-psd/dist/helpers.js\");\nvar additionalInfo_1 = __webpack_require__(/*! ./additionalInfo */ \"./node_modules/ag-psd/dist/additionalInfo.js\");\nvar imageResources_1 = __webpack_require__(/*! ./imageResources */ \"./node_modules/ag-psd/dist/imageResources.js\");\nexports.supportedColorModes = [0 /* Bitmap */, 1 /* Grayscale */, 3 /* RGB */];\nvar colorModes = ['bitmap', 'grayscale', 'indexed', 'RGB', 'CMYK', 'multichannel', 'duotone', 'lab'];\nvar RAW_IMAGE_DATA = false;\nfunction setupGrayscale(data) {\n    var size = data.width * data.height * 4;\n    for (var i = 0; i < size; i += 4) {\n        data.data[i + 1] = data.data[i];\n        data.data[i + 2] = data.data[i];\n    }\n}\nfunction createReader(buffer, offset, length) {\n    var view = new DataView(buffer, offset, length);\n    return { view: view, offset: 0 };\n}\nexports.createReader = createReader;\nfunction readUint8(reader) {\n    reader.offset += 1;\n    return reader.view.getUint8(reader.offset - 1);\n}\nexports.readUint8 = readUint8;\nfunction peekUint8(reader) {\n    return reader.view.getUint8(reader.offset);\n}\nexports.peekUint8 = peekUint8;\nfunction readInt16(reader) {\n    reader.offset += 2;\n    return reader.view.getInt16(reader.offset - 2, false);\n}\nexports.readInt16 = readInt16;\nfunction readUint16(reader) {\n    reader.offset += 2;\n    return reader.view.getUint16(reader.offset - 2, false);\n}\nexports.readUint16 = readUint16;\nfunction readInt32(reader) {\n    reader.offset += 4;\n    return reader.view.getInt32(reader.offset - 4, false);\n}\nexports.readInt32 = readInt32;\nfunction readInt32LE(reader) {\n    reader.offset += 4;\n    return reader.view.getInt32(reader.offset - 4, true);\n}\nexports.readInt32LE = readInt32LE;\nfunction readUint32(reader) {\n    reader.offset += 4;\n    return reader.view.getUint32(reader.offset - 4, false);\n}\nexports.readUint32 = readUint32;\nfunction readFloat32(reader) {\n    reader.offset += 4;\n    return reader.view.getFloat32(reader.offset - 4, false);\n}\nexports.readFloat32 = readFloat32;\nfunction readFloat64(reader) {\n    reader.offset += 8;\n    return reader.view.getFloat64(reader.offset - 8, false);\n}\nexports.readFloat64 = readFloat64;\n// 32-bit fixed-point number 16.16\nfunction readFixedPoint32(reader) {\n    return readInt32(reader) / (1 << 16);\n}\nexports.readFixedPoint32 = readFixedPoint32;\n// 32-bit fixed-point number 8.24\nfunction readFixedPointPath32(reader) {\n    return readInt32(reader) / (1 << 24);\n}\nexports.readFixedPointPath32 = readFixedPointPath32;\nfunction readBytes(reader, length) {\n    reader.offset += length;\n    return new Uint8Array(reader.view.buffer, reader.view.byteOffset + reader.offset - length, length);\n}\nexports.readBytes = readBytes;\nfunction readSignature(reader) {\n    return readShortString(reader, 4);\n}\nexports.readSignature = readSignature;\nfunction readPascalString(reader, padTo) {\n    if (padTo === void 0) { padTo = 2; }\n    var length = readUint8(reader);\n    var text = readShortString(reader, length);\n    while (++length % padTo) {\n        skipBytes(reader, 1);\n    }\n    return text;\n}\nexports.readPascalString = readPascalString;\nfunction readUnicodeString(reader) {\n    var length = readUint32(reader);\n    return readUnicodeStringWithLength(reader, length);\n}\nexports.readUnicodeString = readUnicodeString;\nfunction readUnicodeStringWithLength(reader, length) {\n    var text = '';\n    while (length--) {\n        var value = readUint16(reader);\n        if (value || length > 0) { // remove trailing \\0\n            text += String.fromCharCode(value);\n        }\n    }\n    return text;\n}\nexports.readUnicodeStringWithLength = readUnicodeStringWithLength;\nfunction readAsciiString(reader, length) {\n    var text = '';\n    while (length--) {\n        text += String.fromCharCode(readUint8(reader));\n    }\n    return text;\n}\nexports.readAsciiString = readAsciiString;\nfunction skipBytes(reader, count) {\n    reader.offset += count;\n}\nexports.skipBytes = skipBytes;\nfunction checkSignature(reader, a, b) {\n    var offset = reader.offset;\n    var signature = readSignature(reader);\n    if (signature !== a && signature !== b) {\n        throw new Error(\"Invalid signature: '\" + signature + \"' at 0x\" + offset.toString(16));\n    }\n}\nexports.checkSignature = checkSignature;\nfunction readShortString(reader, length) {\n    var buffer = readBytes(reader, length);\n    return String.fromCharCode.apply(String, buffer);\n}\nfunction readPsd(reader, options) {\n    var _a;\n    if (options === void 0) { options = {}; }\n    // header\n    checkSignature(reader, '8BPS');\n    var version = readUint16(reader);\n    if (version !== 1)\n        throw new Error(\"Invalid PSD file version: \" + version);\n    skipBytes(reader, 6);\n    var channels = readUint16(reader);\n    var height = readUint32(reader);\n    var width = readUint32(reader);\n    var bitsPerChannel = readUint16(reader);\n    var colorMode = readUint16(reader);\n    if (exports.supportedColorModes.indexOf(colorMode) === -1)\n        throw new Error(\"Color mode not supported: \" + ((_a = colorModes[colorMode]) !== null && _a !== void 0 ? _a : colorMode));\n    var psd = { width: width, height: height, channels: channels, bitsPerChannel: bitsPerChannel, colorMode: colorMode };\n    // color mode data\n    readSection(reader, 1, function (left) {\n        if (options.throwForMissingFeatures)\n            throw new Error('Color mode data not supported');\n        skipBytes(reader, left());\n    });\n    // image resources\n    readSection(reader, 1, function (left) {\n        var _loop_1 = function () {\n            checkSignature(reader, '8BIM');\n            var id = readUint16(reader);\n            readPascalString(reader); // name\n            readSection(reader, 2, function (left) {\n                var handler = imageResources_1.resourceHandlersMap[id];\n                var skip = id === 1036 && !!options.skipThumbnail;\n                if (!psd.imageResources) {\n                    psd.imageResources = {};\n                }\n                if (handler && !skip) {\n                    try {\n                        handler.read(reader, psd.imageResources, left, options);\n                    }\n                    catch (e) {\n                        if (options.throwForMissingFeatures)\n                            throw e;\n                        skipBytes(reader, left());\n                    }\n                }\n                else {\n                    // console.log(`Unhandled image resource: ${id}`);\n                    skipBytes(reader, left());\n                }\n            });\n        };\n        while (left()) {\n            _loop_1();\n        }\n    });\n    // layer and mask info\n    var globalAlpha = false;\n    readSection(reader, 1, function (left) {\n        globalAlpha = readLayerInfo(reader, psd, options);\n        // SAI does not include this section\n        if (left() > 0) {\n            readGlobalLayerMaskInfo(reader);\n        }\n        else {\n            // revert back to end of section if exceeded section limits\n            // options.logMissingFeatures && console.log('reverting to end of section');\n            skipBytes(reader, left());\n        }\n        while (left() > 0) {\n            // sometimes there are empty bytes here\n            while (left() && peekUint8(reader) === 0) {\n                // options.logMissingFeatures && console.log('skipping 0 byte');\n                skipBytes(reader, 1);\n            }\n            if (left() >= 12) {\n                readAdditionalLayerInfo(reader, psd, psd, options);\n            }\n            else {\n                // options.logMissingFeatures && console.log('skipping leftover bytes', left());\n                skipBytes(reader, left());\n            }\n        }\n    });\n    var hasChildren = psd.children && psd.children.length;\n    var skipComposite = options.skipCompositeImageData && (options.skipLayerImageData || hasChildren);\n    if (!skipComposite) {\n        readImageData(reader, psd, globalAlpha, options);\n    }\n    return psd;\n}\nexports.readPsd = readPsd;\nfunction readLayerInfo(reader, psd, options) {\n    var globalAlpha = false;\n    readSection(reader, 2, function (left) {\n        var layerCount = readInt16(reader);\n        if (layerCount < 0) {\n            globalAlpha = true;\n            layerCount = -layerCount;\n        }\n        var layers = [];\n        var layerChannels = [];\n        for (var i = 0; i < layerCount; i++) {\n            var _a = readLayerRecord(reader, psd, options), layer = _a.layer, channels = _a.channels;\n            layers.push(layer);\n            layerChannels.push(channels);\n        }\n        if (!options.skipLayerImageData) {\n            for (var i = 0; i < layerCount; i++) {\n                readLayerChannelImageData(reader, psd, layers[i], layerChannels[i], options);\n            }\n        }\n        skipBytes(reader, left());\n        if (!psd.children) {\n            psd.children = [];\n        }\n        var stack = [psd];\n        for (var i = layers.length - 1; i >= 0; i--) {\n            var l = layers[i];\n            var type = l.sectionDivider ? l.sectionDivider.type : 0 /* Other */;\n            if (type === 1 /* OpenFolder */ || type === 2 /* ClosedFolder */) {\n                l.opened = type === 1 /* OpenFolder */;\n                l.children = [];\n                stack[stack.length - 1].children.unshift(l);\n                stack.push(l);\n            }\n            else if (type === 3 /* BoundingSectionDivider */) {\n                stack.pop();\n            }\n            else {\n                stack[stack.length - 1].children.unshift(l);\n            }\n        }\n    });\n    return globalAlpha;\n}\nfunction readLayerRecord(reader, psd, options) {\n    var layer = {};\n    layer.top = readInt32(reader);\n    layer.left = readInt32(reader);\n    layer.bottom = readInt32(reader);\n    layer.right = readInt32(reader);\n    var channelCount = readUint16(reader);\n    var channels = [];\n    for (var i = 0; i < channelCount; i++) {\n        var channelID = readInt16(reader);\n        var channelLength = readInt32(reader);\n        channels.push({ id: channelID, length: channelLength });\n    }\n    checkSignature(reader, '8BIM');\n    var blendMode = readSignature(reader);\n    if (!helpers_1.toBlendMode[blendMode])\n        throw new Error(\"Invalid blend mode: '\" + blendMode + \"'\");\n    layer.blendMode = helpers_1.toBlendMode[blendMode];\n    layer.opacity = readUint8(reader) / 0xff;\n    layer.clipping = readUint8(reader) === 1;\n    var flags = readUint8(reader);\n    layer.transparencyProtected = (flags & 0x01) !== 0;\n    layer.hidden = (flags & 0x02) !== 0;\n    skipBytes(reader, 1);\n    readSection(reader, 1, function (left) {\n        var mask = readLayerMaskData(reader, options);\n        if (mask)\n            layer.mask = mask;\n        /*const blendingRanges =*/ readLayerBlendingRanges(reader);\n        layer.name = readPascalString(reader, 4);\n        while (left()) {\n            readAdditionalLayerInfo(reader, layer, psd, options);\n        }\n    });\n    return { layer: layer, channels: channels };\n}\nfunction readLayerMaskData(reader, options) {\n    return readSection(reader, 1, function (left) {\n        if (!left())\n            return undefined;\n        var mask = {};\n        mask.top = readInt32(reader);\n        mask.left = readInt32(reader);\n        mask.bottom = readInt32(reader);\n        mask.right = readInt32(reader);\n        mask.defaultColor = readUint8(reader);\n        var flags = readUint8(reader);\n        mask.positionRelativeToLayer = (flags & 1 /* PositionRelativeToLayer */) !== 0;\n        mask.disabled = (flags & 2 /* LayerMaskDisabled */) !== 0;\n        if (flags & 16 /* MaskHasParametersAppliedToIt */) {\n            var params = readUint8(reader);\n            if (params & 1 /* UserMaskDensity */)\n                mask.userMaskDensity = readUint8(reader) / 0xff;\n            if (params & 2 /* UserMaskFeather */)\n                mask.userMaskFeather = readFloat64(reader);\n            if (params & 4 /* VectorMaskDensity */)\n                mask.vectorMaskDensity = readUint8(reader) / 0xff;\n            if (params & 8 /* VectorMaskFeather */)\n                mask.vectorMaskFeather = readFloat64(reader);\n        }\n        if (left() > 2) {\n            options.logMissingFeatures && console.log('Unhandled extra mask params');\n            // TODO: handle these values\n            /*const realFlags =*/ readUint8(reader);\n            /*const realUserMaskBackground =*/ readUint8(reader);\n            /*const top2 =*/ readInt32(reader);\n            /*const left2 =*/ readInt32(reader);\n            /*const bottom2 =*/ readInt32(reader);\n            /*const right2 =*/ readInt32(reader);\n        }\n        skipBytes(reader, left());\n        return mask;\n    });\n}\nfunction readLayerBlendingRanges(reader) {\n    return readSection(reader, 1, function (left) {\n        var compositeGrayBlendSource = readUint32(reader);\n        var compositeGraphBlendDestinationRange = readUint32(reader);\n        var ranges = [];\n        while (left()) {\n            var sourceRange = readUint32(reader);\n            var destRange = readUint32(reader);\n            ranges.push({ sourceRange: sourceRange, destRange: destRange });\n        }\n        return { compositeGrayBlendSource: compositeGrayBlendSource, compositeGraphBlendDestinationRange: compositeGraphBlendDestinationRange, ranges: ranges };\n    });\n}\nfunction readLayerChannelImageData(reader, psd, layer, channels, options) {\n    var layerWidth = (layer.right || 0) - (layer.left || 0);\n    var layerHeight = (layer.bottom || 0) - (layer.top || 0);\n    var imageData;\n    if (layerWidth && layerHeight) {\n        imageData = helpers_1.createImageData(layerWidth, layerHeight);\n        helpers_1.resetImageData(imageData);\n    }\n    if (RAW_IMAGE_DATA) {\n        layer.imageDataRaw = [];\n    }\n    for (var _i = 0, channels_1 = channels; _i < channels_1.length; _i++) {\n        var channel = channels_1[_i];\n        var compression = readUint16(reader);\n        if (channel.id === -2 /* UserMask */) {\n            var mask = layer.mask;\n            if (!mask)\n                throw new Error(\"Missing layer mask data\");\n            var maskWidth = (mask.right || 0) - (mask.left || 0);\n            var maskHeight = (mask.bottom || 0) - (mask.top || 0);\n            if (maskWidth && maskHeight) {\n                var maskData = helpers_1.createImageData(maskWidth, maskHeight);\n                helpers_1.resetImageData(maskData);\n                readData(reader, maskData, compression, maskWidth, maskHeight, 0);\n                setupGrayscale(maskData);\n                if (options.useImageData) {\n                    mask.imageData = maskData;\n                }\n                else {\n                    mask.canvas = helpers_1.createCanvas(maskWidth, maskHeight);\n                    mask.canvas.getContext('2d').putImageData(maskData, 0, 0);\n                }\n            }\n        }\n        else {\n            var offset = helpers_1.offsetForChannel(channel.id);\n            var targetData = imageData;\n            if (offset < 0) {\n                targetData = undefined;\n                if (options.throwForMissingFeatures) {\n                    throw new Error(\"Channel not supported: \" + channel.id);\n                }\n            }\n            var start = reader.offset;\n            readData(reader, targetData, compression, layerWidth, layerHeight, offset);\n            if (RAW_IMAGE_DATA) {\n                layer.imageDataRaw[channel.id] = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start, reader.offset - start);\n            }\n            if (targetData && psd.colorMode === 1 /* Grayscale */) {\n                setupGrayscale(targetData);\n            }\n        }\n    }\n    if (imageData) {\n        if (options.useImageData) {\n            layer.imageData = imageData;\n        }\n        else {\n            layer.canvas = helpers_1.createCanvas(layerWidth, layerHeight);\n            layer.canvas.getContext('2d').putImageData(imageData, 0, 0);\n        }\n    }\n}\nfunction readData(reader, data, compression, width, height, offset) {\n    if (compression === 0 /* RawData */) {\n        readDataRaw(reader, data, offset, width, height);\n    }\n    else if (compression === 1 /* RleCompressed */) {\n        readDataRLE(reader, data, width, height, 4, [offset]);\n    }\n    else {\n        throw new Error(\"Compression type not supported: \" + compression);\n    }\n}\nfunction readGlobalLayerMaskInfo(reader) {\n    return readSection(reader, 1, function (left) {\n        if (left()) {\n            var overlayColorSpace = readUint16(reader);\n            var colorSpace1 = readUint16(reader);\n            var colorSpace2 = readUint16(reader);\n            var colorSpace3 = readUint16(reader);\n            var colorSpace4 = readUint16(reader);\n            var opacity = readUint16(reader) / 0xff;\n            var kind = readUint8(reader);\n            skipBytes(reader, left());\n            return { overlayColorSpace: overlayColorSpace, colorSpace1: colorSpace1, colorSpace2: colorSpace2, colorSpace3: colorSpace3, colorSpace4: colorSpace4, opacity: opacity, kind: kind };\n        }\n    });\n}\nfunction readAdditionalLayerInfo(reader, target, psd, options) {\n    checkSignature(reader, '8BIM', '8B64');\n    var key = readSignature(reader);\n    readSection(reader, 2, function (left) {\n        var handler = additionalInfo_1.infoHandlersMap[key];\n        if (handler) {\n            try {\n                handler.read(reader, target, left, psd, options);\n            }\n            catch (e) {\n                if (options.throwForMissingFeatures)\n                    throw e;\n            }\n        }\n        else {\n            options.logMissingFeatures && console.log(\"Unhandled additional info: \" + key);\n            skipBytes(reader, left());\n        }\n        if (left()) {\n            options.logMissingFeatures && console.log(\"Unread \" + left() + \" bytes left for tag: \" + key);\n            skipBytes(reader, left());\n        }\n    }, false);\n}\nfunction readImageData(reader, psd, globalAlpha, options) {\n    var compression = readUint16(reader);\n    if (exports.supportedColorModes.indexOf(psd.colorMode) === -1)\n        throw new Error(\"Color mode not supported: \" + psd.colorMode);\n    if (compression !== 0 /* RawData */ && compression !== 1 /* RleCompressed */)\n        throw new Error(\"Compression type not supported: \" + compression);\n    var imageData = helpers_1.createImageData(psd.width, psd.height);\n    helpers_1.resetImageData(imageData);\n    if (psd.colorMode === 0 /* Bitmap */) {\n        var bytes = void 0;\n        if (compression === 0 /* RawData */) {\n            bytes = readBytes(reader, Math.ceil(psd.width / 8) * psd.height);\n        }\n        else if (compression === 1 /* RleCompressed */) {\n            bytes = new Uint8Array(psd.width * psd.height);\n            readDataRLE(reader, { data: bytes, width: psd.width, height: psd.height }, psd.width, psd.height, 1, [0]);\n        }\n        else {\n            throw new Error(\"Bitmap compression not supported: \" + compression);\n        }\n        helpers_1.decodeBitmap(bytes, imageData.data, psd.width, psd.height);\n    }\n    else {\n        var channels = psd.colorMode === 1 /* Grayscale */ ? [0] : [0, 1, 2];\n        if (psd.channels && psd.channels > 3) {\n            for (var i = 3; i < psd.channels; i++) {\n                // TODO: store these channels in additional image data\n                channels.push(i);\n            }\n        }\n        else if (globalAlpha) {\n            channels.push(3);\n        }\n        if (compression === 0 /* RawData */) {\n            for (var i = 0; i < channels.length; i++) {\n                readDataRaw(reader, imageData, channels[i], psd.width, psd.height);\n            }\n        }\n        else if (compression === 1 /* RleCompressed */) {\n            var start = reader.offset;\n            readDataRLE(reader, imageData, psd.width, psd.height, 4, channels);\n            if (RAW_IMAGE_DATA) {\n                psd.imageDataRaw = new Uint8Array(reader.view.buffer, reader.view.byteOffset + start, reader.offset - start);\n            }\n        }\n        if (psd.colorMode === 1 /* Grayscale */) {\n            setupGrayscale(imageData);\n        }\n    }\n    if (options.useImageData) {\n        psd.imageData = imageData;\n    }\n    else {\n        psd.canvas = helpers_1.createCanvas(psd.width, psd.height);\n        psd.canvas.getContext('2d').putImageData(imageData, 0, 0);\n    }\n}\nfunction readDataRaw(reader, pixelData, offset, width, height) {\n    var size = width * height;\n    var buffer = readBytes(reader, size);\n    if (pixelData && offset < 4) {\n        var data = pixelData.data;\n        for (var i = 0, p = offset | 0; i < size; i++, p = (p + 4) | 0) {\n            data[p] = buffer[i];\n        }\n    }\n}\nfunction readDataRLE(reader, pixelData, _width, height, step, offsets) {\n    var lengths = new Uint16Array(offsets.length * height);\n    var data = pixelData && pixelData.data;\n    for (var o = 0, li = 0; o < offsets.length; o++) {\n        for (var y = 0; y < height; y++, li++) {\n            lengths[li] = readUint16(reader);\n        }\n    }\n    for (var c = 0, li = 0; c < offsets.length; c++) {\n        var offset = offsets[c] | 0;\n        var extra = c > 3 || offset > 3;\n        if (!data || extra) {\n            for (var y = 0; y < height; y++, li++) {\n                skipBytes(reader, lengths[li]);\n            }\n        }\n        else {\n            for (var y = 0, p = offset | 0; y < height; y++, li++) {\n                var length_1 = lengths[li];\n                var buffer = readBytes(reader, length_1);\n                for (var i = 0; i < length_1; i++) {\n                    var header = buffer[i];\n                    if (header > 128) {\n                        var value = buffer[++i];\n                        header = (256 - header) | 0;\n                        for (var j = 0; j <= header; j = (j + 1) | 0) {\n                            data[p] = value;\n                            p = (p + step) | 0;\n                        }\n                    }\n                    else if (header < 128) {\n                        for (var j = 0; j <= header; j = (j + 1) | 0) {\n                            data[p] = buffer[++i];\n                            p = (p + step) | 0;\n                        }\n                    }\n                    else {\n                        // ignore 128\n                    }\n                    if (i >= length_1) {\n                        throw new Error(\"Invalid RLE data: exceeded buffer size \" + i + \"/\" + length_1);\n                    }\n                }\n            }\n        }\n    }\n}\nexports.readDataRLE = readDataRLE;\nfunction readSection(reader, round, func, skipEmpty) {\n    if (skipEmpty === void 0) { skipEmpty = true; }\n    var length = readInt32(reader);\n    if (length <= 0 && skipEmpty)\n        return undefined;\n    var end = reader.offset + length;\n    var result = func(function () { return end - reader.offset; });\n    if (reader.offset > end)\n        throw new Error('Exceeded section limits');\n    if (reader.offset !== end)\n        throw new Error(\"Unread section data: \" + (end - reader.offset) + \" bytes at 0x\" + reader.offset.toString(16));\n    while (end % round)\n        end++;\n    reader.offset = end;\n    return result;\n}\nexports.readSection = readSection;\nfunction readColor(reader) {\n    var colorSpace = readUint16(reader);\n    switch (colorSpace) {\n        case 0 /* RGB */: {\n            var r = readUint16(reader) / 257;\n            var g = readUint16(reader) / 257;\n            var b = readUint16(reader) / 257;\n            skipBytes(reader, 2);\n            return { r: r, g: g, b: b };\n        }\n        case 7 /* Lab */: {\n            var l = readInt16(reader) / 100;\n            var a = readInt16(reader) / 100;\n            var b = readInt16(reader) / 100;\n            skipBytes(reader, 2);\n            return { l: l, a: a, b: b };\n        }\n        case 2 /* CMYK */: {\n            var c = readInt16(reader);\n            var m = readInt16(reader);\n            var y = readInt16(reader);\n            var k = readInt16(reader);\n            return { c: c, m: m, y: y, k: k };\n        }\n        case 8 /* Grayscale */: {\n            var k = readInt16(reader);\n            skipBytes(reader, 6);\n            return { k: k };\n        }\n        case 1 /* HSB */: {\n            var h = readInt16(reader);\n            var s = readInt16(reader);\n            var b = readInt16(reader);\n            skipBytes(reader, 2);\n            return { h: h, s: s, b: b };\n        }\n        default:\n            throw new Error('Invalid color space');\n    }\n}\nexports.readColor = readColor;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n//# sourceURL=webpack://psd.index/./node_modules/ag-psd/dist/psdReader.js?")},"./node_modules/ag-psd/dist/psdWriter.js":function(__unused_webpack_module,exports,__webpack_require__){eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.writeColor = exports.writePsd = exports.writeSection = exports.writeUnicodeStringWithPadding = exports.writeUnicodeString = exports.writePascalString = exports.writeSignature = exports.writeZeros = exports.writeBytes = exports.writeFixedPointPath32 = exports.writeFixedPoint32 = exports.writeFloat64 = exports.writeFloat32 = exports.writeUint32 = exports.writeInt32 = exports.writeUint16 = exports.writeInt16 = exports.writeUint8 = exports.getWriterBufferNoCopy = exports.getWriterBuffer = exports.createWriter = void 0;\nvar helpers_1 = __webpack_require__(/*! ./helpers */ \"./node_modules/ag-psd/dist/helpers.js\");\nvar additionalInfo_1 = __webpack_require__(/*! ./additionalInfo */ \"./node_modules/ag-psd/dist/additionalInfo.js\");\nvar imageResources_1 = __webpack_require__(/*! ./imageResources */ \"./node_modules/ag-psd/dist/imageResources.js\");\nvar RAW_IMAGE_DATA = false;\nfunction createWriter(size) {\n    if (size === void 0) { size = 4096; }\n    var buffer = new ArrayBuffer(size);\n    var view = new DataView(buffer);\n    var offset = 0;\n    return { buffer: buffer, view: view, offset: offset };\n}\nexports.createWriter = createWriter;\nfunction getWriterBuffer(writer) {\n    return writer.buffer.slice(0, writer.offset);\n}\nexports.getWriterBuffer = getWriterBuffer;\nfunction getWriterBufferNoCopy(writer) {\n    return new Uint8Array(writer.buffer, 0, writer.offset);\n}\nexports.getWriterBufferNoCopy = getWriterBufferNoCopy;\nfunction writeUint8(writer, value) {\n    var offset = addSize(writer, 1);\n    writer.view.setUint8(offset, value);\n}\nexports.writeUint8 = writeUint8;\nfunction writeInt16(writer, value) {\n    var offset = addSize(writer, 2);\n    writer.view.setInt16(offset, value, false);\n}\nexports.writeInt16 = writeInt16;\nfunction writeUint16(writer, value) {\n    var offset = addSize(writer, 2);\n    writer.view.setUint16(offset, value, false);\n}\nexports.writeUint16 = writeUint16;\nfunction writeInt32(writer, value) {\n    var offset = addSize(writer, 4);\n    writer.view.setInt32(offset, value, false);\n}\nexports.writeInt32 = writeInt32;\nfunction writeUint32(writer, value) {\n    var offset = addSize(writer, 4);\n    writer.view.setUint32(offset, value, false);\n}\nexports.writeUint32 = writeUint32;\nfunction writeFloat32(writer, value) {\n    var offset = addSize(writer, 4);\n    writer.view.setFloat32(offset, value, false);\n}\nexports.writeFloat32 = writeFloat32;\nfunction writeFloat64(writer, value) {\n    var offset = addSize(writer, 8);\n    writer.view.setFloat64(offset, value, false);\n}\nexports.writeFloat64 = writeFloat64;\n// 32-bit fixed-point number 16.16\nfunction writeFixedPoint32(writer, value) {\n    writeInt32(writer, value * (1 << 16));\n}\nexports.writeFixedPoint32 = writeFixedPoint32;\n// 32-bit fixed-point number 8.24\nfunction writeFixedPointPath32(writer, value) {\n    writeInt32(writer, value * (1 << 24));\n}\nexports.writeFixedPointPath32 = writeFixedPointPath32;\nfunction writeBytes(writer, buffer) {\n    if (buffer) {\n        ensureSize(writer, writer.offset + buffer.length);\n        var bytes = new Uint8Array(writer.buffer);\n        bytes.set(buffer, writer.offset);\n        writer.offset += buffer.length;\n    }\n}\nexports.writeBytes = writeBytes;\nfunction writeZeros(writer, count) {\n    for (var i = 0; i < count; i++) {\n        writeUint8(writer, 0);\n    }\n}\nexports.writeZeros = writeZeros;\nfunction writeSignature(writer, signature) {\n    if (signature.length !== 4) {\n        throw new Error(\"Invalid signature: '\" + signature + \"'\");\n    }\n    for (var i = 0; i < 4; i++) {\n        writeUint8(writer, signature.charCodeAt(i));\n    }\n}\nexports.writeSignature = writeSignature;\nfunction writePascalString(writer, text, padTo) {\n    if (padTo === void 0) { padTo = 2; }\n    var length = text.length;\n    writeUint8(writer, length);\n    for (var i = 0; i < length; i++) {\n        var code = text.charCodeAt(i);\n        writeUint8(writer, code < 128 ? code : '?'.charCodeAt(0));\n    }\n    while (++length % padTo) {\n        writeUint8(writer, 0);\n    }\n}\nexports.writePascalString = writePascalString;\nfunction writeUnicodeString(writer, text) {\n    writeUint32(writer, text.length);\n    for (var i = 0; i < text.length; i++) {\n        writeUint16(writer, text.charCodeAt(i));\n    }\n}\nexports.writeUnicodeString = writeUnicodeString;\nfunction writeUnicodeStringWithPadding(writer, text) {\n    writeUint32(writer, text.length + 1);\n    for (var i = 0; i < text.length; i++) {\n        writeUint16(writer, text.charCodeAt(i));\n    }\n    writeUint16(writer, 0);\n}\nexports.writeUnicodeStringWithPadding = writeUnicodeStringWithPadding;\nfunction getLargestLayerSize(layers) {\n    if (layers === void 0) { layers = []; }\n    var max = 0;\n    for (var _i = 0, layers_1 = layers; _i < layers_1.length; _i++) {\n        var layer = layers_1[_i];\n        if (layer.canvas || layer.imageData) {\n            var _a = getLayerDimentions(layer), width = _a.width, height = _a.height;\n            max = Math.max(max, 2 * height + 2 * width * height);\n        }\n        if (layer.children) {\n            max = Math.max(max, getLargestLayerSize(layer.children));\n        }\n    }\n    return max;\n}\nfunction writeSection(writer, round, func, writeTotalLength) {\n    if (writeTotalLength === void 0) { writeTotalLength = false; }\n    var offset = writer.offset;\n    writeInt32(writer, 0);\n    func();\n    var length = writer.offset - offset - 4;\n    var len = length;\n    while ((len % round) !== 0) {\n        writeUint8(writer, 0);\n        len++;\n    }\n    if (writeTotalLength) {\n        length = len;\n    }\n    writer.view.setInt32(offset, length, false);\n}\nexports.writeSection = writeSection;\nfunction writePsd(writer, psd, options) {\n    if (options === void 0) { options = {}; }\n    if (!(+psd.width > 0 && +psd.height > 0))\n        throw new Error('Invalid document size');\n    var imageResources = psd.imageResources || {};\n    if (options.generateThumbnail) {\n        imageResources = __assign(__assign({}, imageResources), { thumbnail: createThumbnail(psd) });\n    }\n    var imageData = psd.imageData;\n    if (!imageData && psd.canvas) {\n        imageData = psd.canvas.getContext('2d').getImageData(0, 0, psd.canvas.width, psd.canvas.height);\n    }\n    if (imageData && (psd.width !== imageData.width || psd.height !== imageData.height))\n        throw new Error('Document canvas must have the same size as document');\n    var globalAlpha = !!imageData && helpers_1.hasAlpha(imageData);\n    var maxBufferSize = Math.max(getLargestLayerSize(psd.children), 4 * 2 * psd.width * psd.height + 2 * psd.height);\n    var tempBuffer = new Uint8Array(maxBufferSize);\n    // header\n    writeSignature(writer, '8BPS');\n    writeUint16(writer, 1); // version\n    writeZeros(writer, 6);\n    writeUint16(writer, globalAlpha ? 4 : 3); // channels\n    writeUint32(writer, psd.height);\n    writeUint32(writer, psd.width);\n    writeUint16(writer, 8); // bits per channel\n    writeUint16(writer, 3 /* RGB */);\n    // color mode data\n    writeSection(writer, 1, function () {\n        // TODO: implement\n    });\n    // image resources\n    writeSection(writer, 1, function () {\n        var _loop_1 = function (handler) {\n            if (handler.has(imageResources)) {\n                writeSignature(writer, '8BIM');\n                writeUint16(writer, handler.key);\n                writePascalString(writer, '');\n                writeSection(writer, 2, function () { return handler.write(writer, imageResources); });\n            }\n        };\n        for (var _i = 0, resourceHandlers_1 = imageResources_1.resourceHandlers; _i < resourceHandlers_1.length; _i++) {\n            var handler = resourceHandlers_1[_i];\n            _loop_1(handler);\n        }\n    });\n    // layer and mask info\n    writeSection(writer, 2, function () {\n        writeLayerInfo(tempBuffer, writer, psd, globalAlpha, options);\n        writeGlobalLayerMaskInfo(writer);\n        writeAdditionalLayerInfo(writer, psd, psd, options);\n    });\n    // image data\n    var channels = globalAlpha ? [0, 1, 2, 3] : [0, 1, 2];\n    var data = imageData || {\n        data: new Uint8Array(4 * psd.width * psd.height),\n        width: psd.width,\n        height: psd.height,\n    };\n    writeUint16(writer, 1 /* RleCompressed */);\n    if (RAW_IMAGE_DATA && psd.imageDataRaw) {\n        console.log('writing raw image data');\n        writeBytes(writer, psd.imageDataRaw);\n    }\n    else {\n        writeBytes(writer, helpers_1.writeDataRLE(tempBuffer, data, psd.width, psd.height, channels));\n    }\n}\nexports.writePsd = writePsd;\nfunction writeLayerInfo(tempBuffer, writer, psd, globalAlpha, options) {\n    writeSection(writer, 4, function () {\n        var _a;\n        var layers = [];\n        addChildren(layers, psd.children);\n        if (!layers.length)\n            layers.push({});\n        writeInt16(writer, globalAlpha ? -layers.length : layers.length);\n        var layersData = layers.map(function (l, i) { return getChannels(tempBuffer, l, i === 0, options); });\n        var _loop_2 = function (layerData) {\n            var layer = layerData.layer, top_1 = layerData.top, left = layerData.left, bottom = layerData.bottom, right = layerData.right, channels = layerData.channels;\n            writeInt32(writer, top_1);\n            writeInt32(writer, left);\n            writeInt32(writer, bottom);\n            writeInt32(writer, right);\n            writeUint16(writer, channels.length);\n            for (var _i = 0, channels_1 = channels; _i < channels_1.length; _i++) {\n                var c = channels_1[_i];\n                writeInt16(writer, c.channelId);\n                writeInt32(writer, c.length);\n            }\n            writeSignature(writer, '8BIM');\n            writeSignature(writer, helpers_1.fromBlendMode[layer.blendMode] || 'norm');\n            writeUint8(writer, Math.round(helpers_1.clamp((_a = layer.opacity) !== null && _a !== void 0 ? _a : 1, 0, 1) * 255));\n            writeUint8(writer, layer.clipping ? 1 : 0);\n            var flags = 0x08; // 1 for Photoshop 5.0 and later, tells if bit 4 has useful information\n            if (layer.transparencyProtected)\n                flags |= 0x01;\n            if (layer.hidden)\n                flags |= 0x02;\n            if (layer.vectorMask)\n                flags |= 0x10; // pixel data irrelevant to appearance of document\n            writeUint8(writer, flags);\n            writeUint8(writer, 0); // filler\n            writeSection(writer, 1, function () {\n                writeLayerMaskData(writer, layer, layerData);\n                writeLayerBlendingRanges(writer, psd);\n                writePascalString(writer, layer.name || '', 4);\n                writeAdditionalLayerInfo(writer, layer, psd, options);\n            });\n        };\n        // layer records\n        for (var _i = 0, layersData_1 = layersData; _i < layersData_1.length; _i++) {\n            var layerData = layersData_1[_i];\n            _loop_2(layerData);\n        }\n        // layer channel image data\n        for (var _b = 0, layersData_2 = layersData; _b < layersData_2.length; _b++) {\n            var layerData = layersData_2[_b];\n            for (var _c = 0, _d = layerData.channels; _c < _d.length; _c++) {\n                var channel = _d[_c];\n                writeUint16(writer, channel.compression);\n                if (channel.buffer) {\n                    writeBytes(writer, channel.buffer);\n                }\n            }\n        }\n        // writeUint16(writer, 0);\n    }, true);\n}\nfunction writeLayerMaskData(writer, _a, layerData) {\n    var mask = _a.mask, vectorMask = _a.vectorMask;\n    writeSection(writer, 1, function () {\n        if (!mask)\n            return;\n        var m = layerData.mask || {};\n        writeInt32(writer, m.top);\n        writeInt32(writer, m.left);\n        writeInt32(writer, m.bottom);\n        writeInt32(writer, m.right);\n        writeUint8(writer, mask.defaultColor);\n        var params = 0;\n        if (mask.userMaskDensity !== undefined)\n            params |= 1 /* UserMaskDensity */;\n        if (mask.userMaskFeather !== undefined)\n            params |= 2 /* UserMaskFeather */;\n        if (mask.vectorMaskDensity !== undefined)\n            params |= 4 /* VectorMaskDensity */;\n        if (mask.vectorMaskFeather !== undefined)\n            params |= 8 /* VectorMaskFeather */;\n        var flags = 0;\n        if (mask.disabled)\n            flags |= 2 /* LayerMaskDisabled */;\n        if (mask.positionRelativeToLayer)\n            flags |= 1 /* PositionRelativeToLayer */;\n        if (vectorMask)\n            flags |= 8 /* LayerMaskFromRenderingOtherData */;\n        if (params)\n            flags |= 16 /* MaskHasParametersAppliedToIt */;\n        writeUint8(writer, flags);\n        if (params) {\n            writeUint8(writer, params);\n            if (mask.userMaskDensity !== undefined)\n                writeUint8(writer, Math.round(mask.userMaskDensity * 0xff));\n            if (mask.userMaskFeather !== undefined)\n                writeFloat64(writer, mask.userMaskFeather);\n            if (mask.vectorMaskDensity !== undefined)\n                writeUint8(writer, Math.round(mask.vectorMaskDensity * 0xff));\n            if (mask.vectorMaskFeather !== undefined)\n                writeFloat64(writer, mask.vectorMaskFeather);\n        }\n        // TODO: handle rest of the fields\n        writeZeros(writer, 2);\n    });\n}\nfunction writeLayerBlendingRanges(writer, psd) {\n    writeSection(writer, 1, function () {\n        writeUint32(writer, 65535);\n        writeUint32(writer, 65535);\n        // TODO: use always 4 instead ?\n        var channels = psd.channels || 0;\n        for (var i = 0; i < channels; i++) {\n            writeUint32(writer, 65535);\n            writeUint32(writer, 65535);\n        }\n    });\n}\nfunction writeGlobalLayerMaskInfo(writer) {\n    writeSection(writer, 1, function () {\n        // TODO: implement\n    });\n}\nfunction writeAdditionalLayerInfo(writer, target, psd, options) {\n    var _loop_3 = function (handler) {\n        if (handler.key === 'Txt2' && options.invalidateTextLayers)\n            return \"continue\";\n        if (handler.has(target)) {\n            writeSignature(writer, '8BIM');\n            writeSignature(writer, handler.key);\n            var align = handler.key === 'Txt2' ? 4 : 2;\n            writeSection(writer, align, function () { return handler.write(writer, target, psd, options); }, handler.key !== 'Txt2');\n        }\n    };\n    for (var _i = 0, infoHandlers_1 = additionalInfo_1.infoHandlers; _i < infoHandlers_1.length; _i++) {\n        var handler = infoHandlers_1[_i];\n        _loop_3(handler);\n    }\n}\nfunction addChildren(layers, children) {\n    if (!children)\n        return;\n    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n        var c = children_1[_i];\n        if (c.children && c.canvas)\n            throw new Error(\"Invalid layer, cannot have both 'canvas' and 'children' properties\");\n        if (c.children && c.imageData)\n            throw new Error(\"Invalid layer, cannot have both 'imageData' and 'children' properties\");\n        if (c.children) {\n            var sectionDivider = {\n                type: c.opened === false ? 2 /* ClosedFolder */ : 1 /* OpenFolder */,\n                key: 'pass',\n                subtype: 0,\n            };\n            layers.push({\n                name: '</Layer group>',\n                sectionDivider: {\n                    type: 3 /* BoundingSectionDivider */,\n                },\n            });\n            addChildren(layers, c.children);\n            layers.push(__assign(__assign({}, c), { sectionDivider: sectionDivider }));\n        }\n        else {\n            layers.push(__assign({}, c));\n        }\n    }\n}\nfunction resizeBuffer(writer, size) {\n    var newLength = writer.buffer.byteLength;\n    do {\n        newLength *= 2;\n    } while (size > newLength);\n    var newBuffer = new ArrayBuffer(newLength);\n    var newBytes = new Uint8Array(newBuffer);\n    var oldBytes = new Uint8Array(writer.buffer);\n    newBytes.set(oldBytes);\n    writer.buffer = newBuffer;\n    writer.view = new DataView(writer.buffer);\n}\nfunction ensureSize(writer, size) {\n    if (size > writer.buffer.byteLength) {\n        resizeBuffer(writer, size);\n    }\n}\nfunction addSize(writer, size) {\n    var offset = writer.offset;\n    ensureSize(writer, writer.offset += size);\n    return offset;\n}\nfunction createThumbnail(psd) {\n    var canvas = helpers_1.createCanvas(10, 10);\n    var scale = 1;\n    if (psd.width > psd.height) {\n        canvas.width = 160;\n        canvas.height = Math.floor(psd.height * (canvas.width / psd.width));\n        scale = canvas.width / psd.width;\n    }\n    else {\n        canvas.height = 160;\n        canvas.width = Math.floor(psd.width * (canvas.height / psd.height));\n        scale = canvas.height / psd.height;\n    }\n    var context = canvas.getContext('2d');\n    context.scale(scale, scale);\n    if (psd.imageData) {\n        var temp = helpers_1.createCanvas(psd.imageData.width, psd.imageData.height);\n        temp.getContext('2d').putImageData(psd.imageData, 0, 0);\n        context.drawImage(temp, 0, 0);\n    }\n    else if (psd.canvas) {\n        context.drawImage(psd.canvas, 0, 0);\n    }\n    return canvas;\n}\nfunction getChannels(tempBuffer, layer, background, options) {\n    var layerData = getLayerChannels(tempBuffer, layer, background, options);\n    var mask = layer.mask;\n    if (mask) {\n        var _a = mask.top, top_2 = _a === void 0 ? 0 : _a, _b = mask.left, left = _b === void 0 ? 0 : _b, _c = mask.right, right = _c === void 0 ? 0 : _c, _d = mask.bottom, bottom = _d === void 0 ? 0 : _d;\n        var _e = getLayerDimentions(mask), width = _e.width, height = _e.height;\n        var imageData = mask.imageData;\n        if (!imageData && mask.canvas && width && height) {\n            imageData = mask.canvas.getContext('2d').getImageData(0, 0, width, height);\n        }\n        if (width && height && imageData) {\n            right = left + width;\n            bottom = top_2 + height;\n            var buffer = helpers_1.writeDataRLE(tempBuffer, imageData, width, height, [0]);\n            layerData.mask = { top: top_2, left: left, right: right, bottom: bottom };\n            layerData.channels.push({\n                channelId: -2 /* UserMask */,\n                compression: 1 /* RleCompressed */,\n                buffer: buffer,\n                length: 2 + buffer.length,\n            });\n        }\n        else {\n            layerData.mask = { top: 0, left: 0, right: 0, bottom: 0 };\n            layerData.channels.push({\n                channelId: -2 /* UserMask */,\n                compression: 0 /* RawData */,\n                buffer: new Uint8Array(0),\n                length: 0,\n            });\n        }\n    }\n    return layerData;\n}\nfunction getLayerDimentions(_a) {\n    var canvas = _a.canvas, imageData = _a.imageData;\n    return imageData || canvas || { width: 0, height: 0 };\n}\nfunction cropImageData(data, left, top, width, height) {\n    var croppedData = helpers_1.createImageData(width, height);\n    var srcData = data.data;\n    var dstData = croppedData.data;\n    for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n            var src = ((x + left) + (y + top) * width) * 4;\n            var dst = (x + y * width) * 4;\n            dstData[dst] = srcData[src];\n            dstData[dst + 1] = srcData[src + 1];\n            dstData[dst + 2] = srcData[src + 2];\n            dstData[dst + 3] = srcData[src + 3];\n        }\n    }\n    return croppedData;\n}\nfunction getLayerChannels(tempBuffer, layer, background, options) {\n    var _a = layer.top, top = _a === void 0 ? 0 : _a, _b = layer.left, left = _b === void 0 ? 0 : _b, _c = layer.right, right = _c === void 0 ? 0 : _c, _d = layer.bottom, bottom = _d === void 0 ? 0 : _d;\n    var channels = [\n        {\n            channelId: -1 /* Transparency */,\n            compression: 0 /* RawData */,\n            buffer: undefined,\n            length: 2,\n        }\n    ];\n    var _e = getLayerDimentions(layer), width = _e.width, height = _e.height;\n    if (!(layer.canvas || layer.imageData) || !width || !height) {\n        right = left;\n        bottom = top;\n        return { layer: layer, top: top, left: left, right: right, bottom: bottom, channels: channels };\n    }\n    right = left + width;\n    bottom = top + height;\n    var data = layer.imageData || layer.canvas.getContext('2d').getImageData(0, 0, width, height);\n    if (options.trimImageData) {\n        var trimmed = trimData(data);\n        if (trimmed.left !== 0 || trimmed.top !== 0 || trimmed.right !== data.width || trimmed.bottom !== data.height) {\n            left += trimmed.left;\n            top += trimmed.top;\n            right -= (data.width - trimmed.right);\n            bottom -= (data.height - trimmed.bottom);\n            width = right - left;\n            height = bottom - top;\n            if (!width || !height) {\n                return { layer: layer, top: top, left: left, right: right, bottom: bottom, channels: channels };\n            }\n            if (layer.imageData) {\n                data = cropImageData(data, trimmed.left, trimmed.top, width, height);\n            }\n            else {\n                data = layer.canvas.getContext('2d').getImageData(trimmed.left, trimmed.top, width, height);\n            }\n        }\n    }\n    var channelIds = [\n        0 /* Red */,\n        1 /* Green */,\n        2 /* Blue */,\n    ];\n    if (!background || helpers_1.hasAlpha(data) || layer.mask) {\n        channelIds.unshift(-1 /* Transparency */);\n    }\n    channels = channelIds.map(function (channel) {\n        var offset = helpers_1.offsetForChannel(channel);\n        var buffer = helpers_1.writeDataRLE(tempBuffer, data, width, height, [offset]);\n        if (RAW_IMAGE_DATA && layer.imageDataRaw) {\n            console.log('written raw layer image data');\n            buffer = layer.imageDataRaw[channel];\n        }\n        return {\n            channelId: channel,\n            compression: 1 /* RleCompressed */,\n            buffer: buffer,\n            length: 2 + buffer.length,\n        };\n    });\n    return { layer: layer, top: top, left: left, right: right, bottom: bottom, channels: channels };\n}\nfunction isRowEmpty(_a, y, left, right) {\n    var data = _a.data, width = _a.width;\n    var start = ((y * width + left) * 4 + 3) | 0;\n    var end = (start + (right - left) * 4) | 0;\n    for (var i = start; i < end; i = (i + 4) | 0) {\n        if (data[i] !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isColEmpty(_a, x, top, bottom) {\n    var data = _a.data, width = _a.width;\n    var stride = (width * 4) | 0;\n    var start = (top * stride + x * 4 + 3) | 0;\n    for (var y = top, i = start; y < bottom; y++, i = (i + stride) | 0) {\n        if (data[i] !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction trimData(data) {\n    var top = 0;\n    var left = 0;\n    var right = data.width;\n    var bottom = data.height;\n    while (top < bottom && isRowEmpty(data, top, left, right))\n        top++;\n    while (bottom > top && isRowEmpty(data, bottom - 1, left, right))\n        bottom--;\n    while (left < right && isColEmpty(data, left, top, bottom))\n        left++;\n    while (right > left && isColEmpty(data, right - 1, top, bottom))\n        right--;\n    return { top: top, left: left, right: right, bottom: bottom };\n}\nfunction writeColor(writer, color) {\n    if (!color) {\n        writeUint16(writer, 0 /* RGB */);\n        writeZeros(writer, 8);\n    }\n    else if ('r' in color) {\n        writeUint16(writer, 0 /* RGB */);\n        writeUint16(writer, Math.round(color.r * 257));\n        writeUint16(writer, Math.round(color.g * 257));\n        writeUint16(writer, Math.round(color.b * 257));\n        writeUint16(writer, 0);\n    }\n    else if ('l' in color) {\n        writeUint16(writer, 7 /* Lab */);\n        writeUint16(writer, Math.round(color.l * 100));\n        writeUint16(writer, Math.round(color.a * 100));\n        writeUint16(writer, Math.round(color.b * 100));\n        writeUint16(writer, 0);\n    }\n    else if ('h' in color) {\n        writeUint16(writer, 1 /* HSB */);\n        writeUint16(writer, Math.round(color.h));\n        writeUint16(writer, Math.round(color.s));\n        writeUint16(writer, Math.round(color.b));\n        writeUint16(writer, 0);\n    }\n    else if ('c' in color) {\n        writeUint16(writer, 2 /* CMYK */);\n        writeUint16(writer, Math.round(color.c));\n        writeUint16(writer, Math.round(color.m));\n        writeUint16(writer, Math.round(color.y));\n        writeUint16(writer, Math.round(color.k));\n    }\n    else {\n        writeUint16(writer, 8 /* Grayscale */);\n        writeUint16(writer, Math.round(color.k));\n        writeZeros(writer, 6);\n    }\n}\nexports.writeColor = writeColor;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n//# sourceURL=webpack://psd.index/./node_modules/ag-psd/dist/psdWriter.js?")},"./node_modules/ag-psd/dist/text.js":function(__unused_webpack_module,exports){eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.encodeEngineData = exports.decodeEngineData = void 0;\nvar defaultFont = {\n    name: 'MyriadPro-Regular',\n    script: 0,\n    type: 0,\n    synthetic: 0,\n};\nvar defaultParagraphStyle = {\n    justification: 'left',\n    firstLineIndent: 0,\n    startIndent: 0,\n    endIndent: 0,\n    spaceBefore: 0,\n    spaceAfter: 0,\n    autoHyphenate: true,\n    hyphenatedWordSize: 6,\n    preHyphen: 2,\n    postHyphen: 2,\n    consecutiveHyphens: 8,\n    zone: 36,\n    wordSpacing: [0.8, 1, 1.33],\n    letterSpacing: [0, 0, 0],\n    glyphSpacing: [1, 1, 1],\n    autoLeading: 1.2,\n    leadingType: 0,\n    hanging: false,\n    burasagari: false,\n    kinsokuOrder: 0,\n    everyLineComposer: false,\n};\nvar defaultStyle = {\n    font: defaultFont,\n    fontSize: 12,\n    fauxBold: false,\n    fauxItalic: false,\n    autoLeading: true,\n    leading: 0,\n    horizontalScale: 1,\n    verticalScale: 1,\n    tracking: 0,\n    autoKerning: true,\n    kerning: 0,\n    baselineShift: 0,\n    fontCaps: 0,\n    fontBaseline: 0,\n    underline: false,\n    strikethrough: false,\n    ligatures: true,\n    dLigatures: false,\n    baselineDirection: 2,\n    tsume: 0,\n    styleRunAlignment: 2,\n    language: 0,\n    noBreak: false,\n    fillColor: { r: 0, g: 0, b: 0 },\n    strokeColor: { r: 0, g: 0, b: 0 },\n    fillFlag: true,\n    strokeFlag: false,\n    fillFirst: true,\n    yUnderline: 1,\n    outlineWidth: 1,\n    characterDirection: 0,\n    hindiNumbers: false,\n    kashida: 1,\n    diacriticPos: 2,\n};\nvar defaultGridInfo = {\n    isOn: false,\n    show: false,\n    size: 18,\n    leading: 22,\n    color: { r: 0, g: 0, b: 255 },\n    leadingFillColor: { r: 0, g: 0, b: 255 },\n    alignLineHeightToGridFlags: false,\n};\nvar paragraphStyleKeys = [\n    'justification', 'firstLineIndent', 'startIndent', 'endIndent', 'spaceBefore', 'spaceAfter',\n    'autoHyphenate', 'hyphenatedWordSize', 'preHyphen', 'postHyphen', 'consecutiveHyphens',\n    'zone', 'wordSpacing', 'letterSpacing', 'glyphSpacing', 'autoLeading', 'leadingType',\n    'hanging', 'burasagari', 'kinsokuOrder', 'everyLineComposer',\n];\nvar styleKeys = [\n    'font', 'fontSize', 'fauxBold', 'fauxItalic', 'autoLeading', 'leading', 'horizontalScale',\n    'verticalScale', 'tracking', 'autoKerning', 'kerning', 'baselineShift', 'fontCaps', 'fontBaseline',\n    'underline', 'strikethrough', 'ligatures', 'dLigatures', 'baselineDirection', 'tsume',\n    'styleRunAlignment', 'language', 'noBreak', 'fillColor', 'strokeColor', 'fillFlag',\n    'strokeFlag', 'fillFirst', 'yUnderline', 'outlineWidth', 'characterDirection', 'hindiNumbers',\n    'kashida', 'diacriticPos',\n];\nvar antialias = ['none', 'crisp', 'strong', 'smooth', 'sharp'];\nvar justification = ['left', 'right', 'center'];\nfunction upperFirst(value) {\n    return value.substr(0, 1).toUpperCase() + value.substr(1);\n}\nfunction decodeColor(color) {\n    var c = color.Values;\n    if (color.Type === 0) { // grayscale\n        return { r: c[1] * 255, g: c[1] * 255, b: c[1] * 255 }; // , c[0] * 255];\n    }\n    else { // rgb\n        return { r: c[1] * 255, g: c[2] * 255, b: c[3] * 255, a: c[0] }; // , c[0] * 255];\n    }\n}\nfunction encodeColor(color) {\n    if (color && 'r' in color) {\n        return ['a' in color ? color.a : 1, color.r / 255, color.g / 255, color.b / 255];\n    }\n    else {\n        return [0, 0, 0, 0];\n    }\n}\nfunction arraysEqual(a, b) {\n    if (!a || !b)\n        return false;\n    if (a.length !== b.length)\n        return false;\n    for (var i = 0; i < a.length; i++)\n        if (a[i] !== b[i])\n            return false;\n    return true;\n}\nfunction objectsEqual(a, b) {\n    if (!a || !b)\n        return false;\n    for (var _i = 0, _a = Object.keys(a); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (a[key] !== b[key])\n            return false;\n    }\n    for (var _b = 0, _c = Object.keys(b); _b < _c.length; _b++) {\n        var key = _c[_b];\n        if (a[key] !== b[key])\n            return false;\n    }\n    return true;\n}\nfunction findOrAddFont(fonts, font) {\n    for (var i = 0; i < fonts.length; i++) {\n        if (fonts[i].name === font.name)\n            return i;\n    }\n    fonts.push(font);\n    return fonts.length - 1;\n}\nfunction decodeObject(obj, keys, fonts) {\n    var result = {};\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        var Key = upperFirst(key);\n        if (obj[Key] === undefined)\n            continue;\n        if (key === 'justification') {\n            result[key] = justification[obj[Key]];\n        }\n        else if (key === 'font') {\n            result[key] = fonts[obj[Key]];\n        }\n        else if (key === 'fillColor' || key === 'strokeColor') {\n            result[key] = decodeColor(obj[Key]);\n        }\n        else {\n            result[key] = obj[Key];\n        }\n    }\n    return result;\n}\nfunction encodeObject(obj, keys, fonts) {\n    var _a;\n    var result = {};\n    for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n        var key = keys_2[_i];\n        var Key = upperFirst(key);\n        if (obj[key] === undefined)\n            continue;\n        if (key === 'justification') {\n            result[Key] = justification.indexOf((_a = obj[key]) !== null && _a !== void 0 ? _a : 'left');\n        }\n        else if (key === 'font') {\n            result[Key] = findOrAddFont(fonts, obj[key]);\n        }\n        else if (key === 'fillColor' || key === 'strokeColor') {\n            result[Key] = { Type: 1, Values: encodeColor(obj[key]) };\n        }\n        else {\n            result[Key] = obj[key];\n        }\n    }\n    return result;\n}\nfunction decodeParagraphStyle(obj, fonts) {\n    return decodeObject(obj, paragraphStyleKeys, fonts);\n}\nfunction decodeStyle(obj, fonts) {\n    return decodeObject(obj, styleKeys, fonts);\n}\nfunction encodeParagraphStyle(obj, fonts) {\n    return encodeObject(obj, paragraphStyleKeys, fonts);\n}\nfunction encodeStyle(obj, fonts) {\n    return encodeObject(obj, styleKeys, fonts);\n}\nfunction deduplicateValues(base, runs, keys) {\n    if (!runs.length)\n        return;\n    var _loop_1 = function (key) {\n        var value = runs[0].style[key];\n        if (value !== undefined) {\n            var identical = false;\n            if (Array.isArray(value)) {\n                identical = runs.every(function (r) { return arraysEqual(r.style[key], value); });\n            }\n            else if (typeof value === 'object') {\n                identical = runs.every(function (r) { return objectsEqual(r.style[key], value); });\n            }\n            else {\n                identical = runs.every(function (r) { return r.style[key] === value; });\n            }\n            if (identical) {\n                base[key] = value;\n            }\n        }\n        var styleValue = base[key];\n        if (styleValue !== undefined) {\n            for (var _i = 0, runs_1 = runs; _i < runs_1.length; _i++) {\n                var r = runs_1[_i];\n                var same = false;\n                if (Array.isArray(value)) {\n                    same = arraysEqual(r.style[key], value);\n                }\n                else if (typeof value === 'object') {\n                    same = objectsEqual(r.style[key], value);\n                }\n                else {\n                    same = r.style[key] === value;\n                }\n                if (same)\n                    delete r.style[key];\n            }\n        }\n    };\n    for (var _i = 0, keys_3 = keys; _i < keys_3.length; _i++) {\n        var key = keys_3[_i];\n        _loop_1(key);\n    }\n    if (runs.every(function (x) { return Object.keys(x.style).length === 0; })) {\n        runs.length = 0;\n    }\n}\nfunction decodeEngineData(engineData) {\n    var _a, _b, _c, _d, _e, _f;\n    var engineDict = engineData.EngineDict;\n    var resourceDict = engineData.ResourceDict;\n    var fonts = resourceDict.FontSet.map(function (f) { return ({\n        name: f.Name,\n        script: f.Script,\n        type: f.FontType,\n        synthetic: f.Synthetic,\n    }); });\n    var result = {\n        text: engineDict.Editor.Text.replace(/\\r/g, '\\n').replace(/\\n$/, ''),\n        antiAlias: (_a = antialias[engineDict.AntiAlias]) !== null && _a !== void 0 ? _a : 'smooth',\n        useFractionalGlyphWidths: !!engineDict.UseFractionalGlyphWidths,\n        superscriptSize: resourceDict.SuperscriptSize,\n        superscriptPosition: resourceDict.SuperscriptPosition,\n        subscriptSize: resourceDict.SubscriptSize,\n        subscriptPosition: resourceDict.SubscriptPosition,\n        smallCapSize: resourceDict.SmallCapSize,\n    };\n    // shape\n    var photoshop = (_f = (_e = (_d = (_c = (_b = engineDict.Rendered) === null || _b === void 0 ? void 0 : _b.Shapes) === null || _c === void 0 ? void 0 : _c.Children) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.Cookie) === null || _f === void 0 ? void 0 : _f.Photoshop;\n    if (photoshop) {\n        result.shapeType = photoshop.ShapeType === 1 ? 'box' : 'point';\n        if (photoshop.PointBase)\n            result.pointBase = photoshop.PointBase;\n        if (photoshop.BoxBounds)\n            result.boxBounds = photoshop.BoxBounds;\n    }\n    // paragraph style\n    // const theNormalParagraphSheet = resourceDict.TheNormalParagraphSheet;\n    // const paragraphSheetSet = resourceDict.ParagraphSheetSet;\n    // const paragraphProperties = paragraphSheetSet[theNormalParagraphSheet].Properties;\n    var paragraphRun = engineData.EngineDict.ParagraphRun;\n    result.paragraphStyle = {}; // decodeParagraphStyle(paragraphProperties, fonts);\n    result.paragraphStyleRuns = [];\n    for (var i = 0; i < paragraphRun.RunArray.length; i++) {\n        var run_1 = paragraphRun.RunArray[i];\n        var length_1 = paragraphRun.RunLengthArray[i];\n        var style = decodeParagraphStyle(run_1.ParagraphSheet.Properties, fonts);\n        // const adjustments = {\n        //   axis: run.Adjustments.Axis,\n        //   xy: run.Adjustments.XY,\n        // };\n        result.paragraphStyleRuns.push({ length: length_1, style: style /*, adjustments*/ });\n    }\n    deduplicateValues(result.paragraphStyle, result.paragraphStyleRuns, paragraphStyleKeys);\n    if (!result.paragraphStyleRuns.length)\n        delete result.paragraphStyleRuns;\n    // style\n    // const theNormalStyleSheet = resourceDict.TheNormalStyleSheet;\n    // const styleSheetSet = resourceDict.StyleSheetSet;\n    // const styleSheetData = styleSheetSet[theNormalStyleSheet].StyleSheetData;\n    var styleRun = engineData.EngineDict.StyleRun;\n    result.style = {}; // decodeStyle(styleSheetData, fonts);\n    result.styleRuns = [];\n    for (var i = 0; i < styleRun.RunArray.length; i++) {\n        var length_2 = styleRun.RunLengthArray[i];\n        var style = decodeStyle(styleRun.RunArray[i].StyleSheet.StyleSheetData, fonts);\n        result.styleRuns.push({ length: length_2, style: style });\n    }\n    deduplicateValues(result.style, result.styleRuns, styleKeys);\n    if (!result.styleRuns.length)\n        delete result.styleRuns;\n    return result;\n}\nexports.decodeEngineData = decodeEngineData;\nfunction encodeEngineData(data) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    var text = (data.text || '').replace(/\\r?\\n/g, '\\r') + \"\\r\";\n    var fonts = [\n        { name: 'AdobeInvisFont', script: 0, type: 0, synthetic: 0 },\n    ];\n    var defFont = ((_a = data.style) === null || _a === void 0 ? void 0 : _a.font) || ((_c = (_b = data.styleRuns) === null || _b === void 0 ? void 0 : _b.find(function (s) { return s.style.font; })) === null || _c === void 0 ? void 0 : _c.style.font) ||\n        defaultFont;\n    var paragraphRunArray = [];\n    var paragraphRunLengthArray = [];\n    if (data.paragraphStyleRuns && data.paragraphStyleRuns.length) {\n        for (var _i = 0, _o = data.paragraphStyleRuns; _i < _o.length; _i++) {\n            var run_2 = _o[_i];\n            paragraphRunLengthArray.push(run_2.length);\n            paragraphRunArray.push({\n                ParagraphSheet: {\n                    DefaultStyleSheet: 0,\n                    Properties: encodeParagraphStyle(__assign(__assign(__assign({}, defaultParagraphStyle), data.paragraphStyle), run_2.style), fonts),\n                },\n                Adjustments: { Axis: [1, 0, 1], XY: [0, 0] },\n            });\n        }\n    }\n    else {\n        for (var i = 0, last = 0; i < text.length; i++) {\n            if (text.charCodeAt(i) === 13) { // \\r\n                paragraphRunLengthArray.push(i - last + 1);\n                paragraphRunArray.push({\n                    ParagraphSheet: {\n                        DefaultStyleSheet: 0,\n                        Properties: encodeParagraphStyle(__assign(__assign({}, defaultParagraphStyle), data.paragraphStyle), fonts),\n                    },\n                    Adjustments: { Axis: [1, 0, 1], XY: [0, 0] },\n                });\n                last = i + 1;\n            }\n        }\n    }\n    var styleSheetData = encodeStyle(__assign(__assign({}, defaultStyle), { font: defFont }), fonts);\n    var styleRuns = data.styleRuns || [{ length: text.length, style: data.style || {} }];\n    var styleRunArray = [];\n    var styleRunLengthArray = [];\n    for (var _p = 0, styleRuns_1 = styleRuns; _p < styleRuns_1.length; _p++) {\n        var run_3 = styleRuns_1[_p];\n        styleRunLengthArray.push(run_3.length);\n        styleRunArray.push({\n            StyleSheet: {\n                StyleSheetData: encodeStyle(__assign(__assign({ kerning: 0, autoKerning: true, fillColor: { r: 0, g: 0, b: 0 } }, data.style), run_3.style), fonts),\n            },\n        });\n    }\n    var gridInfo = __assign(__assign({}, defaultGridInfo), data.gridInfo);\n    var WritingDirection = data.orientation === 'vertical' ? 2 : 0;\n    var Procession = data.orientation === 'vertical' ? 1 : 0;\n    var ShapeType = data.shapeType === 'box' ? 1 : 0;\n    var Photoshop = {\n        ShapeType: ShapeType,\n    };\n    if (ShapeType === 0) {\n        Photoshop.PointBase = data.pointBase || [0, 0];\n    }\n    else {\n        Photoshop.BoxBounds = data.boxBounds || [0, 0, 0, 0];\n    }\n    // needed for correct order of properties\n    Photoshop.Base = {\n        ShapeType: ShapeType,\n        TransformPoint0: [1, 0],\n        TransformPoint1: [0, 1],\n        TransformPoint2: [0, 0],\n    };\n    var defaultResources = {\n        KinsokuSet: [\n            {\n                Name: 'PhotoshopKinsokuHard',\n                NoStart: '、。，．・：；？！ー―’”）〕］｝〉》」』】ヽヾゝゞ々ぁぃぅぇぉっゃゅょゎァィゥェォッャュョヮヵヶ゛゜?!)]},.:;℃℉¢％‰',\n                NoEnd: '‘“（〔［｛〈《「『【([{￥＄£＠§〒＃',\n                Keep: '―‥',\n                Hanging: '、。.,',\n            },\n            {\n                Name: 'PhotoshopKinsokuSoft',\n                NoStart: '、。，．・：；？！’”）〕］｝〉》」』】ヽヾゝゞ々',\n                NoEnd: '‘“（〔［｛〈《「『【',\n                Keep: '―‥',\n                Hanging: '、。.,',\n            },\n        ],\n        MojiKumiSet: [\n            { InternalName: 'Photoshop6MojiKumiSet1' },\n            { InternalName: 'Photoshop6MojiKumiSet2' },\n            { InternalName: 'Photoshop6MojiKumiSet3' },\n            { InternalName: 'Photoshop6MojiKumiSet4' },\n        ],\n        TheNormalStyleSheet: 0,\n        TheNormalParagraphSheet: 0,\n        ParagraphSheetSet: [\n            {\n                Name: 'Normal RGB',\n                DefaultStyleSheet: 0,\n                Properties: encodeParagraphStyle(__assign(__assign({}, defaultParagraphStyle), data.paragraphStyle), fonts),\n            },\n        ],\n        StyleSheetSet: [\n            {\n                Name: 'Normal RGB',\n                StyleSheetData: styleSheetData,\n            },\n        ],\n        FontSet: fonts.map(function (f) { return ({\n            Name: f.name,\n            Script: f.script || 0,\n            FontType: f.type || 0,\n            Synthetic: f.synthetic || 0,\n        }); }),\n        SuperscriptSize: (_d = data.superscriptSize) !== null && _d !== void 0 ? _d : 0.583,\n        SuperscriptPosition: (_e = data.superscriptPosition) !== null && _e !== void 0 ? _e : 0.333,\n        SubscriptSize: (_f = data.subscriptSize) !== null && _f !== void 0 ? _f : 0.583,\n        SubscriptPosition: (_g = data.subscriptPosition) !== null && _g !== void 0 ? _g : 0.333,\n        SmallCapSize: (_h = data.smallCapSize) !== null && _h !== void 0 ? _h : 0.7,\n    };\n    var engineData = {\n        EngineDict: {\n            Editor: { Text: text },\n            ParagraphRun: {\n                DefaultRunData: {\n                    ParagraphSheet: { DefaultStyleSheet: 0, Properties: {} },\n                    Adjustments: { Axis: [1, 0, 1], XY: [0, 0] },\n                },\n                RunArray: paragraphRunArray,\n                RunLengthArray: paragraphRunLengthArray,\n                IsJoinable: 1,\n            },\n            StyleRun: {\n                DefaultRunData: { StyleSheet: { StyleSheetData: {} } },\n                RunArray: styleRunArray,\n                RunLengthArray: styleRunLengthArray,\n                IsJoinable: 2,\n            },\n            GridInfo: {\n                GridIsOn: !!gridInfo.isOn,\n                ShowGrid: !!gridInfo.show,\n                GridSize: (_j = gridInfo.size) !== null && _j !== void 0 ? _j : 18,\n                GridLeading: (_k = gridInfo.leading) !== null && _k !== void 0 ? _k : 22,\n                GridColor: { Type: 1, Values: encodeColor(gridInfo.color) },\n                GridLeadingFillColor: { Type: 1, Values: encodeColor(gridInfo.color) },\n                AlignLineHeightToGridFlags: !!gridInfo.alignLineHeightToGridFlags,\n            },\n            AntiAlias: antialias.indexOf((_l = data.antiAlias) !== null && _l !== void 0 ? _l : 'sharp'),\n            UseFractionalGlyphWidths: (_m = data.useFractionalGlyphWidths) !== null && _m !== void 0 ? _m : true,\n            Rendered: {\n                Version: 1,\n                Shapes: {\n                    WritingDirection: WritingDirection,\n                    Children: [\n                        {\n                            ShapeType: ShapeType,\n                            Procession: Procession,\n                            Lines: { WritingDirection: WritingDirection, Children: [] },\n                            Cookie: { Photoshop: Photoshop },\n                        },\n                    ],\n                },\n            },\n        },\n        ResourceDict: __assign({}, defaultResources),\n        DocumentResources: __assign({}, defaultResources),\n    };\n    // console.log('encodeEngineData', require('util').inspect(engineData, false, 99, true));\n    return engineData;\n}\nexports.encodeEngineData = encodeEngineData;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n//# sourceURL=webpack://psd.index/./node_modules/ag-psd/dist/text.js?")},"./node_modules/ag-psd/dist/utf8.js":function(__unused_webpack_module,exports){eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodeString = exports.encodeString = exports.encodeStringTo = exports.stringLengthInBytes = void 0;\nfunction charLengthInBytes(code) {\n    if ((code & 0xffffff80) === 0) {\n        return 1;\n    }\n    else if ((code & 0xfffff800) === 0) {\n        return 2;\n    }\n    else if ((code & 0xffff0000) === 0) {\n        return 3;\n    }\n    else {\n        return 4;\n    }\n}\nfunction stringLengthInBytes(value) {\n    var result = 0;\n    for (var i = 0; i < value.length; i++) {\n        var code = value.charCodeAt(i);\n        // high surrogate\n        if (code >= 0xd800 && code <= 0xdbff) {\n            if ((i + 1) < value.length) {\n                var extra = value.charCodeAt(i + 1);\n                // low surrogate\n                if ((extra & 0xfc00) === 0xdc00) {\n                    i++;\n                    result += charLengthInBytes(((code & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);\n                }\n            }\n        }\n        else {\n            result += charLengthInBytes(code);\n        }\n    }\n    return result;\n}\nexports.stringLengthInBytes = stringLengthInBytes;\nfunction writeCharacter(buffer, offset, code) {\n    var length = charLengthInBytes(code);\n    switch (length) {\n        case 1:\n            buffer[offset] = code;\n            break;\n        case 2:\n            buffer[offset] = ((code >> 6) & 0x1f) | 0xc0;\n            buffer[offset + 1] = (code & 0x3f) | 0x80;\n            break;\n        case 3:\n            buffer[offset] = ((code >> 12) & 0x0f) | 0xe0;\n            buffer[offset + 1] = ((code >> 6) & 0x3f) | 0x80;\n            buffer[offset + 2] = (code & 0x3f) | 0x80;\n            break;\n        default:\n            buffer[offset] = ((code >> 18) & 0x07) | 0xf0;\n            buffer[offset + 1] = ((code >> 12) & 0x3f) | 0x80;\n            buffer[offset + 2] = ((code >> 6) & 0x3f) | 0x80;\n            buffer[offset + 3] = (code & 0x3f) | 0x80;\n            break;\n    }\n    return length;\n}\nfunction encodeStringTo(buffer, offset, value) {\n    for (var i = 0; i < value.length; i++) {\n        var code = value.charCodeAt(i);\n        // high surrogate\n        if (code >= 0xd800 && code <= 0xdbff) {\n            if ((i + 1) < value.length) {\n                var extra = value.charCodeAt(i + 1);\n                // low surrogate\n                if ((extra & 0xfc00) === 0xdc00) {\n                    i++;\n                    var fullCode = ((code & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n                    offset += writeCharacter(buffer, offset, fullCode);\n                }\n            }\n        }\n        else {\n            offset += writeCharacter(buffer, offset, code);\n        }\n    }\n    return offset;\n}\nexports.encodeStringTo = encodeStringTo;\nfunction encodeString(value) {\n    var buffer = new Uint8Array(stringLengthInBytes(value));\n    encodeStringTo(buffer, 0, value);\n    return buffer;\n}\nexports.encodeString = encodeString;\nfunction continuationByte(buffer, index) {\n    if (index >= buffer.length) {\n        throw Error('Invalid byte index');\n    }\n    var continuationByte = buffer[index];\n    if ((continuationByte & 0xC0) === 0x80) {\n        return continuationByte & 0x3F;\n    }\n    else {\n        throw Error('Invalid continuation byte');\n    }\n}\nfunction decodeString(value) {\n    var result = '';\n    for (var i = 0; i < value.length;) {\n        var byte1 = value[i++];\n        var code = void 0;\n        if ((byte1 & 0x80) === 0) {\n            code = byte1;\n        }\n        else if ((byte1 & 0xe0) === 0xc0) {\n            var byte2 = continuationByte(value, i++);\n            code = ((byte1 & 0x1f) << 6) | byte2;\n            if (code < 0x80) {\n                throw Error('Invalid continuation byte');\n            }\n        }\n        else if ((byte1 & 0xf0) === 0xe0) {\n            var byte2 = continuationByte(value, i++);\n            var byte3 = continuationByte(value, i++);\n            code = ((byte1 & 0x0f) << 12) | (byte2 << 6) | byte3;\n            if (code < 0x0800) {\n                throw Error('Invalid continuation byte');\n            }\n            if (code >= 0xd800 && code <= 0xdfff) {\n                throw Error(\"Lone surrogate U+\" + code.toString(16).toUpperCase() + \" is not a scalar value\");\n            }\n        }\n        else if ((byte1 & 0xf8) === 0xf0) {\n            var byte2 = continuationByte(value, i++);\n            var byte3 = continuationByte(value, i++);\n            var byte4 = continuationByte(value, i++);\n            code = ((byte1 & 0x0f) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n            if (code < 0x010000 || code > 0x10ffff) {\n                throw Error('Invalid continuation byte');\n            }\n        }\n        else {\n            throw Error('Invalid UTF-8 detected');\n        }\n        if (code > 0xffff) {\n            code -= 0x10000;\n            result += String.fromCharCode(code >>> 10 & 0x3ff | 0xd800);\n            code = 0xdc00 | code & 0x3ff;\n        }\n        result += String.fromCharCode(code);\n    }\n    return result;\n}\nexports.decodeString = decodeString;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n//# sourceURL=webpack://psd.index/./node_modules/ag-psd/dist/utf8.js?")},"./node_modules/base64-js/index.js":function(__unused_webpack_module,exports){eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://psd.index/./node_modules/base64-js/index.js?")}},__webpack_module_cache__={};function __webpack_require__(Q){if(__webpack_module_cache__[Q])return __webpack_module_cache__[Q].exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.exports}return __webpack_require__.d=function(Q,F){for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},__webpack_require__.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},__webpack_require__("./app.psd.index.mjs")}());