export default obj=>new Promise(function(resolve,reject){bundle.default(obj,null,async function(error,config){let template=config.babel.transform("\n           let PropTypes = config['PropTypes']\n           let classnames = config['classnames']\n            let React =   config['React']\n            const TextFieldGroup = ({\n              name,\n              placeholder,\n              value,\n              label,\n              error,\n              info,\n              type,\n              onChange,\n              disabled\n            }) => {\n              return (\n                <div className=\"form-group\">\n                  <input\n                    type={type}\n                    className={classnames('form-control form-control-lg', {\n                      'is-invalid': error\n                    })}\n                    placeholder={placeholder}\n                    name={name}\n                    value={value}\n                    onChange={onChange}\n                    disabled={disabled}\n                  />\n                  {info && <small className=\"form-text text-muted\">{info}</small>}\n                  {error && <div className=\"invalid-feedback\">{error}</div>}\n                </div>\n              );\n            };\n            \n            TextFieldGroup.propTypes = {\n              name: PropTypes.string.isRequired,\n              placeholder: PropTypes.string,\n              value: PropTypes.string.isRequired,\n              info: PropTypes.string,\n              error: PropTypes.string,\n              type: PropTypes.string.isRequired,\n              onChange: PropTypes.func.isRequired,\n              disabled: PropTypes.string\n            };\n            \n            TextFieldGroup.defaultProps = {\n              type: 'text'\n            };\n                     resolve(TextFieldGroup)\n            ",config.babel.availablePresets.react);eval(template.code)})});