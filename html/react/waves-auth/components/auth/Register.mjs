import componentTextFieldGroup from"../common/TextFieldGroup.mjs";export default obj=>new Promise(function(resolve,reject){bundle.default(obj,null,async function(error,config){let TextFieldGroup=await componentTextFieldGroup("TextFieldGroup"),template=config.babel.transform('     \n      let React =   config[\'React\']\n      let connect =  config[\'connect\']\n      let PropTypes = config[\'PropTypes\']\n      let Component = config[\'React\'][\'Component\']\n      let registerUser = config[\'actions\'][\'authActions\'][\'registerUser\']\n      let withRouter = config[\'reactRouter\'][\'withRouter\']\n      class Register extends Component {\n        constructor() {\n          super();\n          this.onSubmit = this.onSubmit.bind(this);\n          this.onChange = this.onChange.bind(this);\n          this.state = {\n            name: \'\',\n            email: \'\',\n            password: \'\',\n            password2: \'\',\n            errors: {}\n          };\n        }\n        componentDidMount() {\n          if (this.props.auth.isAuthenticated) {\n            this.props.history.push(\'/dashboard\');\n          }\n        }\n        componentWillReceiveProps(nextProps) {\n          if (nextProps.errors) {\n            this.setState({ errors: nextProps.errors });\n          }\n        }\n          onChange (e) {\n          this.setState({ [e.target.name]: e.target.value });\n        }\n        onSubmit(e){\n          e.preventDefault();\n      \n          const newUser = {\n            name: this.state.name,\n            email: this.state.email,\n            password: this.state.password,\n            password2: this.state.password2\n          };\n          this.props.registerUser(newUser, this.props.history);\n        }\n        render() {\n          const { errors } = this.state;\n          return (\n            <div className="register">\n              <div className="container">\n                <div className="row">\n                  <div className="col-md-8 m-auto">\n                    <h1 className="display-4 text-center">Sign Up</h1>\n                    <p className="lead text-center">\n                      Create your account\n                    </p>\n                    <form noValidate onSubmit={this.onSubmit}>\n                      <TextFieldGroup\n                        placeholder="Name"\n                        name="name"\n                        value={this.state.name}\n                        onChange={this.onChange}\n                        error={errors.name}/>\n                      <TextFieldGroup\n                        placeholder="Email"\n                        name="email"\n                        type="email"\n                        value={this.state.email}\n                        onChange={this.onChange}\n                        error={errors.email}  \n                        />\n                      <TextFieldGroup\n                        placeholder="Password"\n                        name="password"\n                        type="password"\n                        value={this.state.password}\n                        onChange={this.onChange}\n                        error={errors.password} />\n                      <TextFieldGroup\n                        placeholder="Confirm Password"\n                        name="password2"\n                        type="password"\n                        value={this.state.password2}\n                        onChange={this.onChange}\n                        error={errors.password2}/>\n                      <input type="submit" className="btn btn-info btn-block mt-4" />\n                    </form>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        }\n      }\n\n      Register.propTypes = {\n        registerUser: PropTypes.func.isRequired,\n        auth: PropTypes.object.isRequired,\n        errors: PropTypes.object.isRequired\n      };\n\n      const mapStateToProps = state => ({\n        auth: state.auth,\n        errors: state.errors\n      });\n      resolve(connect(mapStateToProps, { registerUser })(withRouter(Register)))\n            ',config.babel.availablePresets.react);eval(template.code)})});